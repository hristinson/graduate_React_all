"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var jsx_runtime_1 = require("react/jsx-runtime");
function FloaterArrow(props) {
    var arrowRef = props.arrowRef, placement = props.placement, styles = props.styles;
    var _a = styles.arrow, color = _a.color, display = _a.display, length = _a.length, position = _a.position, spread = _a.spread;
    var arrowStyles = { display: display, position: position };
    var points;
    var x = spread;
    var y = length;
    /* istanbul ignore else */
    if (placement.startsWith('top')) {
        points = "0,0 ".concat(x / 2, ",").concat(y, " ").concat(x, ",0");
    }
    else if (placement.startsWith('bottom')) {
        points = "".concat(x, ",").concat(y, " ").concat(x / 2, ",0 0,").concat(y);
    }
    else if (placement.startsWith('left')) {
        y = spread;
        x = length;
        points = "0,0 ".concat(x, ",").concat(y / 2, " 0,").concat(y);
    }
    else if (placement.startsWith('right')) {
        y = spread;
        x = length;
        points = "".concat(x, ",").concat(y, " ").concat(x, ",0 0,").concat(y / 2);
    }
    return ((0, jsx_runtime_1.jsx)("span", __assign({ ref: arrowRef, className: "__floater__arrow", style: arrowStyles }, { children: (0, jsx_runtime_1.jsx)("svg", __assign({ height: y, version: "1.1", width: x, xmlns: "http://www.w3.org/2000/svg" }, { children: (0, jsx_runtime_1.jsx)("polygon", { fill: color, points: points }) })) })));
}
exports.default = FloaterArrow;
//# sourceMappingURL=Arrow.js.map