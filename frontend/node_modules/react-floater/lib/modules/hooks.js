"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useUpdateEffect = exports.useUnmount = exports.useSingleton = exports.useSetState = exports.useMount = void 0;
var react_1 = require("react");
function useEffectOnce(effect) {
    // eslint-disable-next-line react-hooks/exhaustive-deps
    (0, react_1.useEffect)(effect, []);
}
function useMount(effect) {
    useEffectOnce(effect);
}
exports.useMount = useMount;
function useSetState(initialState) {
    if (initialState === void 0) { initialState = {}; }
    var _a = __read((0, react_1.useState)(initialState), 2), state = _a[0], set = _a[1];
    var setState = (0, react_1.useCallback)(function (patch) {
        set(function (previousState) { return (__assign(__assign({}, previousState), (patch instanceof Function ? patch(previousState) : patch))); });
    }, [set]);
    return [state, setState];
}
exports.useSetState = useSetState;
function useSingleton(callback) {
    var hasBeenCalled = (0, react_1.useRef)(false);
    if (hasBeenCalled.current) {
        return;
    }
    callback();
    hasBeenCalled.current = true;
}
exports.useSingleton = useSingleton;
function useUnmount(fn) {
    var fnRef = (0, react_1.useRef)(fn);
    // update the ref each render so if it change the newest callback will be invoked
    fnRef.current = fn;
    // eslint-disable-next-line unicorn/consistent-function-scoping
    useEffectOnce(function () { return function () { return fnRef.current(); }; });
}
exports.useUnmount = useUnmount;
function useUpdateEffect(effect, deps) {
    var isFirst = (0, react_1.useRef)(true);
    (0, react_1.useEffect)(function () {
        if (!isFirst.current) {
            effect();
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, deps);
    if (isFirst.current) {
        isFirst.current = false;
    }
}
exports.useUpdateEffect = useUpdateEffect;
//# sourceMappingURL=hooks.js.map