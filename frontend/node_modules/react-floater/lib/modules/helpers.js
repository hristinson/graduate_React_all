"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.randomId = exports.once = exports.on = exports.off = exports.mergeModifier = exports.log = exports.isMobile = exports.isFixed = exports.getModifiers = exports.getFallbackPlacements = exports.enhanceProps = exports.portalId = exports.canUseDOM = void 0;
var deepmerge_ts_1 = require("deepmerge-ts");
var ExecutionEnvironment = require("exenv");
var is_lite_1 = require("is-lite");
exports.canUseDOM = ExecutionEnvironment.canUseDOM;
exports.portalId = 'react-floater-portal';
function enhanceProps(props) {
    return __assign({ autoOpen: false, debug: false, disableFlip: false, disableHoverToClick: false, event: 'click', eventDelay: 0.4, hideArrow: false, offset: 15, placement: 'bottom', showCloseButton: false, styles: {}, target: null, wrapperOptions: {
            position: false,
        } }, props);
}
exports.enhanceProps = enhanceProps;
function getFallbackPlacements(placement) {
    if (placement.startsWith('left')) {
        return ['top', 'bottom'];
    }
    if (placement.startsWith('right')) {
        return ['bottom', 'top'];
    }
    return undefined;
}
exports.getFallbackPlacements = getFallbackPlacements;
function getModifiers(modifiers) {
    var defaultOptions = {
        flip: {
            name: 'flip',
            enabled: true,
            options: {
                padding: 20,
            },
        },
        preventOverflow: {
            name: 'preventOverflow',
            enabled: true,
            options: {
                padding: 10,
            },
        },
    };
    return (0, deepmerge_ts_1.deepmerge)(defaultOptions, modifiers || {});
}
exports.getModifiers = getModifiers;
function isFixed(el) {
    if (!el) {
        return false;
    }
    var nodeName = el.nodeName;
    if (nodeName === 'BODY' || nodeName === 'HTML') {
        return false;
    }
    if (getComputedStyle(el).position === 'fixed') {
        return true;
    }
    return el.parentNode instanceof HTMLElement ? isFixed(el.parentNode) : false;
}
exports.isFixed = isFixed;
function isMobile() {
    return 'ontouchstart' in window && /Mobi/.test(navigator.userAgent);
}
exports.isMobile = isMobile;
/**
 * Log method calls if debug is enabled
 */
function log(_a) {
    var data = _a.data, _b = _a.debug, debug = _b === void 0 ? false : _b, title = _a.title;
    /* eslint-disable no-console */
    var logFn = console.log;
    if (debug && title && data) {
        console.groupCollapsed("%creact-floater: ".concat(title), 'color: #9b00ff; font-weight: bold; font-size: 12px;');
        if (Array.isArray(data)) {
            data.forEach(function (d) {
                if (is_lite_1.default.plainObject(d) && d.key) {
                    logFn.apply(console, [d.key, d.value]);
                }
                else {
                    logFn.apply(console, [d]);
                }
            });
        }
        else {
            logFn.apply(console, [data]);
        }
        console.groupEnd();
    }
    /* eslint-enable */
}
exports.log = log;
function mergeModifier(modifier, customModifier) {
    return (0, deepmerge_ts_1.deepmerge)(modifier, customModifier || {});
}
exports.mergeModifier = mergeModifier;
function off(element, eventType, handler, options) {
    if (options === void 0) { options = false; }
    element.removeEventListener(eventType, handler, options);
}
exports.off = off;
function on(element, eventType, handler, options) {
    if (options === void 0) { options = false; }
    element.addEventListener(eventType, handler, options);
}
exports.on = on;
function once(element, eventType, handler, options) {
    if (options === void 0) { options = false; }
    var nextCB;
    // eslint-disable-next-line prefer-const
    nextCB = function (event) {
        handler(event);
        off(element, eventType, nextCB);
    };
    on(element, eventType, nextCB, options);
}
exports.once = once;
function randomId() {
    return "rf-".concat(Math.round(Math.random() * 1e5));
}
exports.randomId = randomId;
//# sourceMappingURL=helpers.js.map