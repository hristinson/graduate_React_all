import * as React from 'react';
import { createPortal } from 'react-dom';
import is from 'is-lite';
import { canUseDOM, portalId } from '../modules/helpers';
import { useMount, useSingleton, useUnmount } from '../modules/hooks';
function ReactFloaterPortal(props) {
    var children = props.children, hasChildren = props.hasChildren, placement = props.placement, portalElement = props.portalElement, target = props.target, zIndex = props.zIndex;
    var node = React.useRef(null);
    var initialize = React.useCallback(function () {
        if (!canUseDOM) {
            return;
        }
        if (portalElement) {
            node.current = is.string(portalElement)
                ? document.querySelector(portalElement)
                : portalElement;
        }
        if (!portalElement || !node.current) {
            var portal = document.getElementById('react-floater-portal');
            if (portal) {
                node.current = portal;
            }
            else {
                node.current = document.createElement('div');
                node.current.id = portalId;
                node.current.style.zIndex = "".concat(zIndex);
                document.body.appendChild(node.current);
            }
        }
    }, [portalElement, zIndex]);
    useSingleton(initialize);
    useMount(function () {
        if (!portalElement && !document.getElementById(portalId)) {
            if (node.current) {
                document.body.appendChild(node.current);
            }
            else {
                initialize();
            }
        }
    });
    useUnmount(function () {
        if (!canUseDOM || !node.current) {
            return;
        }
        try {
            if (node.current.id === portalId && node.current.childElementCount === 0) {
                if (document.body.contains(node.current)) {
                    document.body.removeChild(node.current);
                    node.current = null;
                }
            }
        }
        catch (_a) {
            node.current = null;
        }
    });
    if (node.current) {
        if (!hasChildren && !target && placement !== 'center') {
            return null;
        }
        return createPortal(children, node.current);
    }
    return null;
}
export default ReactFloaterPortal;
//# sourceMappingURL=Portal.js.map