var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx } from "react/jsx-runtime";
import * as React from 'react';
import is from 'is-lite';
import { STATUS } from '../literals';
function FloaterWrapper(props) {
    var childRef = props.childRef, children = props.children, id = props.id, isControlled = props.isControlled, onClick = props.onClick, onMouseEnter = props.onMouseEnter, onMouseLeave = props.onMouseLeave, status = props.status, style = props.style, styles = props.styles, wrapperRef = props.wrapperRef;
    var element;
    var mergedStyles = React.useMemo(function () {
        return __assign(__assign(__assign({}, styles), style), (React.isValidElement(children) ? children.props.style : undefined));
    }, [children, style, styles]);
    var wrapperProps = {
        'aria-describedby': [STATUS.OPENING, STATUS.OPEN, STATUS.CLOSING].includes(status)
            ? id
            : undefined,
        'data-id': id,
        style: mergedStyles,
    };
    if (!isControlled) {
        wrapperProps = __assign(__assign({}, wrapperProps), { onClick: onClick, onMouseEnter: onMouseEnter, onMouseLeave: onMouseLeave });
    }
    /* istanbul ignore else */
    if (children) {
        if (React.Children.count(children) === 1 &&
            React.isValidElement(children) &&
            children.type !== React.Fragment) {
            // eslint-disable-next-line unicorn/prefer-ternary
            if (is.function(children.type)) {
                element = (_jsx("span", __assign({ ref: wrapperRef }, { children: React.cloneElement(React.Children.only(children), __assign({ innerRef: childRef }, wrapperProps)) })));
            }
            else {
                element = React.cloneElement(React.Children.only(children), __assign({ ref: wrapperRef }, wrapperProps));
            }
        }
        else {
            element = (_jsx("span", __assign({ ref: wrapperRef }, wrapperProps, { children: children })));
        }
    }
    return element || null;
}
export default React.memo(FloaterWrapper);
//# sourceMappingURL=Wrapper.js.map