var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import * as React from 'react';
import Arrow from './Arrow';
import Container from './Container';
import { STATUS } from '../../literals';
function Floater(props) {
    var component = props.component, content = props.content, floaterRef = props.floaterRef, hideArrow = props.hideArrow, id = props.id, closeFn = props.onClick, placement = props.placement, status = props.status, styles = props.styles;
    var style = React.useMemo(function () {
        var length = styles.arrow.length, floater = styles.floater, floaterCentered = styles.floaterCentered, floaterClosing = styles.floaterClosing, floaterOpening = styles.floaterOpening, floaterWithComponent = styles.floaterWithComponent;
        var element = __assign({}, floater);
        if (!hideArrow) {
            if (placement.startsWith('top')) {
                element.padding = "0 0 ".concat(length, "px");
            }
            else if (placement.startsWith('bottom')) {
                element.padding = "".concat(length, "px 0 0");
            }
            else if (placement.startsWith('left')) {
                element.padding = "0 ".concat(length, "px 0 0");
            }
            else if (placement.startsWith('right')) {
                element.padding = "0 0 0 ".concat(length, "px");
            }
        }
        if (status === STATUS.CLOSING) {
            element = __assign(__assign({}, element), floaterClosing);
        }
        if (status === STATUS.OPENING || status === STATUS.OPEN) {
            element = __assign(__assign({}, element), floaterOpening);
        }
        if (placement === 'center') {
            element = __assign(__assign({}, element), floaterCentered);
        }
        if (component) {
            element = __assign(__assign({}, element), floaterWithComponent);
        }
        return element;
    }, [component, hideArrow, placement, status, styles]);
    var shouldRender = ['render', 'open', 'opening', 'closing'].includes(status);
    var output = {};
    var classes = ['__floater'];
    var baseProps = { id: id, role: 'tooltip' };
    if (component) {
        var componentProps = __assign({ closeFn: closeFn }, baseProps);
        output.content = React.isValidElement(component)
            ? React.cloneElement(component, componentProps)
            : component(componentProps);
    }
    else {
        output.content = _jsx(Container, __assign({}, props, { content: content }));
    }
    if (status === STATUS.OPEN) {
        classes.push('__floater__open');
    }
    if (!hideArrow) {
        output.arrow = _jsx(Arrow, __assign({}, props));
    }
    if (!shouldRender) {
        return null;
    }
    return (_jsx("div", __assign({ ref: floaterRef, style: { zIndex: styles.options.zIndex } }, { children: _jsx("div", __assign({ className: classes.join(' '), style: style }, baseProps, { children: _jsxs("div", __assign({ className: "__floater__body" }, { children: [output.content, output.arrow] })) })) })));
}
export default React.memo(Floater);
//# sourceMappingURL=index.js.map