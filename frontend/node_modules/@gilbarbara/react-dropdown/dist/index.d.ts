import { ChangeEvent, Component, KeyboardEvent, MouseEvent } from 'react';
import { Actions, Option, OptionKeys, Props, State, Styles } from '../dist/types';
export declare class Dropdown extends Component<Props, State> {
    private readonly dropdownRef;
    private readonly methods;
    static defaultProps: import("type-fest").Simplify<import("type-fest").Except<Omit<Props, "options">, "closeOnSelect" | "comparatorFn" | "direction" | "menuPosition" | "values"> & Required<Pick<Omit<Props, "options">, "closeOnSelect" | "comparatorFn" | "direction" | "menuPosition" | "values">>>;
    constructor(props: Props);
    componentDidMount(): void;
    componentDidUpdate(previousProps: Props, previousState: State): void;
    componentWillUnmount(): void;
    handleClickOutside: (event: Event) => void;
    handleKeyDown: (event: KeyboardEvent<HTMLInputElement>) => void;
    handleResize: (...arguments_: any[]) => void;
    handleScroll: (...arguments_: any[]) => void;
    setStatus: (action: Actions, event?: Event | MouseEvent<HTMLElement> | KeyboardEvent<HTMLDivElement>) => void;
    updateDropdownBounds: () => void;
    getInputSize: () => number;
    getLabels: () => import("../dist/types").Labels;
    getOptionData: (input: Option, key: OptionKeys) => string | number;
    getStyles: () => Styles;
    addItem: (item: Option) => void;
    removeItem: (event: MouseEvent<HTMLElement> | null, item: Option, close?: boolean) => void;
    setSearch: (event: ChangeEvent<HTMLInputElement>) => void;
    areAllSelected: () => boolean;
    clearAll: () => void;
    createItem: (search: string) => void;
    isSelected: (option: Option) => boolean;
    selectAll: (valuesList?: Option[]) => void;
    toggleAll: () => void;
    safeString: (input: string) => string;
    searchFn: () => Option[];
    searchResults: () => Option[];
    render(): JSX.Element;
}
export default Dropdown;
export * from '../dist/types';
