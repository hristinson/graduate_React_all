export declare type AnyObject<T = any> = Record<string, T>;
export declare type PlainObject<T extends AnyObject> = Exclude<T, Array<unknown> | Function | Map<unknown, unknown> | Set<unknown>>;
export declare type GenericFunction<T = void> = (...arguments_: any[]) => T;
export declare type VoidFunction = () => void;
export declare type HttpMethods = 'CONNECT' | 'DELETE' | 'GET' | 'HEAD' | 'OPTIONS' | 'PATCH' | 'POST' | 'PUT';
/**
 * Primitive types
 */
export declare type Primitive = bigint | boolean | null | number | string | symbol | undefined;
/**
 * A union of all possible strings returned by the typeof operator.
 */
export declare type TypeName = 'bigint' | 'boolean' | 'function' | 'number' | 'object' | 'string' | 'symbol' | 'undefined';
