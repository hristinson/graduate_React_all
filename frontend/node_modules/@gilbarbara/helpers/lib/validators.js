"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validatePassword = exports.isValidEmail = exports.isValidCPF = void 0;
function isValidCPF(value) {
    if (!value) {
        return false;
    }
    var newValue = value.replace(/[.-]/g, '');
    var sum = 0;
    var rest;
    if (/^(\d)\1+$/.test(newValue)) {
        return false;
    }
    for (var index = 1; index <= 9; index++) {
        sum += parseInt(newValue.substring(index - 1, index), 10) * (11 - index);
    }
    rest = (sum * 10) % 11;
    if (rest === 10 || rest === 11) {
        rest = 0;
    }
    if (rest !== parseInt(newValue.substring(9, 10), 10)) {
        return false;
    }
    sum = 0;
    for (var index = 1; index <= 10; index++) {
        sum += parseInt(newValue.substring(index - 1, index), 10) * (12 - index);
    }
    rest = (sum * 10) % 11;
    if (rest === 10 || rest === 11) {
        rest = 0;
    }
    return rest === parseInt(newValue.substring(10, 11), 10);
}
exports.isValidCPF = isValidCPF;
/**
 * Check if email is valid
 */
function isValidEmail(value) {
    return /^[\w%+.-]+@[\d.a-z-]+\.[a-z]{2,}$/i.test(value);
}
exports.isValidEmail = isValidEmail;
/**
 * Validate password length and required characters
 * @throws
 */
function validatePassword(password, options) {
    var _a = options || {}, _b = _a.maxLength, maxLength = _b === void 0 ? 64 : _b, _c = _a.maxLengthMessage, maxLengthMessage = _c === void 0 ? 'Password must be a maximum of 64 characters' : _c, _d = _a.minLength, minLength = _d === void 0 ? 6 : _d, _e = _a.minLengthMessage, minLengthMessage = _e === void 0 ? 'Password must be at least 6 characters long' : _e, _f = _a.regex, regex = _f === void 0 ? /^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[!#$%&*?@^]).*$/ : _f, _g = _a.requiredCharactersMessage, requiredCharactersMessage = _g === void 0 ? 'Password must have at least 1 number, 1 lowercase, 1 uppercase and 1 special character' : _g;
    if (password.length < minLength) {
        throw new Error(minLengthMessage);
    }
    if (password.length > maxLength) {
        throw new Error(maxLengthMessage);
    }
    if (!regex.test(password)) {
        throw new Error(requiredCharactersMessage);
    }
    return true;
}
exports.validatePassword = validatePassword;
//# sourceMappingURL=validators.js.map