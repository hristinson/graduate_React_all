"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatPostalCodeBR = exports.formatPhoneBR = exports.formatMoney = exports.formatDateLocale = exports.formatCPF = exports.formatBoolean = void 0;
var strings_1 = require("./strings");
/**
 * Format boolean into a Yes/No string
 */
function formatBoolean(input) {
    return input ? 'Yes' : 'No';
}
exports.formatBoolean = formatBoolean;
/**
 * Format string into a CPF
 */
function formatCPF(value) {
    var clearValue = (0, strings_1.cleanupNumericString)(value);
    if (clearValue.length >= 10) {
        return "".concat(clearValue.slice(0, 3), ".").concat(clearValue.slice(3, 6), ".").concat(clearValue.slice(6, 9), "-").concat(clearValue.slice(9, 11));
    }
    else if (clearValue.length >= 7) {
        return "".concat(clearValue.slice(0, 3), ".").concat(clearValue.slice(3, 6), ".").concat(clearValue.slice(6, 9));
    }
    else if (clearValue.length >= 4) {
        return "".concat(clearValue.slice(0, 3), ".").concat(clearValue.slice(3, 6));
    }
    return clearValue;
}
exports.formatCPF = formatCPF;
/**
 * Format date ISO string using locale
 */
function formatDateLocale(input, options) {
    if (options === void 0) { options = {}; }
    var _a = options.locale, locale = _a === void 0 ? 'en-GB' : _a, _b = options.showTime, showTime = _b === void 0 ? false : _b;
    var formatOptions = {
        year: '2-digit',
        month: '2-digit',
        day: '2-digit',
    };
    if (showTime) {
        formatOptions.hour = '2-digit';
        formatOptions.minute = '2-digit';
    }
    return new Date(input).toLocaleDateString(locale, formatOptions);
}
exports.formatDateLocale = formatDateLocale;
/**
 * Format number into money string
 */
function formatMoney(input, options) {
    if (options === void 0) { options = {}; }
    var _a = options.decimalChar, decimalChar = _a === void 0 ? '.' : _a, _b = options.showCents, showCents = _b === void 0 ? false : _b, _c = options.symbol, symbol = _c === void 0 ? '$' : _c, _d = options.thousandsChar, thousandsChar = _d === void 0 ? ',' : _d;
    var isNegative = input < 0;
    var value = Math.abs(input);
    var _e = __read(value.toFixed(2).split('.'), 2), amount = _e[0], cents = _e[1];
    var padStart = amount.length > 3 ? amount.length % 3 : 0;
    var initial = amount.slice(0, padStart);
    var remain = amount.slice(padStart).replace(/(\d{3})(?=\d)/g, "$1".concat(thousandsChar));
    var formatted = "".concat(initial ? "".concat(initial).concat(thousandsChar) : '').concat(remain);
    if (cents !== '00' || showCents) {
        formatted += "".concat(decimalChar).concat(cents);
    }
    return "".concat(isNegative ? '-' : '').concat(symbol).concat(formatted);
}
exports.formatMoney = formatMoney;
/**
 * Format string into a brazilian phone
 */
function formatPhoneBR(input) {
    var phone = input.replace(/\D/g, '');
    if (phone.length === 8) {
        return phone.replace(/^(\d{4})(\d{4}).*/, '$1-$2');
    }
    if (phone.length === 9) {
        return phone.replace(/^(\d{5})(\d{4}).*/, '$1-$2');
    }
    if (phone.length === 10 || phone.length === 11) {
        return phone.replace(/^(\d{2})(\d{4,5})(\d{4}).*/, '($1) $2-$3');
    }
    return phone;
}
exports.formatPhoneBR = formatPhoneBR;
/**
 * Format string into a zip code
 */
function formatPostalCodeBR(value) {
    var clearValue = (0, strings_1.cleanupNumericString)(value);
    if (clearValue.length >= 6) {
        return "".concat(clearValue.slice(0, 5), "-").concat(clearValue.slice(5, 8));
    }
    return clearValue;
}
exports.formatPostalCodeBR = formatPostalCodeBR;
//# sourceMappingURL=formatters.js.map