"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Alert = exports.StyledAlert = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("@emotion/react");
const styled_1 = require("@emotion/styled");
const Icon_1 = require("./Icon");
const helpers_1 = require("./modules/helpers");
const system_1 = require("./modules/system");
const Text_1 = require("./Text");
function getOptions(type, colors, darkMode) {
    const options = {
        success: {
            color: colors.green,
            icon: 'check-o',
        },
        warning: {
            color: darkMode ? colors.orange : colors.yellow,
            icon: 'danger',
        },
        error: {
            color: colors.red,
            icon: 'close-o',
        },
        info: {
            color: colors.blue,
            icon: 'info',
        },
        neutral: {
            color: darkMode ? '#000' : '#fff',
            icon: 'data',
        },
    };
    return options[type];
}
exports.StyledAlert = (0, styled_1.default)('div', (0, system_1.getStyledOptions)('type'))(props => {
    const { invert } = props;
    const { grayDark, lightColor, spacing, white } = (0, helpers_1.getTheme)(props);
    let backgroundColor = (0, system_1.isDarkMode)(props) ? lightColor : grayDark;
    let color = (0, system_1.isDarkMode)(props) ? grayDark : white;
    if (invert) {
        backgroundColor = (0, system_1.isDarkMode)(props) ? grayDark : lightColor;
        color = (0, system_1.isDarkMode)(props) ? white : grayDark;
    }
    return (0, react_2.css) `
    ${(0, system_1.baseStyles)(props)};
    align-items: center;
    background-color: ${backgroundColor};
    color: ${color};
    display: flex;
    overflow: hidden;
    position: relative;
    max-width: 380px;
    width: 100%;
    ${(0, system_1.borderStyles)(props)};
    ${(0, system_1.marginStyles)(props)};
    ${(0, system_1.paddingStyles)(props)};
    ${(0, system_1.radiusStyles)(props)};

    [data-component-name='Text'] {
      margin-left: ${spacing.xs};
    }
  `;
});
exports.Alert = (0, react_1.forwardRef)((props, ref) => {
    const { children, icon, invert, type } = props;
    const { colors, darkMode } = (0, helpers_1.getTheme)({ theme: (0, react_2.useTheme)() });
    const selected = getOptions(type, colors, !!darkMode || !!invert);
    return ((0, jsx_runtime_1.jsxs)(exports.StyledAlert, { ref: ref, "data-component-name": "Alert", ...props, children: [(0, jsx_runtime_1.jsx)(Icon_1.Icon, { color: selected.color, name: icon || selected.icon, size: 20 }), (0, jsx_runtime_1.jsx)(Text_1.Text, { size: "mid", children: children })] }));
});
exports.Alert.defaultProps = {
    invert: false,
    padding: 'md',
    radius: 'xs',
    type: 'success',
};
//# sourceMappingURL=Alert.js.map