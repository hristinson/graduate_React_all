"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Button = exports.StyledButton = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("@emotion/react");
const styled_1 = require("@emotion/styled");
const Icon_1 = require("./Icon");
const helpers_1 = require("./modules/helpers");
const system_1 = require("./modules/system");
exports.StyledButton = (0, styled_1.default)('button', (0, system_1.getStyledOptions)())(props => {
    const { block, busy, shade, shape, size = 'md', variant = 'primary', wide } = props;
    const { button, grayLighter, grayMid, radius, spacing, variants } = (0, helpers_1.getTheme)(props);
    const { borderRadius, fontSize, fontWeight, height, lineHeight, padding } = button;
    let buttonPadding = `${padding[size][0]} ${wide ? (0, helpers_1.px)(parseInt(padding[size][1], 10) * 2) : padding[size][1]}`;
    let selectedRadius = borderRadius[size];
    if (shape) {
        buttonPadding = spacing.xxs;
        switch (shape) {
            case 'square': {
                selectedRadius = `0`;
                break;
            }
            case 'circle': {
                selectedRadius = radius.round;
                break;
            }
        }
    }
    return (0, react_2.css) `
    ${system_1.appearanceStyles};
    ${(0, system_1.baseStyles)(props)};
    align-items: center;
    border-radius: ${selectedRadius};
    box-shadow: none;
    cursor: pointer;
    display: inline-flex;
    font-size: ${fontSize[size]};
    font-weight: ${fontWeight};
    min-height: ${height[size]};
    min-width: ${height[size]};
    justify-content: center;
    line-height: ${lineHeight[size]};
    overflow: hidden;
    padding: ${buttonPadding};
    position: relative;
    transition: background-color 0.6s, border-color 0.6s;
    width: ${block ? '100%' : 'auto'};
    ${(0, system_1.backgroundStyles)(props)};
    ${(0, system_1.paddingStyles)(props)}

    &:disabled {
      background-color: ${grayLighter};
      border-color: ${grayLighter};
      color: ${grayMid};
      pointer-events: none;
    }

    &:focus {
      outline-color: ${(0, helpers_1.getColorVariant)(variant, shade, variants).bg};
    }

    ${!!busy &&
        (0, react_2.css) `
      pointer-events: none;
    `};
  `;
});
exports.Button = (0, react_1.forwardRef)((props, ref) => {
    const { busy, children, shape, size = 'md' } = props;
    const { button: { fontSize }, } = (0, helpers_1.getTheme)(props);
    const content = {
        children,
        icon: !!busy && (0, jsx_runtime_1.jsx)(Icon_1.Icon, { ml: "sm", name: "spinner", size: parseInt(fontSize[size], 10) + 4, spin: true }),
    };
    if (shape && busy) {
        content.children = (0, jsx_runtime_1.jsx)(Icon_1.Icon, { name: "spinner", size: parseInt(fontSize[size], 10) + 4, spin: true });
        content.icon = '';
    }
    return ((0, jsx_runtime_1.jsxs)(exports.StyledButton, { ref: ref, "data-component-name": "Button", ...props, children: [content.children, content.icon] }));
});
exports.Button.defaultProps = {
    block: false,
    busy: false,
    disabled: false,
    invert: false,
    shade: 'mid',
    size: 'md',
    transparent: false,
    type: 'button',
    variant: 'primary',
    wide: false,
};
//# sourceMappingURL=Button.js.map