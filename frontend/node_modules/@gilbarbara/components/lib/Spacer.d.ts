/// <reference types="react" />
import { ComponentProps, Direction, Spacing, StyledProps, WithBorder, WithChildren, WithFlexItem, WithLayout, WithMargin, WithPadding, WithRadius, WithShadow } from './types';
export interface SpacerKnownProps extends StyledProps, WithBorder, WithChildren, WithFlexItem, WithLayout, WithMargin, WithPadding, WithRadius, WithShadow {
    /**
     * The spacer direction.
     * @default horizontal
     */
    direction?: Direction;
    /**
     * Distribution of the children in the spacer.
     * @default start
     */
    distribution?: 'start' | 'center' | 'end' | 'space-between' | 'space-around' | 'space-evenly';
    /**
     * The horizontal gap between the children.
     * @default sm
     */
    gap?: Spacing;
    /** The vertical gap between the children. */
    gapVertical?: Spacing;
    /**
     * Expand child width (Vertical only)
     * @default false
     */
    grow?: boolean;
    /**
     * The vertical alignment of the children.
     * @default center
     * */
    verticalAlign?: 'center' | 'end' | 'start' | 'stretch';
    /**
     * Wrap the children if they don't fit in the container.
     * @default true
     * */
    wrap?: boolean;
}
export declare type SpacerProps = ComponentProps<HTMLDivElement, SpacerKnownProps>;
export declare const StyledSpacer: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
} & SpacerKnownProps & Omit<import("react").HTMLProps<HTMLDivElement>, "size" | "ref" | keyof SpacerKnownProps>, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
/**
 * You can use a "data-flex" property on the children to grow or shrink to fit the space available.
 */
export declare const Spacer: import("react").ForwardRefExoticComponent<SpacerKnownProps & Omit<import("react").HTMLProps<HTMLDivElement>, "size" | "ref" | keyof SpacerKnownProps> & import("react").RefAttributes<HTMLDivElement>>;
