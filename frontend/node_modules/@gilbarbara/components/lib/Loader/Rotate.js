"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("@emotion/react");
const styled_1 = require("@emotion/styled");
const animations_1 = require("../modules/animations");
const helpers_1 = require("../modules/helpers");
const system_1 = require("../modules/system");
const dash = (0, react_1.keyframes) `
  0% {
    stroke-dasharray: 1, 200;
    stroke-dashoffset: 0;
  }

  50% {
    stroke-dasharray: 89, 200;
    stroke-dashoffset: -35px;
  }

  100% {
    stroke-dasharray: 89, 200;
    stroke-dashoffset: -124px;
  }
`;
const StyledLoaderRotate = (0, styled_1.default)('div', (0, system_1.getStyledOptions)())(props => {
    const { block } = props;
    const { spacing } = (0, helpers_1.getTheme)(props);
    return (0, react_1.css) `
    display: ${block ? 'flex' : 'inline-flex'};
    margin: ${block ? spacing.lg : 0} auto;
    text-align: center;
  `;
});
const StyledLoaderRotateSVG = (0, styled_1.default)('svg', (0, system_1.getStyledOptions)())(props => {
    const { size } = props;
    return (0, react_1.css) `
    animation: ${animations_1.rotate} 2s linear infinite;
    height: ${(0, helpers_1.px)(size)};
    margin: auto;
    transform-origin: center center;
    width: ${(0, helpers_1.px)(size)};
  `;
});
const StyledLoaderRotateCircle = (0, styled_1.default)('circle', (0, system_1.getStyledOptions)()) `
  animation: ${dash} 1.5s infinite ease-in-out;
  stroke: ${props => props.color};
  stroke-dasharray: 1, 200;
  stroke-dashoffset: 0;
  stroke-linecap: round;
`;
function LoaderRotate(props) {
    const { color, shade, size = 32, variant } = props;
    const { darkColor, lightColor, variants } = (0, helpers_1.getTheme)(props);
    const darkMode = (0, system_1.isDarkMode)(props);
    let variantColor = darkMode ? lightColor : darkColor;
    if (variant) {
        variantColor = (0, helpers_1.getColorVariant)(variant, shade, variants).bg;
    }
    return ((0, jsx_runtime_1.jsx)(StyledLoaderRotate, { "data-component-name": "LoaderRotate", ...props, children: (0, jsx_runtime_1.jsx)(StyledLoaderRotateSVG, { size: size, viewBox: "25 25 50 50", children: (0, jsx_runtime_1.jsx)(StyledLoaderRotateCircle, { color: color || variantColor, cx: "50", cy: "50", fill: "none", r: "20", strokeWidth: 2 }) }) }));
}
exports.default = LoaderRotate;
//# sourceMappingURL=Rotate.js.map