"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StyledSearchItem = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("@emotion/react");
const styled_1 = require("@emotion/styled");
const helpers_1 = require("../modules/helpers");
const system_1 = require("../modules/system");
exports.StyledSearchItem = (0, styled_1.default)('div', (0, system_1.getStyledOptions)())(props => {
    const { isSelected } = props;
    const { darkMode, grayDark, spacing, typography, variants, white } = (0, helpers_1.getTheme)(props);
    const selected = (0, react_1.css) `
    background-color: ${variants.primary.mid.bg};
    color: ${variants.primary.mid.color};

    a {
      color: ${variants.primary.mid.color};
    }
  `;
    return (0, react_1.css) `
    color: ${darkMode ? white : grayDark};
    cursor: pointer;
    font-size: ${typography.regular.fontSize};
    padding: ${spacing.sm} ${spacing.md};
    transition: background-color 0.3s;

    &:hover,
    &:active {
      ${selected};
    }

    ${isSelected && selected},

    a {
      color: ${grayDark};
      text-decoration: none;
    }

    > * {
      white-space: nowrap;
    }
  `;
});
function SearchItem({ children, isSelected, onClick, value }) {
    return ((0, jsx_runtime_1.jsx)(exports.StyledSearchItem, { "data-component-name": "SearchItem", "data-value": value, isSelected: isSelected, onClick: onClick, role: "listitem", children: children }));
}
exports.default = SearchItem;
//# sourceMappingURL=Item.js.map