"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("@emotion/react");
const styled_1 = require("@emotion/styled");
const Item_1 = require("./Item");
const helpers_1 = require("../modules/helpers");
const system_1 = require("../modules/system");
const StyledSearchItems = (0, styled_1.default)('div', (0, system_1.getStyledOptions)())(props => {
    const { active, height } = props;
    const { grayDarker, radius, shadow, spacing, white } = (0, helpers_1.getTheme)(props);
    const darkMode = (0, system_1.isDarkMode)(props);
    return (0, react_2.css) `
    background-color: ${darkMode ? grayDarker : white};
    border-radius: ${radius.xxs};
    box-shadow: ${shadow.mid};
    left: 0;
    max-height: ${(0, helpers_1.px)(height)};
    margin-top: ${spacing.xs};
    overflow-y: auto;
    position: absolute;
    right: 0;
    top: 100%;
    transform-origin: top;
    transform: scaleY(0);
    transition: transform 0.3s;

    ${active &&
        (0, react_2.css) `
      transform: scaleY(1);
    `}
  `;
});
function getSharedStyles(spacing) {
    return (0, react_2.css) `
    align-items: center;
    display: flex;
    padding: ${spacing.xs} ${spacing.sm};
    width: 100%;
  `;
}
const Empty = (0, styled_1.default)('div', (0, system_1.getStyledOptions)())(props => {
    const { spacing } = (0, helpers_1.getTheme)(props);
    return (0, react_2.css) `
    ${getSharedStyles(spacing)};
    justify-content: center;
  `;
});
const SearchItems = (0, react_1.forwardRef)((props, ref) => {
    const { active, cursor, height, items, noResultsLabel, onSelect } = props;
    const isActive = (0, react_1.useRef)(false);
    (0, react_1.useEffect)(() => {
        isActive.current = true;
        return () => {
            isActive.current = false;
        };
    }, []);
    const content = {};
    content.items = !items.length ? ((0, jsx_runtime_1.jsx)(Empty, { children: noResultsLabel })) : (items.map((data, index) => ((0, jsx_runtime_1.jsx)(Item_1.default, { isSelected: cursor === index, onClick: onSelect, value: data.value, children: data.label || data.value }, data.value))));
    return ((0, jsx_runtime_1.jsx)(StyledSearchItems, { ref: ref, active: active, "data-component-name": "SearchItems", height: height, role: "list", tabIndex: 0, children: content.items }));
});
exports.default = SearchItems;
//# sourceMappingURL=Items.js.map