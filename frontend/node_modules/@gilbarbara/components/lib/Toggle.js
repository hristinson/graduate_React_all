"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Toggle = exports.StyledToggle = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_merge_refs_1 = require("react-merge-refs");
const react_use_1 = require("react-use");
const react_2 = require("@emotion/react");
const styled_1 = require("@emotion/styled");
const is_lite_1 = require("is-lite");
const Label_1 = require("./Label");
const helpers_1 = require("./modules/helpers");
const system_1 = require("./modules/system");
const styles = {
    borderRadius: '12px',
    height: '24px',
    space: '2px',
    width: '48px',
};
const StyledInput = (0, styled_1.default)('input') `
  bottom: 0;
  left: 0;
  opacity: 0.0001;
  position: absolute;
  right: 0;
  top: 0;
`;
const StyledTrack = (0, styled_1.default)('span', (0, system_1.getStyledOptions)())(props => {
    const { isActive, shade, variant = 'primary' } = props;
    const { grayDark, grayLighter, radius, variants } = (0, helpers_1.getTheme)(props);
    const { bg } = (0, helpers_1.getColorVariant)(variant, shade, variants);
    let backgroundColor = (0, system_1.isDarkMode)(props) ? grayDark : grayLighter;
    if (isActive) {
        backgroundColor = bg;
    }
    return (0, react_2.css) `
    background-color: ${backgroundColor};
    border-radius: ${radius.sm};
    bottom: 0;
    left: 0;
    position: absolute;
    transition: background-color 0.4s;
    right: 0;
    top: 0;
  `;
});
const StyledButton = (0, styled_1.default)('span', (0, system_1.getStyledOptions)())(props => {
    const { disabled, isActive, variant } = props;
    const { grayMid, variants, white } = (0, helpers_1.getTheme)(props);
    let backgroundColor = (0, system_1.isDarkMode)(props) ? grayMid : white;
    if (isActive) {
        backgroundColor = variant === 'yellow' ? variants.yellow.darker.bg : white;
    }
    return (0, react_2.css) `
    background-color: ${backgroundColor};
    border-radius: 50%;
    bottom: ${styles.space};
    left: ${isActive ? '26px' : styles.space};
    opacity: ${disabled ? 0.7 : 1};
    position: absolute;
    top: ${styles.space};
    transition: background-color 0.4s, left 0.2s ease;
    width: 20px;
  `;
});
exports.StyledToggle = (0, styled_1.default)('div')(props => {
    const { disabled, label } = props;
    const { colors } = (0, helpers_1.getTheme)(props);
    return (0, react_2.css) `
    ${(0, system_1.baseStyles)(props)};
    cursor: ${disabled ? 'default' : 'pointer'};
    height: ${styles.height};
    margin-right: ${label ? '8px' : 0};
    opacity: ${disabled ? 0.8 : 1};
    position: relative;
    user-select: none;
    vertical-align: middle;
    width: ${styles.width};

    &:focus {
      filter: drop-shadow(0 0 4px ${colors.primary});
      outline: none;
    }
  `;
});
exports.Toggle = (0, react_1.forwardRef)((props, ref) => {
    const { checked, defaultChecked = false, disabled, label, name, onChange, onClick, shade, variant, ...rest } = props;
    const inputRef = (0, react_1.useRef)(null);
    const [isActive, setActive] = (0, react_1.useState)(is_lite_1.default.boolean(checked) ? checked : defaultChecked);
    const previousChecked = (0, react_use_1.usePrevious)(checked);
    (0, react_use_1.useUpdateEffect)(() => {
        if (is_lite_1.default.boolean(checked) && previousChecked !== checked) {
            setActive(checked);
        }
    }, [checked, previousChecked]);
    const handleChange = (event) => {
        const { target } = event;
        setActive(target.checked);
        /* istanbul ignore else */
        if (onChange) {
            onChange(target.checked);
        }
    };
    const handleClick = () => {
        if (onClick && !disabled) {
            onClick(inputRef.current?.checked || false);
        }
    };
    const handleKeyDown = (event) => {
        if (disabled || !inputRef.current || ![' ', 'Enter'].includes(event.key)) {
            return;
        }
        const status = !isActive;
        inputRef.current.checked = status;
        setActive(status);
    };
    const value = isActive ? 'on' : 'off';
    const checkStatus = {};
    if (is_lite_1.default.boolean(checked)) {
        checkStatus.checked = checked;
    }
    else {
        checkStatus.defaultChecked = defaultChecked;
    }
    return ((0, jsx_runtime_1.jsxs)(Label_1.Label, { "data-component-name": "Toggle", inline: true, style: { cursor: disabled ? 'default' : 'pointer' }, children: [(0, jsx_runtime_1.jsx)(StyledInput, { ref: (0, react_merge_refs_1.default)([inputRef, ref]), "aria-checked": isActive, "aria-label": !label ? name : undefined, disabled: disabled || is_lite_1.default.boolean(checked), name: name, onChange: handleChange, role: "switch", type: "checkbox", value: value, ...checkStatus }), (0, jsx_runtime_1.jsxs)(exports.StyledToggle, { disabled: disabled, label: label, name: name, onClick: handleClick, onKeyDown: handleKeyDown, tabIndex: 0, ...rest, children: [(0, jsx_runtime_1.jsx)(StyledTrack, { isActive: isActive, shade: shade, variant: variant }), (0, jsx_runtime_1.jsx)(StyledButton, { disabled: disabled, isActive: isActive, shade: shade, variant: variant })] }), label] }));
});
exports.Toggle.defaultProps = {
    defaultChecked: false,
    disabled: false,
    shade: 'mid',
    variant: 'primary',
};
//# sourceMappingURL=Toggle.js.map