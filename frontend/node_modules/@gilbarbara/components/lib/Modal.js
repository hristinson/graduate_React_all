"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Modal = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("@emotion/react");
const styled_1 = require("@emotion/styled");
const Box_1 = require("./Box");
const ButtonBase_1 = require("./ButtonBase");
const Headings_1 = require("./Headings");
const Icon_1 = require("./Icon");
const helpers_1 = require("./modules/helpers");
const system_1 = require("./modules/system");
const Portal_1 = require("./Portal");
const StyledModal = (0, styled_1.default)('div', (0, system_1.getStyledOptions)())(props => {
    const { maxWidth, width } = props;
    const { black, darkColor, white } = (0, helpers_1.getTheme)(props);
    const darkMode = (0, system_1.isDarkMode)(props);
    return (0, react_2.css) `
    background-color: ${darkMode ? darkColor : white};
    color: ${darkMode ? white : black};
    max-width: ${(0, helpers_1.px)(maxWidth)};
    width: ${width ? (0, helpers_1.px)(width) : 'auto'};
    ${(0, system_1.borderStyles)(props)};
    ${(0, system_1.paddingStyles)(props)};
    ${(0, system_1.radiusStyles)(props)};
    ${(0, system_1.shadowStyles)(props)};
  `;
});
const StyledModalContent = (0, styled_1.default)('div', (0, system_1.getStyledOptions)())(props => {
    const { maxHeight, padding } = props;
    const { spacing } = (0, helpers_1.getTheme)(props);
    return (0, react_2.css) `
    margin: 0 -${padding ? spacing[padding] : padding};
    padding: 0 ${padding ? spacing[padding] : padding};
    max-height: ${(0, helpers_1.px)(maxHeight)};
    overflow-y: auto;
  `;
});
function Modal(props) {
    const { children, closeOnClickOverlay, closeOnEsc, hideCloseButton, hideOverlay, isActive, maxHeight = '80vh', onClose, onOpen, style, title, zIndex, ...rest } = props;
    const { padding = 'lg' } = rest;
    const { black, darkMode, white } = (0, helpers_1.getTheme)({ theme: (0, react_2.useTheme)() });
    const handlePortalClose = (0, react_1.useCallback)(() => {
        if (onClose) {
            onClose();
        }
    }, [onClose]);
    let header;
    if (!hideCloseButton || title) {
        header = ((0, jsx_runtime_1.jsxs)(Box_1.Box, { align: "center", display: "flex", justify: title ? 'space-between' : 'flex-end', mb: "md", children: [title && (0, jsx_runtime_1.jsx)(Headings_1.H3, { style: { marginBottom: 0 }, children: title }), !hideCloseButton && ((0, jsx_runtime_1.jsx)(ButtonBase_1.ButtonBase, { onClick: onClose, children: (0, jsx_runtime_1.jsx)(Icon_1.Icon, { color: darkMode ? white : black, name: "close", size: 26 }) }))] }));
    }
    return ((0, jsx_runtime_1.jsx)(Portal_1.Portal, { closeOnClickOverlay: closeOnClickOverlay, closeOnEsc: closeOnEsc, hideOverlay: hideOverlay, isActive: isActive, onClose: handlePortalClose, onOpen: onOpen, zIndex: zIndex, children: (0, jsx_runtime_1.jsxs)(StyledModal, { "data-component-name": "Modal", ...rest, style: style, children: [header, (0, jsx_runtime_1.jsx)(StyledModalContent, { maxHeight: maxHeight, padding: padding, children: children })] }) }));
}
exports.Modal = Modal;
Modal.defaultProps = {
    closeOnClickOverlay: true,
    closeOnEsc: true,
    hideCloseButton: false,
    hideOverlay: false,
    maxHeight: '80vh',
    maxWidth: '100vw',
    padding: 'lg',
    radius: 'lg',
    shadow: 'high',
    zIndex: 1000,
};
//# sourceMappingURL=Modal.js.map