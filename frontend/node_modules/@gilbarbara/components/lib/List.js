"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.List = exports.StyledListItem = exports.StyledList = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("@emotion/react");
const styled_1 = require("@emotion/styled");
const is_lite_1 = require("is-lite");
const helpers_1 = require("./modules/helpers");
const system_1 = require("./modules/system");
function getSpacing(size, spacing) {
    switch (size) {
        case 'sm': {
            return [spacing.xs, spacing.sm];
        }
        case 'lg': {
            return [spacing.md, spacing.lg];
        }
        default: {
            return [spacing.sm, spacing.md];
        }
    }
}
exports.StyledList = (0, styled_1.default)('ul', (0, system_1.getStyledOptions)())(props => {
    const { border, direction, shade, variant } = props;
    const borderProps = { ...props };
    if (border === true && (shade !== 'lighter' || variant !== 'gray')) {
        borderProps.border = [{ side: 'all', shade, variant }];
    }
    return (0, react_2.css) `
    ${(0, system_1.baseStyles)(props)};
    display: flex;
    flex-direction: ${direction === 'horizontal' ? 'row' : 'column'};
    list-style-position: inside;
    list-style-type: none;
    margin: 0;
    overflow: hidden;
    padding: 0;
    ${(0, system_1.borderStyles)(borderProps)};
    ${(0, system_1.flexItemStyles)(props)};
    ${(0, system_1.layoutStyles)(props)};
    ${(0, system_1.marginStyles)(props)};
    ${(0, system_1.radiusStyles)(props)};
    ${(0, system_1.shadowStyles)(props)};
  `;
});
exports.StyledListItem = (0, styled_1.default)('li', (0, system_1.getStyledOptions)())(props => {
    const { black, spacing, variants, white } = (0, helpers_1.getTheme)(props);
    const { border, direction, itemShade, itemVariant, shade = 'lighter', size, split, variant = 'gray', } = props;
    const [spacerMain, spacerCross] = getSpacing(size, spacing);
    let bgColor = white;
    let itemColor = black;
    let { bg: borderColor } = (0, helpers_1.getColorVariant)(variant, shade, variants);
    if (itemVariant) {
        const { bg, color } = (0, helpers_1.getColorVariant)(itemVariant, itemShade, variants);
        bgColor = bg;
        borderColor = bg;
        itemColor = color;
    }
    return (0, react_2.css) `
    background-color: ${bgColor};
    color: ${itemColor};

    ${direction === 'vertical' &&
        (0, react_2.css) `
      border-bottom: ${split ? `1px solid ${borderColor}` : undefined};
      padding: ${spacerMain} ${border ? spacerCross : 0};

      &:last-of-type {
        border-bottom: none;
      }
    `};

    ${direction === 'horizontal' &&
        (0, react_2.css) `
      border-right: ${split ? `1px solid ${borderColor}` : undefined};
      padding: ${border ? spacerMain : 0} ${spacerCross};

      &:last-of-type {
        border-right: none;
      }
    `};
  `;
});
function isListItem(item) {
    return is_lite_1.default.plainObject(item) && 'content' in item;
}
exports.List = (0, react_1.forwardRef)((props, ref) => {
    const { border = true, direction = 'vertical', items, shade = 'lighter', size = 'md', split = true, variant = 'gray', } = props;
    if (!items.length) {
        return null;
    }
    return ((0, jsx_runtime_1.jsx)(exports.StyledList, { ref: ref, "data-component-name": "List", ...props, children: items.map((item, index) => {
            const key = `ListItem-${index}`;
            let content;
            let itemShade;
            let itemVariant;
            if (isListItem(item)) {
                content = item.content;
                itemShade = item.shade;
                itemVariant = item.variant;
            }
            else {
                content = item;
            }
            return ((0, jsx_runtime_1.jsx)(exports.StyledListItem, { border: border, direction: direction, itemShade: itemShade, itemVariant: itemVariant, shade: shade, size: size, split: split, variant: variant, children: content }, key));
        }) }));
});
exports.List.defaultProps = {
    border: true,
    direction: 'vertical',
    radius: 'xs',
    shade: 'lighter',
    shadow: false,
    size: 'md',
    split: true,
    variant: 'gray',
};
//# sourceMappingURL=List.js.map