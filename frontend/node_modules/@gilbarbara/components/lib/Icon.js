"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Icon = exports.StyledIcon = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_inlinesvg_1 = require("react-inlinesvg");
const react_innertext_1 = require("react-innertext");
const react_2 = require("@emotion/react");
const styled_1 = require("@emotion/styled");
const is_lite_1 = require("is-lite");
const animations_1 = require("./modules/animations");
const helpers_1 = require("./modules/helpers");
const options_1 = require("./modules/options");
const system_1 = require("./modules/system");
const loadBar = (0, react_2.keyframes) `
  0%, 100% { transform: translateX(0); width: 4px; }
  25%, 75% { transform: translateX(0); width: 24px; }
  50% { transform: translateX(20px); width: 4px }
`;
const loadBarDocument = (0, react_2.keyframes) `
  0%, 10% { transform: translateX(-100%) }
  50%, 60% { transform: translateX(0) }
`;
const loadBarSound = (0, react_2.keyframes) `
  10% {transform: scaleY(0.2) }
  30% {transform: scaleY(0.8) }
  60% {transform: scaleY(0.7) }
  80% {transform: scaleY(0.2) }
  100% {transform: scaleY(1) }
`;
exports.StyledIcon = (0, styled_1.default)('span', (0, system_1.getStyledOptions)())(props => {
    const { color, name = '', shade, size, spin, variant } = props;
    const { variants } = (0, helpers_1.getTheme)(props);
    let iconColor = color || 'inherit';
    if (!color && variant) {
        const { bg } = (0, helpers_1.getColorVariant)(variant, shade, variants);
        iconColor = bg;
    }
    return (0, react_2.css) `
    ${(0, system_1.baseStyles)(props)};
    color: ${iconColor};
    display: inline-flex;
    line-height: 1;
    height: ${(0, helpers_1.px)(size)};
    width: ${(0, helpers_1.px)(size)};
    ${(0, system_1.marginStyles)(props)};

    > * {
      ${(!!spin || name.startsWith('spinner')) &&
        (0, react_2.css) `
        animation: ${animations_1.rotate} 1s infinite linear;
      `};
    }

    ${['loadbar', 'loadbar-alt'].includes(name) &&
        (0, react_2.css) `
      rect:last-of-type {
        animation: ${loadBar} 2s infinite linear;
      }
    `};

    ${name === 'loadbar-doc' &&
        (0, react_2.css) `
      g > rect {
        animation: ${loadBarDocument} 1s linear infinite alternate;
      }
    `};

    ${name === 'loadbar-sound' &&
        (0, react_2.css) `
      g > rect {
        animation: ${loadBarSound} 1s linear infinite alternate;
        transform: scaleY(0);
        transform-origin: bottom;

        &:nth-of-type(2) {
          animation-delay: 0.2s;
        }

        &:nth-of-type(3) {
          animation-delay: 0.4s;
        }
      }
    `};
  `;
});
exports.Icon = (0, react_1.forwardRef)((props, ref) => {
    const { name, size = 16, title, url, ...rest } = props;
    let iconURL = '';
    if (name) {
        const urlPrefix = options_1.iconsCustom.some(d => d.name === name)
            ? 'https://files.gilbarbara.dev/icons/'
            : 'https://cdn.jsdelivr.net/npm/css.gg/icons/svg/';
        iconURL = `${urlPrefix}${name}.svg`;
    }
    else if (url) {
        iconURL = url;
    }
    let titleString = name;
    if (!is_lite_1.default.undefined(title)) {
        titleString = is_lite_1.default.string(title) ? title : (0, react_innertext_1.default)(title);
    }
    return ((0, jsx_runtime_1.jsx)(exports.StyledIcon, { ref: ref, "data-component-name": "Icon", name: name, size: size, ...rest, children: (0, jsx_runtime_1.jsx)(react_inlinesvg_1.default, { height: size, src: iconURL, title: titleString, width: size }) }));
});
exports.Icon.defaultProps = {
    size: 16,
    spin: false,
};
//# sourceMappingURL=Icon.js.map