"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormGroup = exports.StyledFormGroup = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("@emotion/react");
const styled_1 = require("@emotion/styled");
const is_lite_1 = require("is-lite");
const Box_1 = require("./Box");
const ComponentWrapper_1 = require("./ComponentWrapper");
const Icon_1 = require("./Icon");
const Label_1 = require("./Label");
const helpers_1 = require("./modules/helpers");
const system_1 = require("./modules/system");
exports.StyledFormGroup = (0, styled_1.default)('div', (0, system_1.getStyledOptions)())(props => {
    const { spacing } = (0, helpers_1.getTheme)(props);
    return (0, react_2.css) `
    ${(0, system_1.baseStyles)(props)};
    margin-bottom: ${spacing.md};
    width: 100%;
    ${(0, system_1.borderStyles)(props)};
    ${(0, system_1.layoutStyles)(props)};
    ${(0, system_1.marginStyles)(props)};
    ${(0, system_1.paddingStyles)(props)};
    ${(0, system_1.radiusStyles)(props)};

    [data-component-name='Box'] {
      > * {
        margin-bottom: 0;
        margin-top: 0;
      }

      [data-component-name='Label'] {
        margin-right: ${spacing.xs};
      }

      [data-component-name='FormGroupContent'] {
        flex: 1;
      }

      [data-component-name='AssistiveContent'] {
        margin-left: ${spacing.xs};

        &:empty {
          display: none;
        }
      }
    }
  `;
});
const AssistiveContent = (0, styled_1.default)('div', (0, system_1.getStyledOptions)())(props => {
    const { grayLight, grayMid, spacing, typography } = (0, helpers_1.getTheme)(props);
    return (0, react_2.css) `
    align-items: center;
    color: ${(0, system_1.isDarkMode)(props) ? grayLight : grayMid};
    display: flex;
    font-size: ${typography.mid.fontSize};
    line-height: 16px;
    margin-top: ${spacing.xxs};
    min-height: ${spacing.md};
    text-align: left;
  `;
});
const Error = styled_1.default.div(props => {
    const { colors } = (0, helpers_1.getTheme)(props);
    return (0, react_2.css) `
    align-items: center;
    color: ${colors.red};
    display: flex;
  `;
});
exports.FormGroup = (0, react_1.forwardRef)((props, ref) => {
    const { assistiveText, children, error, hideAssistiveText, inline, label, labelId, labelInfo, labelStyles, required, skipIcon, valid, ...rest } = props;
    const content = {
        assistiveText,
    };
    if (error && valid === false) {
        content.assistiveText = ((0, jsx_runtime_1.jsxs)(Error, { children: [(0, jsx_runtime_1.jsx)(Icon_1.Icon, { mr: "xxs", name: "danger", title: "Invalid" }), (0, jsx_runtime_1.jsx)("span", { children: error })] }));
    }
    content.children = !skipIcon ? ((0, jsx_runtime_1.jsx)(ComponentWrapper_1.ComponentWrapper, { suffix: is_lite_1.default.boolean(valid) && valid ? (0, jsx_runtime_1.jsx)(Icon_1.Icon, { name: "check-o", title: "valid" }) : undefined, children: children })) : (children);
    if (label) {
        content.label = ((0, jsx_runtime_1.jsx)(Label_1.Label, { labelId: labelId, labelInfo: labelInfo || (required && (0, jsx_runtime_1.jsx)(Icon_1.Icon, { name: "asterisk", variant: "red" })), style: labelStyles, children: label }));
    }
    content.main = ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [content.label, content.children, !hideAssistiveText && ((0, jsx_runtime_1.jsx)(AssistiveContent, { "data-component-name": "AssistiveContent", children: content.assistiveText }))] }));
    if (inline) {
        content.main = (0, jsx_runtime_1.jsx)(Box_1.Box, { display: "flex", children: content.main });
    }
    return ((0, jsx_runtime_1.jsx)(exports.StyledFormGroup, { ref: ref, "data-component-name": "FormGroup", inline: inline, ...rest, children: content.main }));
});
exports.FormGroup.defaultProps = {
    hideAssistiveText: false,
    inline: false,
    radius: false,
    required: false,
    skipIcon: false,
};
//# sourceMappingURL=FormGroup.js.map