"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RadioGroup = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_use_1 = require("react-use");
const react_2 = require("@emotion/react");
const styled_1 = require("@emotion/styled");
const CheckboxAndRadio_1 = require("./CheckboxAndRadio");
const helpers_1 = require("./modules/helpers");
const system_1 = require("./modules/system");
const StyledRadioGroup = (0, styled_1.default)('div', (0, system_1.getStyledOptions)())(props => {
    const { inline } = props;
    const { spacing } = (0, helpers_1.getTheme)(props);
    return (0, react_2.css) `
    display: flex;
    flex-direction: ${inline ? 'row' : 'column'};

    ${inline &&
        (0, react_2.css) `
      margin-top: 0;

      [data-component-name='Radio'] + [data-component-name='Radio'] {
        margin-left: ${spacing.xs};
      }
    `};
  `;
});
function RadioGroup(props) {
    const { defaultValue, disabled, inline, items, name, onChange, size, value, ...rest } = props;
    const [selectedValue, setSelectedValue] = (0, react_1.useState)(value ?? defaultValue);
    const previousProps = (0, react_use_1.usePrevious)(props);
    (0, react_1.useEffect)(() => {
        if (previousProps && value && previousProps.value !== value) {
            setSelectedValue(value);
        }
    }, [previousProps, value]);
    const handleChange = (0, react_1.useCallback)(({ target }) => {
        const numericValue = Number(target.value);
        const currentValue = !Number.isNaN(numericValue) ? numericValue : target.value;
        /* istanbul ignore else */
        if (onChange) {
            onChange(currentValue);
        }
        if (!value && !disabled) {
            setSelectedValue(currentValue);
        }
    }, [disabled, onChange, value]);
    if (!items || !items.length) {
        return null;
    }
    const currentValue = !!value && value !== selectedValue ? value : selectedValue;
    return ((0, jsx_runtime_1.jsx)(StyledRadioGroup, { inline: inline, ...rest, "data-component-name": "RadioGroup", role: "radiogroup", children: items.map(d => ((0, jsx_runtime_1.jsx)(CheckboxAndRadio_1.Radio, { align: "start", checked: d.value === currentValue, disabled: disabled || d.disabled, label: d.label || d.value, mb: "xxs", name: name, onChange: handleChange, size: size, type: "radio", value: d.value }, d.value))) }));
}
exports.RadioGroup = RadioGroup;
RadioGroup.defaultProps = {
    disabled: false,
    inline: false,
    size: 'md',
};
//# sourceMappingURL=RadioGroup.js.map