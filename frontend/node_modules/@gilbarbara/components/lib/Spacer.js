"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Spacer = exports.StyledSpacer = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("@emotion/react");
const styled_1 = require("@emotion/styled");
const helpers_1 = require("./modules/helpers");
const system_1 = require("./modules/system");
exports.StyledSpacer = (0, styled_1.default)('div', (0, system_1.getStyledOptions)('fill'))(props => {
    const { direction, distribution, verticalAlign, wrap } = props;
    const isHorizontal = direction === 'horizontal';
    let distributionStyles;
    if (distribution) {
        distributionStyles = (0, react_2.css) `
      justify-content: ${isHorizontal ? distribution : verticalAlign};
    `;
    }
    return (0, react_2.css) `
    ${(0, system_1.baseStyles)(props)};
    align-items: ${isHorizontal ? verticalAlign : distribution};
    display: flex;
    flex-direction: ${direction === 'vertical' ? 'column' : 'row'};
    flex-wrap: ${wrap ? 'wrap' : 'nowrap'};
    ${distributionStyles};
    ${(0, system_1.borderStyles)(props)};
    ${(0, system_1.flexItemStyles)(props)};
    ${(0, system_1.layoutStyles)(props)};
    ${(0, system_1.marginStyles)(props)};
    ${(0, system_1.paddingStyles)(props)};
    ${(0, system_1.radiusStyles)(props)};
    ${(0, system_1.shadowStyles)(props)};
  `;
});
const StyledSpacerItem = (0, styled_1.default)('div', (0, system_1.getStyledOptions)('fill'))(props => {
    const { direction, flex, gap = 'sm', gapVertical, grow } = props;
    const { spacing } = (0, helpers_1.getTheme)(props);
    const isHorizontal = direction === 'horizontal';
    return (0, react_2.css) `
    display: ${isHorizontal ? 'flex' : 'block'};
    flex: ${flex};
    margin-bottom: ${gapVertical ? spacing[gapVertical] : undefined};
    width: ${!isHorizontal && grow ? '100%' : 'auto'};

    &:not(:last-of-type) {
      margin-right: ${isHorizontal ? spacing[gap] : undefined};
      margin-bottom: ${!isHorizontal ? spacing[gap] : undefined};
    }
  `;
});
/**
 * You can use a "data-flex" property on the children to grow or shrink to fit the space available.
 */
exports.Spacer = (0, react_1.forwardRef)((props, ref) => {
    const { children, ...rest } = props;
    const nodes = react_1.Children.toArray(children).map((child, index) => {
        const key = `SpacerItem-${index}`;
        const flex = (0, react_1.isValidElement)(child) ? child.props['data-flex'] : undefined;
        return ((0, jsx_runtime_1.jsx)(StyledSpacerItem, { flex: flex, ...rest, "data-component-name": "SpacerItem", children: child }, key));
    });
    return ((0, jsx_runtime_1.jsx)(exports.StyledSpacer, { ref: ref, "data-component-name": "Spacer", ...rest, children: nodes }));
});
exports.Spacer.defaultProps = {
    direction: 'horizontal',
    distribution: 'start',
    gap: 'sm',
    grow: false,
    radius: false,
    shadow: false,
    verticalAlign: 'center',
    wrap: true,
};
//# sourceMappingURL=Spacer.js.map