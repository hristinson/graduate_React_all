import { CSSProperties } from 'react';
import { StringOrNumber } from '@gilbarbara/types';
import { Alignment, ComponentProps, StyledProps, WithChildren, WithMargin, WithPadding } from './types';
export interface ContainerKnownProps extends StyledProps, WithChildren, WithMargin, WithPadding {
    /** @default left */
    align?: Alignment | 'stretch';
    fullScreen?: boolean;
    fullScreenOffset?: StringOrNumber;
    /**
     * Updates the padding for large screens.
     * @default true
     */
    responsive?: boolean;
    style?: CSSProperties;
    /** @default left */
    textAlign?: Alignment;
    /** @default start */
    verticalAlign?: 'start' | 'center' | 'end' | 'space-between' | 'space-around' | 'space-evenly';
    verticalPadding?: boolean;
}
export declare type ContainerProps = ComponentProps<HTMLDivElement, ContainerKnownProps>;
export declare const StyledContainer: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
} & ContainerKnownProps & Omit<import("react").HTMLProps<HTMLDivElement>, "size" | "ref" | keyof ContainerKnownProps>, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
export declare const Container: import("react").ForwardRefExoticComponent<ContainerKnownProps & Omit<import("react").HTMLProps<HTMLDivElement>, "size" | "ref" | keyof ContainerKnownProps> & import("react").RefAttributes<HTMLDivElement>>;
