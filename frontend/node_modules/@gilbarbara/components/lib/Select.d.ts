/// <reference types="react" />
import { ComponentProps, StyledProps, WithBorderless, WithChildren, WithElementSpacing, WithFormElements } from './types';
export interface SelectKnownProps extends StyledProps, WithBorderless, WithChildren, Omit<WithElementSpacing, 'suffixSpacing'>, WithFormElements {
    large?: boolean;
}
export declare type SelectProps = ComponentProps<HTMLSelectElement, SelectKnownProps>;
export declare const StyledSelect: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
} & SelectKnownProps & Omit<import("react").HTMLProps<HTMLSelectElement>, "size" | "ref" | keyof SelectKnownProps> & {
    filled: boolean;
}, import("react").DetailedHTMLProps<import("react").SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>, {}>;
export declare const Select: import("react").ForwardRefExoticComponent<SelectKnownProps & Omit<import("react").HTMLProps<HTMLSelectElement>, "size" | "ref" | keyof SelectKnownProps> & import("react").RefAttributes<HTMLSelectElement>>;
