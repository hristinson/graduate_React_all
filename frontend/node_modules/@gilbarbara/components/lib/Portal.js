"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Portal = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_dom_1 = require("react-dom");
const react_use_1 = require("react-use");
const react_2 = require("@emotion/react");
const styled_1 = require("@emotion/styled");
const is_lite_1 = require("is-lite");
const Icon_1 = require("./Icon");
const system_1 = require("./modules/system");
const theme_1 = require("./modules/theme");
function getPortalElement() {
    return document.querySelector('.__portal');
}
function createPortalElement() {
    const newElement = document.createElement('div');
    newElement.classList.add('__portal');
    return newElement;
}
const portalHide = (0, react_2.keyframes) `
  0% {
    opacity: 1;
    visibility: visible;
  }

  100% {
    opacity: 0;
    visibility: hidden;
  }
`;
const portalShow = (0, react_2.keyframes) `
  0% {
    opacity: 0;
    visibility: hidden;
  }

  100% {
    opacity: 1;
    visibility: visible;
  }
`;
const CloseButton = styled_1.default.button `
  ${system_1.baseStyles};
  ${system_1.buttonStyles};
  align-items: center;
  color: ${theme_1.black};
  display: inline-flex;
  height: 30px;
  justify-content: center;
  line-height: 1;
  pointer-events: all;
  position: absolute;
  right: 0;
  top: 0;
  width: 30px;
  z-index: 20;
`;
const Content = styled_1.default.div `
  max-height: 100%;
  position: relative;
  width: auto;
  z-index: 10;
`;
const Overlay = styled_1.default.div(props => {
    const { darkMode, isActive } = props;
    return (0, react_2.css) `
    background-color: ${darkMode ? 'rgba(222, 222, 222, 0.3)' : 'rgba(0, 0, 0, 0.3)'};
    bottom: 0;
    left: 0;
    opacity: ${isActive ? 1 : 0};
    position: absolute;
    right: 0;
    top: 0;
    transition: opacity 0.5s;
  `;
});
const StyledPortal = styled_1.default.div(props => {
    const { isActive, zIndex } = props;
    return (0, react_2.css) `
    align-items: center;
    animation-duration: 0.5s;
    animation-name: ${portalHide};
    animation-play-state: ${isActive ? 'running' : 'paused'};
    animation-name: ${isActive ? portalShow : portalHide};
    animation-direction: ${isActive ? 'normal' : 'reverse'};
    bottom: 0;
    display: flex;
    justify-content: center;
    left: 0;
    position: fixed;
    right: 0;
    top: 0;
    z-index: ${zIndex};
  `;
});
function Portal(props) {
    const { children, closeOnClickOverlay, closeOnEsc, hideOverlay, isActive, onClose, onOpen, showCloseButton, zIndex = 1000, } = props;
    const [isReady, setReady] = (0, react_1.useState)(false);
    const portal = (0, react_1.useRef)(null);
    const { darkMode = false } = (0, react_2.useTheme)();
    const closePortal = (0, react_1.useRef)(() => {
        destroyPortal.current();
        if (is_lite_1.default.function(onClose)) {
            onClose();
        }
    });
    const destroyPortal = (0, react_1.useRef)(() => {
        if (closeOnEsc) {
            document.removeEventListener('keydown', handleKeyDown);
        }
    });
    const previousIsActive = (0, react_use_1.usePrevious)(isActive);
    const previousCloseOnEsc = (0, react_use_1.usePrevious)(closeOnEsc);
    const handleKeyDown = (0, react_1.useCallback)(event => {
        if (event.keyCode === 27) {
            event.stopPropagation();
            closePortal.current();
        }
    }, []);
    (0, react_use_1.useMount)(() => {
        let element = getPortalElement();
        if (!getPortalElement()) {
            element = createPortalElement();
            document.body.appendChild(element);
        }
        portal.current = element;
        setReady(true);
        if (isActive && closeOnEsc) {
            document.addEventListener('keydown', handleKeyDown);
        }
    });
    (0, react_use_1.useUnmount)(() => {
        destroyPortal.current();
    });
    const openPortal = (0, react_1.useCallback)(() => {
        if (is_lite_1.default.function(onOpen)) {
            onOpen();
        }
        if (closeOnEsc) {
            document.addEventListener('keydown', handleKeyDown);
        }
    }, [closeOnEsc, handleKeyDown, onOpen]);
    (0, react_use_1.useUpdateEffect)(() => {
        const hasChanged = previousIsActive !== isActive;
        if (hasChanged && isActive) {
            openPortal();
        }
        else if (hasChanged && !isActive) {
            destroyPortal.current();
        }
        if (previousCloseOnEsc !== closeOnEsc) {
            if (closeOnEsc) {
                document.addEventListener('keydown', handleKeyDown);
            }
            else {
                document.removeEventListener('keydown', handleKeyDown);
            }
        }
    }, [
        closeOnEsc,
        destroyPortal,
        handleKeyDown,
        isActive,
        openPortal,
        previousIsActive,
        previousCloseOnEsc,
    ]);
    const handleClickClose = (0, react_1.useCallback)(() => {
        if (!closeOnClickOverlay) {
            return;
        }
        closePortal.current();
    }, [closeOnClickOverlay, closePortal]);
    const content = [];
    if (isActive) {
        content.push(children);
    }
    if (!isReady || !portal.current) {
        return null;
    }
    return (0, react_dom_1.createPortal)((0, jsx_runtime_1.jsxs)(StyledPortal, { "data-component-name": "Portal", isActive: isActive, zIndex: zIndex, children: [!hideOverlay && ((0, jsx_runtime_1.jsx)(Overlay, { darkMode: darkMode, "data-component-name": "PortalOverlay", isActive: isActive, onClick: handleClickClose })), showCloseButton && ((0, jsx_runtime_1.jsx)(CloseButton, { onClick: handleClickClose, title: "Close", type: "button", children: (0, jsx_runtime_1.jsx)(Icon_1.Icon, { name: "close-o", size: 20, title: "Close" }) })), (0, jsx_runtime_1.jsx)(Content, { "data-component-name": "PortalContent", children: content })] }), portal.current);
}
exports.Portal = Portal;
Portal.defaultProps = {
    closeOnClickOverlay: true,
    closeOnEsc: true,
    hideOverlay: false,
    isActive: false,
    showCloseButton: false,
    zIndex: 1000,
};
//# sourceMappingURL=Portal.js.map