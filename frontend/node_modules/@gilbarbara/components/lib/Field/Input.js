"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const helpers_1 = require("@gilbarbara/helpers");
const utils_1 = require("./utils");
const Input_1 = require("../Input");
const InputColor_1 = require("../InputColor");
const InputFile_1 = require("../InputFile");
const helpers_2 = require("../modules/helpers");
function FieldInput(props) {
    const { currentValue, formatter, id, isDirty, name, onBlur, onChange, onFocus, registration, setStatus, skipValidation, type, } = props;
    const handleBlur = (0, react_1.useCallback)((event) => {
        setStatus({ isActive: false, isDirty });
        registration.onBlur(event);
        if (onBlur) {
            onBlur(event);
        }
    }, [isDirty, onBlur, registration, setStatus]);
    const handleFocus = (0, react_1.useCallback)((event) => {
        setStatus({ isActive: true });
        if (onFocus) {
            onFocus(event);
        }
    }, [onFocus, setStatus]);
    const handleChange = (0, react_1.useCallback)((event) => {
        if (formatter === 'phoneBR') {
            event.target.value = (0, helpers_2.clearNumber)(event.target.value).slice(0, 11);
        }
        else if (formatter) {
            event.target.value = (0, helpers_2.clearNumber)(event.target.value);
        }
        registration.onChange(event);
        if (onChange) {
            onChange(event);
        }
    }, [formatter, onChange, registration]);
    const input = {
        ...(0, utils_1.getInputParameters)(props, 'currentValue', 'inline', 'isDirty', 'registration', 'setStatus'),
        id: id || name,
        onBlur: handleBlur,
        onChange: handleChange,
        onFocus: handleFocus,
    };
    let content;
    switch (type) {
        case 'color': {
            content = (0, jsx_runtime_1.jsx)(InputColor_1.InputColor, { ...registration, ...input, value: currentValue });
            break;
        }
        case 'file': {
            content = ((0, jsx_runtime_1.jsx)(InputFile_1.InputFile, { ...registration, ...input, value: currentValue?.length ? currentValue[0].name : '' }));
            break;
        }
        case 'hidden': {
            content = (0, jsx_runtime_1.jsx)("input", { ...registration, ...input, type: "hidden" });
            break;
        }
        default: {
            const parameters = {};
            if (currentValue) {
                if (formatter === 'money') {
                    parameters.value = (0, helpers_1.formatMoney)(currentValue);
                }
                else if (formatter === 'phoneBR') {
                    parameters.value = (0, helpers_1.formatPhoneBR)(`${currentValue}`);
                }
            }
            content = ((0, jsx_runtime_1.jsx)(Input_1.Input, { ...registration, ...input, ...parameters, suffixSpacing: !skipValidation, type: type }));
            break;
        }
    }
    return content;
}
exports.default = FieldInput;
//# sourceMappingURL=Input.js.map