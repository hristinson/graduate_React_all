"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Field = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_hook_form_1 = require("react-hook-form");
const react_use_1 = require("react-use");
const Checkbox_1 = require("./Checkbox");
const Debug_1 = require("./Debug");
const Dropdown_1 = require("./Dropdown");
const Input_1 = require("./Input");
const Radio_1 = require("./Radio");
const Select_1 = require("./Select");
const Textarea_1 = require("./Textarea");
const Toggle_1 = require("./Toggle");
const utils_1 = require("./utils");
const FormGroup_1 = require("../FormGroup");
function Field(props) {
    const { assistiveText, hideAssistiveText, id, inline, label, name, required, skipValidation, style, type = 'text', validations, value, } = props;
    const [{ isActive, isDirty }, setStatus] = (0, react_use_1.useSetState)({
        isActive: false,
        isDirty: false,
    });
    const { formState: { dirtyFields, errors }, getValues, register, setValue, unregister, } = (0, react_hook_form_1.useFormContext)();
    const registerOptions = (0, react_1.useMemo)(() => (0, utils_1.getRegisterOptions)({ ...props, getValues }), [getValues, props]);
    const registration = register(name, registerOptions);
    const currentValue = (0, react_hook_form_1.useWatch)({
        name,
        defaultValue: (0, utils_1.getDefaultValue)(value || getValues()[name], type),
    });
    const [error, errorType = ''] = (0, utils_1.getError)(name, errors);
    (0, react_use_1.useUnmount)(() => {
        unregister(name);
    });
    const showError = !!error && errorType !== 'revalidate' && (!isActive || isDirty);
    const isValid = !!currentValue && !error && (required || validations?.length);
    const groupProps = {
        assistiveText,
        hideAssistiveText,
        inline,
        label,
        labelId: id || name,
        required,
        style,
    };
    const output = { error };
    /* istanbul ignore else */
    if (!skipValidation) {
        groupProps.skipIcon = ['checkbox', 'dropdown', 'radio', 'select', 'toggle'].includes(type);
        if (showError) {
            groupProps.error = error;
            groupProps.valid = false;
        }
        else if (isValid) {
            groupProps.valid = true;
        }
    }
    switch (type) {
        case 'checkbox': {
            output.content = ((0, jsx_runtime_1.jsx)(Checkbox_1.default, { currentValue: currentValue, setValue: setValue, ...props }));
            break;
        }
        case 'dropdown': {
            output.content = ((0, jsx_runtime_1.jsx)(Dropdown_1.default, { currentValue: currentValue, registration: registration, setValue: setValue, ...props }));
            break;
        }
        case 'radio': {
            output.content = (0, jsx_runtime_1.jsx)(Radio_1.default, { registration: registration, ...props });
            break;
        }
        case 'select': {
            output.content = ((0, jsx_runtime_1.jsx)(Select_1.default, { isDirty: !!dirtyFields[name], registration: registration, setStatus: setStatus, ...props }));
            break;
        }
        case 'textarea': {
            output.content = ((0, jsx_runtime_1.jsx)(Textarea_1.default, { isDirty: !!dirtyFields[name], registration: registration, setStatus: setStatus, ...props }));
            break;
        }
        case 'toggle': {
            output.content = (0, jsx_runtime_1.jsx)(Toggle_1.default, { ...props, setValue: setValue });
            break;
        }
        default: {
            output.content = ((0, jsx_runtime_1.jsx)(Input_1.default, { currentValue: currentValue, isDirty: !!dirtyFields[name], registration: registration, setStatus: setStatus, ...props }));
        }
    }
    if (type === 'hidden') {
        return output.content;
    }
    return ((0, jsx_runtime_1.jsxs)(FormGroup_1.FormGroup, { "data-component-name": "Field", ...groupProps, children: [output.content, (0, jsx_runtime_1.jsx)(Debug_1.default, { ...props })] }));
}
exports.Field = Field;
Field.defaultProps = {
    debug: false,
    disabled: false,
    hideAssistiveText: false,
    inline: false,
    label: '',
    readOnly: false,
    required: false,
    skipValidation: false,
    type: 'text',
};
//# sourceMappingURL=index.js.map