"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDefaultValue = exports.getRegisterOptions = exports.getInputParameters = exports.getError = void 0;
const helpers_1 = require("@gilbarbara/helpers");
const is_lite_1 = require("is-lite");
const helpers_2 = require("../modules/helpers");
const validations_1 = require("../modules/validations");
function getError(name, errors) {
    const { message, type } = errors[name] || {};
    if (message) {
        return [message, type];
    }
    return [null];
}
exports.getError = getError;
function getInputParameters(props, ...extra) {
    return (0, helpers_1.omit)(props, 'assistiveText', 'children', 'clearError', 'debug', 'dropdownProps', 'formatter', 'hideAssistiveText', 'label', 'maxLength', 'minLength', 'onBlur', 'onChange', 'onFocus', 'options', 'required', 'setValueAs', 'skipValidation', 'type', 'validations', 'value', ...extra);
}
exports.getInputParameters = getInputParameters;
function getRegisterOptions(props) {
    const { getValues, maxLength, minLength, required, formatter = '', validations = [], setValueAs, type = 'text', value, } = props;
    const registerOptions = {};
    if (!is_lite_1.default.undefined(value) || ['checkbox', 'toggle'].includes(type)) {
        registerOptions.value = getDefaultValue(value, type);
    }
    if (required) {
        registerOptions.required = 'Required';
    }
    if (minLength) {
        registerOptions.minLength = {
            value: minLength,
            message: `Min. Characters: ${minLength}`,
        };
    }
    if (maxLength) {
        registerOptions.maxLength = {
            value: maxLength,
            message: `Max. Characters: ${maxLength}`,
        };
    }
    if (['money', 'number', 'phoneBR'].includes(formatter)) {
        registerOptions.setValueAs = (v) => {
            if (!v) {
                return undefined;
            }
            return is_lite_1.default.number(v) ? v : Number((0, helpers_2.clearNumber)(v));
        };
    }
    if (setValueAs) {
        registerOptions.setValueAs = setValueAs;
    }
    const validated = validations
        .map(d => {
        let result;
        if (d === 'email') {
            result = validations_1.validateEmail;
        }
        if (d === 'password') {
            result = validations_1.validatePassword;
        }
        if (d === 'phoneBR') {
            result = validations_1.validatePhoneBR;
        }
        if (d.startsWith('equalsTo:')) {
            const [, field] = d.split(':');
            result = { field, fn: validations_1.validateMatchField };
        }
        return result;
    })
        .filter(Boolean);
    if (validated.length) {
        registerOptions.validate = validated.reduce((acc, validation) => {
            if (is_lite_1.default.undefined(validation)) {
                return acc;
            }
            const fnName = is_lite_1.default.function(validation) ? validation.name : validation.fn.name;
            acc[fnName] = (value_) => {
                const input = value_ ? `${value_}` : '';
                let response;
                if (is_lite_1.default.function(validation)) {
                    response = validation(input);
                }
                else if (validation.field && is_lite_1.default.function(validation.fn)) {
                    const actualValues = getValues();
                    response = validation.fn(`${actualValues[validation.field]}`, input);
                }
                return response;
            };
            return acc;
        }, {});
    }
    return registerOptions;
}
exports.getRegisterOptions = getRegisterOptions;
function getDefaultValue(value, type) {
    if (type === 'checkbox') {
        return value || [];
    }
    else if (type === 'toggle') {
        return value || false;
    }
    return value;
}
exports.getDefaultValue = getDefaultValue;
//# sourceMappingURL=utils.js.map