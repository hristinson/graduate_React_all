"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const is_lite_1 = require("is-lite");
const utils_1 = require("./utils");
const Dropdown_1 = require("../Dropdown");
function FieldDropdown(props) {
    const { currentValue, dropdownProps = {}, items = [], name, onChange, setValue } = props;
    const handleChangeDropdown = (0, react_1.useCallback)((data) => {
        const { multi } = dropdownProps;
        const setValueOptions = { shouldDirty: true, shouldValidate: true };
        if (multi) {
            const values = data.map(d => d.value);
            setValue(name, values, setValueOptions);
            if (onChange && (!currentValue || currentValue !== values)) {
                onChange(data);
            }
        }
        else {
            const [selected] = data;
            /* istanbul ignore else */
            if (selected) {
                setValue(name, selected.value, setValueOptions);
                if (onChange && (!currentValue || currentValue !== selected.value)) {
                    onChange(data);
                }
            }
            else {
                setValue(name, undefined, setValueOptions);
            }
        }
    }, [dropdownProps, setValue, name, onChange, currentValue]);
    const parameters = (0, utils_1.getInputParameters)(props, 'currentValue', 'registration', 'setValue');
    return ((0, jsx_runtime_1.jsx)(Dropdown_1.Dropdown, { items: items, values: items.filter((d) => is_lite_1.default.array(currentValue) ? currentValue.includes(d.value) : d.value === currentValue), width: "100%", ...parameters, ...dropdownProps, onChange: handleChangeDropdown }));
}
exports.default = FieldDropdown;
//# sourceMappingURL=Dropdown.js.map