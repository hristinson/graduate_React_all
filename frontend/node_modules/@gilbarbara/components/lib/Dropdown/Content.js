"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StyledContent = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("@emotion/react");
const styled_1 = require("@emotion/styled");
const Box_1 = require("../Box");
const Icon_1 = require("../Icon");
const helpers_1 = require("../modules/helpers");
const system_1 = require("../modules/system");
exports.StyledContent = (0, styled_1.default)('div', (0, system_1.getStyledOptions)()) `
  align-items: center;
  display: flex;
  flex-wrap: wrap;
  width: 100%;
`;
const Item = (0, styled_1.default)('div', (0, system_1.getStyledOptions)())(props => {
    const { color, multi } = props;
    const { grayDark, radius, spacing, white } = (0, helpers_1.getTheme)(props);
    const darkMode = (0, system_1.isDarkMode)(props);
    let multiStyles;
    if (multi) {
        multiStyles = (0, react_1.css) `
      border: 1px solid ${color};
      border-radius: ${radius.xxs};
      background-color: ${darkMode ? grayDark : white};
      margin-bottom: ${spacing.xxs};
      margin-right: ${spacing.xs};
      margin-top: ${spacing.xxs};
      padding: 3px 6px;
    `;
    }
    return (0, react_1.css) `
    align-items: center;
    display: flex;
    line-height: 1;
    ${multiStyles};
  `;
});
const ItemClose = (0, styled_1.default)('span', (0, system_1.getStyledOptions)())(props => {
    const { spacing } = (0, helpers_1.getTheme)(props);
    return (0, react_1.css) `
    display: inline-flex;
    line-height: 1;
    margin-left: ${spacing.xxs};
  `;
});
const Placeholder = (0, styled_1.default)('div', (0, system_1.getStyledOptions)())(props => {
    const { darkMode, grayLight, grayMid } = (0, helpers_1.getTheme)(props);
    return (0, react_1.css) `
    align-items: center;
    color: ${darkMode ? grayLight : grayMid};
    display: flex;
  `;
});
function DropdownContent(props) {
    const { methods: { getStyles, removeItem }, props: { multi, placeholder }, state: { values }, } = props;
    const handleClickRemove = (value) => {
        return (event) => {
            event.stopPropagation();
            removeItem(null, value, true);
        };
    };
    if (values.length) {
        return ((0, jsx_runtime_1.jsx)(exports.StyledContent, { children: values.map(item => {
                const { label, prefix, suffix, value } = item || {};
                return ((0, jsx_runtime_1.jsxs)(Item, { color: getStyles().color, "data-component-name": "ContentItem", multi: multi, children: [!!prefix && ((0, jsx_runtime_1.jsx)(Box_1.BoxInline, { "data-component-name": "ContentItemPrefix", mr: "xxs", children: prefix })), (0, jsx_runtime_1.jsx)("span", { children: label || value }), !!suffix && ((0, jsx_runtime_1.jsx)(Box_1.BoxInline, { "data-component-name": "ContentItemSuffix", ml: "xxs", children: suffix })), multi && ((0, jsx_runtime_1.jsx)(ItemClose, { onClick: handleClickRemove(item), children: (0, jsx_runtime_1.jsx)(Icon_1.Icon, { name: "close" }) }))] }, value));
            }) }));
    }
    return (0, jsx_runtime_1.jsx)(Placeholder, { children: placeholder });
}
exports.default = DropdownContent;
//# sourceMappingURL=Content.js.map