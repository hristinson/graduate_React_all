"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dropdown = exports.StyledDropdown = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("@emotion/react");
const styled_1 = require("@emotion/styled");
const react_dropdown_1 = require("@gilbarbara/react-dropdown");
const Content_1 = require("./Content");
const Items_1 = require("./Items");
const helpers_1 = require("../modules/helpers");
const system_1 = require("../modules/system");
exports.StyledDropdown = (0, styled_1.default)('div', (0, system_1.getStyledOptions)('placeholder', 'onSearch'))(props => {
    const { borderless, isFilled, multi, shade, variant = 'primary', width } = props;
    const { grayDark, grayDarker, grayMid, radius, spacing, variants, white } = (0, helpers_1.getTheme)(props);
    const { bg } = (0, helpers_1.getColorVariant)(variant, shade, variants);
    const darkMode = (0, system_1.isDarkMode)(props);
    let borderColor = darkMode ? grayDark : grayMid;
    if (isFilled) {
        borderColor = bg;
    }
    const styles = borderless
        ? (0, react_2.css) `
        border: 0 !important;
        border-bottom: 1px solid ${borderColor} !important;
        border-radius: 0 !important;
        padding: 0 !important;
      `
        : (0, react_2.css) `
        background-color: ${darkMode ? grayDarker : white};
        border: 1px solid ${borderColor};
        border-radius: ${radius.xs};
        padding-left: ${multi ? 0 : spacing.xs} !important;
      `;
    return (0, react_2.css) `
    min-width: ${(0, helpers_1.px)(width || 260)};
    width: ${(0, helpers_1.px)(width) || 'auto'};
    ${(0, system_1.marginStyles)(props)};

    .react-dropdown {
      ${styles};

      &:focus,
      &:focus-within {
        border-color: ${bg} !important;
        box-shadow: ${borderless ? 'none' : `0 0 8px 1px ${bg}`} !important;

        .react-dropdown-separator {
          background-color: ${bg};
        }
      }

      &[disabled] {
        opacity: 1 !important;

        .react-dropdown-content {
          color: ${grayMid};
        }
      }

      &-clear {
        &:hover {
          color: ${variants.red.mid.bg};
        }
      }

      &-content {
        align-items: center;
        width: calc(100% - 16px);

        span {
          max-width: 100%;

          + input {
            margin-left: 5px;
          }
        }
      }

      &-menu {
        border: 0 !important;
        border-radius: ${radius.xs};
        overflow: hidden;
        width: 100% !important;
        z-index: 100;

        &:empty {
          display: none;
        }
      }

      &-loading {
        padding: 0 ${spacing.xs};

        &:after {
          margin: 0;
        }
      }

      &-separator {
        background-color: ${borderColor};
      }
    }
  `;
});
function getDropdownComponent(props) {
    return function DropdownRenderer(renderer) {
        return (0, jsx_runtime_1.jsx)(Items_1.default, { ...renderer, ...props });
    };
}
function Dropdown(props) {
    const { allowCreate, closeMultiOnSelect, inputOptions, menuMaxHeight = 260, items, large, onClear, onChange, open, showClearButton, values = [], ...rest } = props;
    const [isFilled, setFilled] = (0, react_1.useState)(!!values.length);
    const { inputHeight, variants } = (0, helpers_1.getTheme)({ theme: (0, react_2.useTheme)() });
    const { bg } = (0, helpers_1.getColorVariant)(rest.variant || 'primary', rest.shade, variants);
    const handleChange = (value) => {
        setFilled(!!value.length);
        if (onChange) {
            onChange(value);
        }
    };
    return ((0, jsx_runtime_1.jsx)(exports.StyledDropdown, { "data-component-name": "Dropdown", isFilled: isFilled, ...rest, children: (0, jsx_runtime_1.jsx)(react_dropdown_1.default, { closeOnSelect: closeMultiOnSelect, contentComponent: Content_1.default, create: allowCreate, hiddenInput: inputOptions, menuComponent: getDropdownComponent({ allowCreate, ...rest }), onChange: handleChange, onClearAll: onClear, open: open, options: items, showClearButton: showClearButton, styles: {
                color: bg,
                gap: 0,
                minHeight: parseInt(large ? inputHeight.large : inputHeight.normal, 10),
                menuMaxHeight,
                width: rest.width,
            }, values: values, ...rest }) }));
}
exports.Dropdown = Dropdown;
Dropdown.defaultProps = {
    allowCreate: false,
    autoFocus: true,
    borderless: false,
    clearOnSelect: false,
    closeOnScroll: false,
    direction: 'ltr',
    disabled: false,
    height: 260,
    keepSelectedInList: true,
    labels: {
        create: 'Create {search}',
        noData: 'Nothing found',
    },
    large: false,
    loading: false,
    multi: false,
    placeholder: 'Select an option',
    searchBy: 'label',
    searchable: true,
    showClearButton: false,
    showSeparator: false,
    shade: 'mid',
    variant: 'primary',
    width: 260,
};
//# sourceMappingURL=index.js.map