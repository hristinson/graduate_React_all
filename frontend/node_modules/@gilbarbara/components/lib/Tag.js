"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tag = exports.StyledTag = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("@emotion/react");
const styled_1 = require("@emotion/styled");
const ButtonBase_1 = require("./ButtonBase");
const Icon_1 = require("./Icon");
const helpers_1 = require("./modules/helpers");
const system_1 = require("./modules/system");
exports.StyledTag = (0, styled_1.default)('span', (0, system_1.getStyledOptions)())(props => {
    const { color, colorShade, variant } = props;
    const { radius, spacing, variants } = (0, helpers_1.getTheme)(props);
    const selectedColor = color || (variant && !['black', 'white'].includes(variant) ? variant : undefined);
    let colorProp;
    if (selectedColor) {
        colorProp = (0, helpers_1.getColorVariant)(selectedColor, colorShade, variants).bg;
    }
    return (0, react_2.css) `
    ${(0, system_1.baseStyles)(props)};
    align-items: center;
    border-radius: ${radius.xs};
    color: ${colorProp};
    display: inline-flex;
    padding: ${spacing.xxs} ${spacing.sm};
    ${(0, system_1.backgroundStyles)(props)};
    ${(0, system_1.marginStyles)(props)};
    ${(0, system_1.textStyles)(props, 1)};
  `;
});
exports.Tag = (0, react_1.forwardRef)((props, ref) => {
    const { children, colorShade, iconAfter, iconBefore, onClickAfter, onClickBefore, shade, ...rest } = props;
    const { typography } = (0, helpers_1.getTheme)({ theme: (0, react_2.useTheme)() });
    const iconSize = rest.size ? parseInt(typography[rest.size].fontSize, 10) : undefined;
    const icons = {};
    if (iconBefore && onClickBefore) {
        icons.before = ((0, jsx_runtime_1.jsx)(ButtonBase_1.ButtonBase, { mr: "xxs", onClick: onClickBefore, children: (0, jsx_runtime_1.jsx)(Icon_1.Icon, { name: iconBefore, size: iconSize }) }));
    }
    else if (iconBefore) {
        icons.before = (0, jsx_runtime_1.jsx)(Icon_1.Icon, { mr: "xxs", name: iconBefore, size: iconSize });
    }
    if (iconAfter && onClickAfter) {
        icons.after = ((0, jsx_runtime_1.jsx)(ButtonBase_1.ButtonBase, { ml: "xxs", onClick: onClickAfter, children: (0, jsx_runtime_1.jsx)(Icon_1.Icon, { name: iconAfter, size: iconSize }) }));
    }
    else if (iconAfter) {
        icons.after = (0, jsx_runtime_1.jsx)(Icon_1.Icon, { ml: "xxs", name: iconAfter, size: iconSize });
    }
    return ((0, jsx_runtime_1.jsxs)(exports.StyledTag, { ref: ref, "data-component-name": "Tag", ...rest, colorShade: rest.invert && !colorShade ? 'mid' : colorShade || 'dark', shade: rest.invert && !shade ? 'mid' : shade || 'lightest', children: [icons.before, (0, jsx_runtime_1.jsx)("span", { children: children }), icons.after] }));
});
exports.Tag.defaultProps = {
    bold: false,
    invert: false,
    size: 'mid',
    variant: 'primary',
};
//# sourceMappingURL=Tag.js.map