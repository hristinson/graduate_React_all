"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Form = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_hook_form_1 = require("react-hook-form");
/**
 A wrapper for the `react-hook-form` FormProvider for use with the **Field** component.

 It will execute the `children` with the `formMethods` from the `useForm` hook as props. You can use it inline or with a functional component.

 ```tsx
 import { Box, Button, Field, Form, FormProps, FormSubmitHandler } from '@gilbarbara/components';

 interface FormData {
   name: string;
 }

 function EditFormFn({ formMethods }: FormProps<FormData>) {
   const { formState: { isDirty }, handleSubmit, } = formMethods;

   const handleFormSubmit: SubmitHandler<FormData> = formData => {
     console.log(formData);
   };

   return (
     <Box as="form" method="POST" onSubmit={handleSubmit(handleFormSubmit)}>
       <Field label="Name" name="name" placeholder="Your name" required type="text" />

       <Button disabled={!isDirty} type="submit">
         Send
       </Button>
     </Box>
   );
 }

 export default function EditForm() {
   return <Form defaultValues={{ name: 'Test User' }}>{EditFormFn}</Form>;
 }
 ```
 */
function Form({ children, ...props }) {
    const formMethods = (0, react_hook_form_1.useForm)({
        mode: 'onChange',
        ...props,
    });
    return ((0, jsx_runtime_1.jsx)(react_hook_form_1.FormProvider, { "data-component-name": "Form", ...formMethods, children: children({ formMethods }) }));
}
exports.Form = Form;
//# sourceMappingURL=Form.js.map