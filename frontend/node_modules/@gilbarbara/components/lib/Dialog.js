"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dialog = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("@emotion/react");
const styled_1 = require("@emotion/styled");
const Button_1 = require("./Button");
const Headings_1 = require("./Headings");
const helpers_1 = require("./modules/helpers");
const system_1 = require("./modules/system");
const Paragraph_1 = require("./Paragraph");
const Portal_1 = require("./Portal");
const Spacer_1 = require("./Spacer");
const StyledDialog = (0, styled_1.default)('div', (0, system_1.getStyledOptions)())(props => {
    const { textAlign = 'left', width = 380 } = props;
    const { black, darkColor, white } = (0, helpers_1.getTheme)(props);
    const darkMode = (0, system_1.isDarkMode)(props);
    return (0, react_2.css) `
      background-color: ${darkMode ? darkColor : white};
      color: ${darkMode ? white : black};
      max-width: 100%;
      text-align: ${textAlign};
      width: ${(0, helpers_1.px)(width)};
      ${(0, system_1.borderStyles)(props)};
      ${(0, system_1.paddingStyles)(props)};
      ${(0, system_1.radiusStyles)(props)};
      ${(0, system_1.shadowStyles)(props)};
    `;
});
function Dialog(props) {
    const { buttonCancelText, buttonConfirmText, buttonOrder, closeOnClickOverlay, closeOnEsc = true, content, hideOverlay, isActive, onClickCancel, onClickConfirmation, onClose, onOpen, style, title, variant, zIndex, ...rest } = props;
    const handlePortalClose = (0, react_1.useCallback)(() => {
        onClickCancel();
        if (onClose) {
            onClose();
        }
    }, [onClickCancel, onClose]);
    const actionButton = ((0, jsx_runtime_1.jsx)(Button_1.Button, { "data-test-id": "confirm", onClick: onClickConfirmation, variant: variant, children: buttonConfirmText }));
    const cancelButton = ((0, jsx_runtime_1.jsx)(Button_1.Button, { "data-test-id": "cancel", invert: true, onClick: onClickCancel, variant: variant, children: buttonCancelText }));
    return ((0, jsx_runtime_1.jsx)(Portal_1.Portal, { closeOnClickOverlay: closeOnClickOverlay, closeOnEsc: closeOnEsc, hideOverlay: hideOverlay, isActive: isActive, onClose: handlePortalClose, onOpen: onOpen, zIndex: zIndex, children: (0, jsx_runtime_1.jsxs)(StyledDialog, { "data-component-name": "Dialog", style: style, ...rest, children: [title && (0, jsx_runtime_1.jsx)(Headings_1.H3, { mb: "sm", children: title }), (0, jsx_runtime_1.jsx)(Paragraph_1.Paragraph, { mb: "xl", children: content }), buttonOrder === 'ltr' ? ((0, jsx_runtime_1.jsxs)(Spacer_1.Spacer, { distribution: "space-between", children: [cancelButton, actionButton] })) : ((0, jsx_runtime_1.jsxs)(Spacer_1.Spacer, { distribution: "space-between", children: [actionButton, cancelButton] }))] }) }));
}
exports.Dialog = Dialog;
Dialog.defaultProps = {
    buttonCancelText: 'Cancel',
    buttonConfirmText: 'Confirm',
    buttonOrder: 'ltr',
    closeOnClickOverlay: false,
    closeOnEsc: false,
    hideOverlay: false,
    padding: 'xl',
    radius: 'lg',
    shadow: 'high',
    textAlign: 'left',
    variant: 'primary',
    width: 380,
};
//# sourceMappingURL=Dialog.js.map