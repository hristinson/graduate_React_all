"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CopyToClipboard = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("@emotion/react");
const styled_1 = require("@emotion/styled");
const Icon_1 = require("./Icon");
const animations_1 = require("./modules/animations");
const copy_text_to_clipboard_1 = require("./modules/copy-text-to-clipboard");
const helpers_1 = require("./modules/helpers");
const system_1 = require("./modules/system");
const Tooltip_1 = require("./Tooltip");
const StyledCopyToClipboard = (0, styled_1.default)('span', (0, system_1.getStyledOptions)())(props => {
    return (0, react_2.css) `
    ${(0, system_1.baseStyles)(props)};
    cursor: pointer;
    display: inline-flex;
    line-height: 1;
    position: relative;
    ${(0, system_1.marginStyles)(props)};
  `;
});
const StyledIcon = (0, styled_1.default)(Icon_1.Icon) `
  transition: transform 0.6s;

  &.will-animate {
    animation: ${animations_1.fadeInOut} 0.6s ease-out 1 forwards;
  }

  &.is-animating {
    transform: scale(4);
  }
`;
function CopyToClipboard(props) {
    const { disableAnimation = false, icon = 'copy', onCopy, size = 16, text, tooltipCopiedText = 'Copied!', tooltipText = 'Copy', ...rest } = props;
    const [content, setContent] = (0, react_1.useState)(tooltipText);
    const isActive = (0, react_1.useRef)(false);
    const theme = (0, helpers_1.getTheme)({ theme: (0, react_2.useTheme)() });
    (0, react_1.useEffect)(() => {
        isActive.current = true;
        return () => {
            isActive.current = false;
        };
    }, []);
    const handleClick = (event) => {
        if (!disableAnimation) {
            (0, animations_1.animateIcon)(event.currentTarget, 'primary', theme);
        }
        (0, copy_text_to_clipboard_1.default)(text);
        setContent(tooltipCopiedText);
        setTimeout(() => {
            if (isActive.current) {
                setContent(tooltipText);
            }
        }, 2000);
    };
    return ((0, jsx_runtime_1.jsx)(StyledCopyToClipboard, { "data-component-name": "CopyToClipboard", onClick: handleClick, ...rest, children: (0, jsx_runtime_1.jsx)(Tooltip_1.Tooltip, { content: content, position: "right", size: "small", children: (0, jsx_runtime_1.jsx)(StyledIcon, { name: icon, size: size, title: null }) }) }));
}
exports.CopyToClipboard = CopyToClipboard;
CopyToClipboard.defaultProps = {
    disableAnimation: false,
    icon: 'copy',
    size: 16,
    tooltipCopiedText: 'Copied!',
    tooltipText: 'Copy',
};
//# sourceMappingURL=CopyToClipboard.js.map