"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InputColor = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("@emotion/react");
const styled_1 = require("@emotion/styled");
const is_lite_1 = require("is-lite");
const Box_1 = require("./Box");
const helpers_1 = require("./modules/helpers");
const system_1 = require("./modules/system");
const Text_1 = require("./Text");
const StyledColorGroup = (0, styled_1.default)('div', (0, system_1.getStyledOptions)())(props => {
    const { height, width } = props;
    const innerHeight = (is_lite_1.default.string(height) ? parseInt(height, 10) : height) + 16;
    const innerWidth = (is_lite_1.default.string(width) ? parseInt(width, 10) : width) + 16;
    return (0, react_2.css) `
    align-items: center;
    display: flex;

    [data-component-name='Text'] {
      min-width: 75px;
    }

    input {
      appearance: none;
      -moz-appearance: none;
      -webkit-appearance: none;
      background: none;
      border: 0;
      cursor: pointer;
      height: ${(0, helpers_1.px)(innerHeight)};
      margin: -8px;
      padding: 0;
      width: ${(0, helpers_1.px)(innerWidth)};
    }
  `;
});
exports.InputColor = (0, react_1.forwardRef)((props, ref) => {
    const { spacing } = (0, helpers_1.getTheme)({ theme: (0, react_2.useTheme)() });
    const { height = spacing.xl, name, onChange, value, width = spacing.xl, ...rest } = props;
    const [localValue, setLocalValue] = (0, react_1.useState)('');
    const handleChange = (event) => {
        setLocalValue(event.target.value);
        if (onChange) {
            onChange(event);
        }
    };
    return ((0, jsx_runtime_1.jsxs)(StyledColorGroup, { "data-component-name": "InputColor", height: height, width: width, children: [(0, jsx_runtime_1.jsx)(Box_1.Box, { height: height, mr: "xs", overflow: "hidden", width: width, children: (0, jsx_runtime_1.jsx)("input", { ref: ref, id: name, name: name, onChange: handleChange, type: "color", ...rest }) }), (0, jsx_runtime_1.jsx)(Text_1.Text, { children: value || localValue })] }));
});
exports.InputColor.defaultProps = {
    disabled: false,
    height: '32px',
    readOnly: false,
    width: '32px',
};
//# sourceMappingURL=InputColor.js.map