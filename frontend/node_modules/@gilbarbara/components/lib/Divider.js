"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Divider = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("@emotion/react");
const styled_1 = require("@emotion/styled");
const helpers_1 = require("./modules/helpers");
const system_1 = require("./modules/system");
const borderSizes = {
    sm: '1px',
    md: '2px',
    lg: '4px',
};
const StyledDivider = (0, styled_1.default)('div', (0, system_1.getStyledOptions)('type'))(props => {
    const { align, borderSize = 'sm', borderStyle, children, direction, gap = 'xs', length = '100%', shade, variant = 'gray', } = props;
    const { spacing, variants } = (0, helpers_1.getTheme)(props);
    const isHorizontal = direction === 'horizontal';
    const { bg } = (0, helpers_1.getColorVariant)(variant, shade, variants);
    const selectedDimension = borderSizes[borderSize];
    const margin = isHorizontal
        ? (0, react_1.css) `
        margin-bottom: ${spacing.md};
        margin-top: ${spacing.md};
      `
        : (0, react_1.css) `
        margin-left: ${spacing.md};
        margin-right: ${spacing.md};
      `;
    if (isHorizontal && children) {
        let borderLeftWidth = '50%';
        let borderRightWidth = '50%';
        if (align === 'left') {
            borderLeftWidth = '5%';
            borderRightWidth = 'calc(95%)';
        }
        if (align === 'right') {
            borderLeftWidth = 'calc(95%)';
            borderRightWidth = '5%';
        }
        return (0, react_1.css) `
      ${(0, system_1.baseStyles)(props)};
      align-items: center;
      color: ${bg};
      display: flex;
      flex-direction: row;
      line-height: 1;
      position: relative;
      ${margin};
      width: ${(0, helpers_1.px)(length)};
      ${(0, system_1.marginStyles)(props)};
      ${(0, system_1.textStyles)(props)};

      &:before,
      &:after {
        content: '';
        border-top: ${borderSizes[borderSize]} ${borderStyle} ${bg};
      }

      &:before {
        margin-right: ${spacing[gap]};
        width: ${borderLeftWidth};
      }

      &:after {
        margin-left: ${spacing[gap]};
        width: ${borderRightWidth};
      }
    `;
    }
    return (0, react_1.css) `
    border-bottom: ${isHorizontal ? `${selectedDimension} ${borderStyle} ${bg}` : undefined};
    border-left: ${isHorizontal ? undefined : `${selectedDimension} ${borderStyle} ${bg}`};
    height: ${isHorizontal ? undefined : (0, helpers_1.px)(length)};
    ${margin};
    text-indent: -9999px;
    width: ${(0, helpers_1.px)(isHorizontal ? length : selectedDimension)};
    ${(0, system_1.marginStyles)(props)};
  `;
});
function Divider(props) {
    return (0, jsx_runtime_1.jsx)(StyledDivider, { "data-component-name": "Divider", role: "separator", ...props });
}
exports.Divider = Divider;
Divider.defaultProps = {
    align: 'center',
    borderSize: 'sm',
    borderStyle: 'solid',
    direction: 'horizontal',
    gap: 'xs',
    length: '100%',
    shade: 'light',
    size: 'regular',
    variant: 'gray',
};
//# sourceMappingURL=Divider.js.map