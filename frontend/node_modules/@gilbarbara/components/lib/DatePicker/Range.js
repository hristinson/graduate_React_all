"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatePickerRange = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_day_picker_1 = require("react-day-picker");
const react_2 = require("@emotion/react");
const styled_1 = require("@emotion/styled");
const helpers_1 = require("@gilbarbara/helpers");
const utils_1 = require("./utils");
const Box_1 = require("../Box");
const Button_1 = require("../Button");
const helpers_2 = require("../modules/helpers");
const system_1 = require("../modules/system");
const Paragraph_1 = require("../Paragraph");
const Spacer_1 = require("../Spacer");
const Text_1 = require("../Text");
const StyledDatePicker = (0, styled_1.default)('div', (0, system_1.getStyledOptions)('onApply'))(props => {
    return (0, utils_1.getStyles)(props);
});
function DatePickerRange(props) {
    const { currentMonthLabel, formatLocale, fromDate, onApply, onSelect, showApply, toDate, variant, ...rest } = props;
    const [month, setMonth] = (0, react_1.useState)(undefined);
    const [range, setRange] = (0, react_1.useState)(undefined);
    const { radius, spacing } = (0, helpers_2.getTheme)({ theme: (0, react_2.useTheme)() });
    const handleClickSelect = selectedRange => {
        setRange(selectedRange);
        if (onSelect) {
            onSelect([
                selectedRange?.from?.toISOString() || undefined,
                selectedRange?.to?.toISOString() || undefined,
            ]);
        }
    };
    const handleClickApply = () => {
        if (onApply) {
            onApply([range?.from?.toISOString() || undefined, range?.to?.toISOString() || undefined]);
        }
    };
    const handleClickReset = () => {
        setRange({ from: undefined, to: undefined });
        if (onSelect) {
            onSelect([undefined, undefined]);
        }
    };
    const { from, to } = range || {};
    const modifiers = { from: from || false, to: to || false };
    const content = {
        header: (0, jsx_runtime_1.jsx)(Paragraph_1.Paragraph, { children: "Select the initial date" }),
    };
    if (showApply) {
        content.footer = (0, utils_1.getFooter)(setMonth, currentMonthLabel, (0, jsx_runtime_1.jsxs)(Spacer_1.Spacer, { children: [(0, jsx_runtime_1.jsx)(Button_1.Button, { disabled: !from, invert: true, onClick: handleClickReset, size: "sm", variant: variant, children: "Reset" }), (0, jsx_runtime_1.jsx)(Button_1.Button, { disabled: !to, onClick: handleClickApply, size: "sm", variant: variant, children: "Apply" })] }));
    }
    else {
        content.footer = (0, utils_1.getFooter)(setMonth, currentMonthLabel);
        content.reset = ((0, jsx_runtime_1.jsx)(Button_1.Button, { invert: true, onClick: handleClickReset, size: "sm", style: {
                borderRadius: radius.xs,
                minHeight: 24,
                padding: `${spacing.xxs} ${spacing.xs}`,
            }, variant: variant, children: "Reset" }));
    }
    if (from && to) {
        content.header = ((0, jsx_runtime_1.jsxs)(Spacer_1.Spacer, { distribution: "center", children: [(0, jsx_runtime_1.jsxs)(Text_1.Text, { children: ["From ", (0, helpers_1.formatDateLocale)(from.toISOString(), { locale: formatLocale }), " to", ' ', (0, helpers_1.formatDateLocale)(to.toISOString(), { locale: formatLocale })] }), content.reset] }));
    }
    else if (from) {
        content.header = (0, jsx_runtime_1.jsx)(Paragraph_1.Paragraph, { children: "Select the final date" });
    }
    return ((0, jsx_runtime_1.jsxs)(StyledDatePicker, { "data-component-name": "DatePickerRange", variant: variant, ...(0, helpers_1.omit)(props, 'hidden', 'onSelect'), children: [(0, jsx_runtime_1.jsx)(Box_1.BoxCenter, { mb: "md", minHeight: 30, children: content.header }), (0, jsx_runtime_1.jsx)(react_day_picker_1.DayPicker, { mode: "range", modifiers: modifiers, month: month, numberOfMonths: (0, utils_1.getNumberOfMonths)(fromDate, toDate), onMonthChange: setMonth, onSelect: handleClickSelect, selected: range, ...(0, utils_1.getRange)(fromDate, toDate), ...rest }), content.footer] }));
}
exports.DatePickerRange = DatePickerRange;
DatePickerRange.defaultProps = {
    ...utils_1.defaultProps,
    formatLocale: 'en-US',
    showApply: false,
};
//# sourceMappingURL=Range.js.map