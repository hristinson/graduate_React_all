"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Main = exports.StyledMain = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("@emotion/react");
const styled_1 = require("@emotion/styled");
const is_lite_1 = require("is-lite");
const Box_1 = require("./Box");
const Loader_1 = require("./Loader");
const helpers_1 = require("./modules/helpers");
const system_1 = require("./modules/system");
exports.StyledMain = (0, styled_1.default)(Box_1.Box)(props => {
    const { minHeight = '100vh', padding, responsive } = props;
    const { spacing } = (0, helpers_1.getTheme)(props);
    return (0, react_1.css) `
    display: grid;
    min-height: ${(0, helpers_1.px)(minHeight)};
    padding: ${spacing.md};
    width: 100%;

    ${responsive &&
        is_lite_1.default.nullOrUndefined(padding) &&
        (0, helpers_1.responsive)({
            lg: {
                padding: spacing.xl,
            },
        })};

    // overrides default padding
    ${(0, system_1.paddingStyles)(props, true)};
  `;
});
function Main(props) {
    const { align, centered, children, isLoading, justify, maxWidth, name, textAlign, ...rest } = props;
    const textAlignMap = {
        start: 'left',
        'flex-start': 'left',
        center: 'center',
        end: 'right',
        'flex-end': 'right',
    };
    const shouldCenter = isLoading || centered;
    let textAlignValue = textAlign;
    if (!textAlign) {
        if (centered) {
            textAlignValue = 'center';
        }
        else if (align && (['start', 'center', 'end'].includes(align) || align.startsWith('flex'))) {
            textAlignValue = textAlignMap[align];
        }
    }
    return ((0, jsx_runtime_1.jsx)(exports.StyledMain, { "data-component-name": name, ...rest, children: (0, jsx_runtime_1.jsx)(Box_1.Box, { align: shouldCenter ? 'center' : align, direction: "column", display: shouldCenter || align || justify ? 'flex' : undefined, fill: true, justify: shouldCenter ? 'center' : justify, maxWidth: maxWidth, mx: maxWidth ? 'auto' : undefined, textAlign: textAlignValue, children: isLoading ? (0, jsx_runtime_1.jsx)(Loader_1.Loader, { block: true }) : children }) }));
}
exports.Main = Main;
Main.defaultProps = {
    centered: false,
    isLoading: false,
    minHeight: '100vh',
    name: 'Main',
    responsive: true,
};
//# sourceMappingURL=Main.js.map