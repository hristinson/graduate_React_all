"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Label = exports.StyledLabel = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("@emotion/react");
const styled_1 = require("@emotion/styled");
const is_lite_1 = require("is-lite");
const helpers_1 = require("./modules/helpers");
const system_1 = require("./modules/system");
const Text_1 = require("./Text");
exports.StyledLabel = (0, styled_1.default)('label', (0, system_1.getStyledOptions)())(props => {
    const { inline } = props;
    const { spacing, typography } = (0, helpers_1.getTheme)(props);
    return (0, react_2.css) `
    ${(0, system_1.baseStyles)(props)};
    align-items: center;
    cursor: pointer;
    display: ${inline ? 'inline-flex' : 'flex'};
    font-family: inherit;
    font-size: ${typography.regular.fontSize};
    font-weight: 700;
    line-height: 1;
    ${!inline ? `margin-bottom: ${spacing.sm}` : ''};
    position: relative;
    white-space: nowrap;

    [data-component-name='Text'] {
      line-height: 1;
      margin-left: ${spacing.xxs};
    }
  `;
});
exports.Label = (0, react_1.forwardRef)((props, ref) => {
    const { children, labelId, labelInfo } = props;
    let info;
    if (labelInfo) {
        info = is_lite_1.default.string(labelInfo) ? ((0, jsx_runtime_1.jsx)(Text_1.Text, { size: "mid", variant: "gray", children: labelInfo })) : (labelInfo);
    }
    return ((0, jsx_runtime_1.jsxs)(exports.StyledLabel, { ref: ref, "data-component-name": "Label", ...props, htmlFor: labelId, children: [children, info] }));
});
exports.Label.defaultProps = {
    inline: false,
};
//# sourceMappingURL=Label.js.map