"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MenuItem = exports.StyledMenuItem = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("@emotion/react");
const styled_1 = require("@emotion/styled");
const is_lite_1 = require("is-lite");
const helpers_1 = require("../modules/helpers");
const system_1 = require("../modules/system");
const Paragraph_1 = require("../Paragraph");
exports.StyledMenuItem = (0, styled_1.default)('div', (0, system_1.getStyledOptions)())(props => {
    const { shade, variant = 'primary' } = props;
    const { grayDarker, grayScale, spacing, typography, variants } = (0, helpers_1.getTheme)(props);
    const darkMode = (0, system_1.isDarkMode)(props);
    const themeColor = darkMode ? grayScale['20'] : grayDarker;
    const { bg, color } = (0, helpers_1.getColorVariant)(variant, shade, variants);
    return (0, react_2.css) `
    color: ${themeColor};
    cursor: pointer;
    font-size: ${typography.mid.fontSize};
    transition: background-color 0.3s;

    &:hover,
    &:active {
      background-color: ${bg};
      color: ${color};

      * {
        color: ${color};
      }
    }

    a {
      color: ${themeColor};
      text-decoration: none;
    }

    > * {
      display: flex !important;
      padding: ${spacing.xs} ${spacing.sm} !important;
      white-space: nowrap !important;
      width: 100%;
    }
  `;
});
function MenuItem({ children, closeMenu, onClick, ...rest }) {
    const handleClick = (0, react_1.useCallback)(event => {
        if (!is_lite_1.default.function(children) && closeMenu) {
            closeMenu();
        }
        if (onClick) {
            onClick(event);
        }
    }, [children, closeMenu, onClick]);
    let content = children;
    if (is_lite_1.default.function(children) && closeMenu) {
        content = children({ closeMenu });
    }
    else if (!react_1.Children.toArray(children).every(d => (0, react_1.isValidElement)(d))) {
        content = (0, jsx_runtime_1.jsx)(Paragraph_1.Paragraph, { children: children });
    }
    return ((0, jsx_runtime_1.jsx)(exports.StyledMenuItem, { "data-component-name": "MenuItem", onClick: handleClick, ...rest, children: content }));
}
exports.MenuItem = MenuItem;
//# sourceMappingURL=Item.js.map