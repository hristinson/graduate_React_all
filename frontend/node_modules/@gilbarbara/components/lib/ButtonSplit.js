"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ButtonSplitItem = exports.ButtonSplitDivider = exports.ButtonSplit = exports.StyledButtonSplit = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("@emotion/react");
const styled_1 = require("@emotion/styled");
const ButtonBase_1 = require("./ButtonBase");
const Icon_1 = require("./Icon");
const Menu_1 = require("./Menu");
const helpers_1 = require("./modules/helpers");
const system_1 = require("./modules/system");
exports.StyledButtonSplit = (0, styled_1.default)('div', (0, system_1.getStyledOptions)())(props => {
    const { block, disabled, invert, size = 'md' } = props;
    const { button, grayLight, grayMid, spacing } = (0, helpers_1.getTheme)(props);
    const { borderRadius, fontSize, fontWeight, height, lineHeight, padding } = button;
    const buttonPadding = `${padding[size][0]} ${padding[size][1]}`;
    const styles = (0, system_1.backgroundStyles)(props);
    if (disabled) {
        styles.backgroundColor = grayLight;
        styles.borderColor = grayLight;
        styles.color = grayMid;
    }
    return (0, react_2.css) `
    display: inline-flex;
    min-height: ${height[size]};
    min-width: ${height[size]};
    width: ${block ? '100%' : 'auto'};

    > [data-component-name='ButtonBase'] {
      ${styles};
      border-bottom-left-radius: ${borderRadius[size]};
      border-right: 0;
      border-top-left-radius: ${borderRadius[size]};
      display: flex;
      flex: 1;
      font-size: ${fontSize[size]};
      font-weight: ${fontWeight};
      justify-content: center;
      line-height: ${lineHeight[size]};
      opacity: 1;
      padding: ${buttonPadding};
    }

    > [data-component-name='Menu'] {
      ${styles};
      align-items: center;
      border-left: ${invert ? styles.border : `1px solid ${styles.color}`};
      border-top-right-radius: ${borderRadius[size]};
      border-bottom-right-radius: ${borderRadius[size]};
      display: flex;
    }

    [data-component-name='MenuButton'] {
      height: 100%;
      opacity: 1;
      padding: 0 ${spacing.xs};
      width: 100%;
    }
  `;
});
function ButtonSplit(props) {
    const { busy, children, label, onClick, onToggle, position, ...rest } = props;
    const { disabled, shade, variant } = rest;
    const [active, setActive] = (0, react_1.useState)(false);
    const handleToggle = (0, react_1.useCallback)((status) => {
        setActive(status);
        if (onToggle) {
            onToggle(status);
        }
    }, [onToggle]);
    const buttonProps = {};
    const wrapperProps = {};
    Object.entries(rest).forEach(([key, value]) => {
        if (key.startsWith('data-')) {
            buttonProps[key] = value;
        }
        else {
            wrapperProps[key] = value;
        }
    });
    return ((0, jsx_runtime_1.jsxs)(exports.StyledButtonSplit, { "data-component-name": "ButtonSplit", ...wrapperProps, children: [(0, jsx_runtime_1.jsx)(ButtonBase_1.ButtonBase, { busy: busy, disabled: disabled, onClick: onClick, ...buttonProps, children: label }), (0, jsx_runtime_1.jsx)(Menu_1.Menu, { component: (0, jsx_runtime_1.jsx)(Icon_1.Icon, { name: active ? 'chevron-up' : 'chevron-down', size: 24 }), disabled: disabled || busy, onToggle: handleToggle, position: position, shade: shade, variant: variant, children: children })] }));
}
exports.ButtonSplit = ButtonSplit;
ButtonSplit.defaultProps = {
    block: false,
    busy: false,
    disabled: false,
    invert: false,
    position: 'bottom-right',
    shade: 'mid',
    size: 'md',
    variant: 'primary',
};
var Menu_2 = require("./Menu");
Object.defineProperty(exports, "ButtonSplitDivider", { enumerable: true, get: function () { return Menu_2.MenuDivider; } });
Object.defineProperty(exports, "ButtonSplitItem", { enumerable: true, get: function () { return Menu_2.MenuItem; } });
//# sourceMappingURL=ButtonSplit.js.map