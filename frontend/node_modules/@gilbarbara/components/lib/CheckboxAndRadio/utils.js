"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleKeyDown = exports.getMarginProps = exports.StyledLabel = exports.StyledElement = exports.StyledText = exports.StyledCheckboxRadioInput = void 0;
const react_1 = require("@emotion/react");
const styled_1 = require("@emotion/styled");
const helpers_1 = require("@gilbarbara/helpers");
const helpers_2 = require("../modules/helpers");
const system_1 = require("../modules/system");
exports.StyledCheckboxRadioInput = (0, styled_1.default)('input', (0, system_1.getStyledOptions)()) `
  left: 0;
  opacity: 0;
  position: absolute;
  top: 0;
  z-index: -1;
`;
exports.StyledText = (0, styled_1.default)('span', (0, system_1.getStyledOptions)())(props => {
    const { size } = props;
    const { typography } = (0, helpers_2.getTheme)(props);
    const { fontSize } = typography[size === 'sm' ? 'mid' : 'regular'];
    return (0, react_1.css) `
    font-size: ${fontSize};
  `;
});
exports.StyledElement = (0, styled_1.default)('span', (0, system_1.getStyledOptions)('label'))(props => {
    const { category = 'checkbox', label, size } = props;
    const { colors, grayDark, grayDarker, grayLighter, radius, white } = (0, helpers_2.getTheme)(props);
    const darkMode = (0, system_1.isDarkMode)(props);
    let after;
    let dimensions = 18;
    if (size === 'md') {
        dimensions = 20;
    }
    if (size === 'lg') {
        dimensions = 22;
    }
    if (category === 'checkbox') {
        let height = 4;
        let width = 7;
        if (size === 'md') {
            height = 6;
            width = 9;
        }
        if (size === 'lg') {
            height = 7;
            width = 11;
        }
        after = (0, react_1.css) `
      border-bottom: 2px solid ${colors.primary};
      border-left: 2px solid ${colors.primary};
      height: ${(0, helpers_2.px)(height)};
      transform: rotate(-45deg) translateY(-100%);
      width: ${(0, helpers_2.px)(width)};
    `;
    }
    else {
        let innerDimensions = 6;
        if (size === 'md') {
            innerDimensions = 7;
        }
        if (size === 'lg') {
            innerDimensions = 8;
        }
        after = (0, react_1.css) `
      background-color: ${colors.primary};
      border-radius: 50%;
      height: ${(0, helpers_2.px)(innerDimensions)};
      transform: translate(-50%, -50%);
      width: ${(0, helpers_2.px)(innerDimensions)};
    `;
    }
    return (0, react_1.css) `
    ${(0, system_1.baseStyles)(props)};
    background-color: ${darkMode ? grayDarker : white};
    border: 2px solid ${grayDark};
    border-radius: ${category === 'checkbox' ? radius.xxs : radius.round};
    display: inline-flex;
    flex-shrink: 0;
    height: ${(0, helpers_2.px)(dimensions)};
    margin-right: ${label ? '6px' : '0'};
    overflow: hidden;
    position: relative;
    transition: background-color 0.2s, border-color 0.2s;
    width: ${(0, helpers_2.px)(dimensions)};

    &:focus {
      filter: drop-shadow(0 0 2px ${colors.primary});
      outline: none;
    }

    &:after {
      content: '';
      display: none;
      position: absolute;
      left: 50%;
      top: 50%;
      ${after};
    }

    input:checked ~ & {
      border-color: ${colors.primary};

      &:after {
        display: inline-block;
      }
    }

    input:disabled ~ & {
      cursor: not-allowed;
      opacity: 0.6;
    }

    input:not(:checked):disabled ~ & {
      background-color: ${grayLighter};
    }
  `;
});
exports.StyledLabel = (0, styled_1.default)('label', (0, system_1.getStyledOptions)())(props => {
    const { align, disabled } = props;
    return (0, react_1.css) `
    ${(0, system_1.marginStyles)(props)};
    align-items: ${align};
    cursor: ${disabled ? 'default' : 'pointer'};
    display: flex;
    justify-content: flex-start;
    position: relative;

    &:focus,
    &:hover {
      [data-component-name='Checkbox'],
      [data-component-name='Radio'] {
        &:not(:checked) ~ [data-component-name='Checkbox'],
        &:not(:checked) ~ [data-component-name='Radio'] {
          ${(0, system_1.outlineStyles)(props)};
        }

        &:not(:disabled):checked ~ [data-component-name='Checkbox'],
        &:not(:disabled):checked ~ [data-component-name='Radio'] {
          ${(0, system_1.outlineStyles)(props)};
        }
      }
    }
  `;
});
function getMarginProps(props) {
    return (0, helpers_1.pick)(props, 'margin', 'mb', 'ml', 'mr', 'mt', 'mx', 'my');
}
exports.getMarginProps = getMarginProps;
function handleKeyDown(event) {
    const target = event.target;
    const input = target.previousElementSibling;
    if (!input || input.disabled || ![' ', 'Enter'].includes(event.key)) {
        return;
    }
    input.checked = !input.checked;
}
exports.handleKeyDown = handleKeyDown;
//# sourceMappingURL=utils.js.map