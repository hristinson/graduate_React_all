/// <reference types="react" />
import { ButtonTypes, ComponentProps, StyledProps, WithBlock, WithBusy, WithChildren, WithColor, WithComponentSize, WithInvert, WithPadding, WithTransparent } from './types';
export interface ButtonKnownProps extends StyledProps, WithBlock, WithBusy, WithChildren, WithColor, WithComponentSize, WithInvert, WithPadding, WithTransparent {
    /**
     * A shaped button with equal padding on all sides
     */
    shape?: 'circle' | 'round' | 'square';
    /**
     * The button type
     * @default button
     */
    type?: ButtonTypes;
    /**
     * Double the horizontal padding
     * @default false
     */
    wide?: boolean;
}
export declare type ButtonProps = ComponentProps<HTMLButtonElement, ButtonKnownProps>;
export declare const StyledButton: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
} & ButtonKnownProps & Omit<import("react").HTMLProps<HTMLButtonElement>, "ref" | keyof ButtonKnownProps>, import("react").DetailedHTMLProps<import("react").ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, {}>;
export declare const Button: import("react").ForwardRefExoticComponent<ButtonKnownProps & Omit<import("react").HTMLProps<HTMLButtonElement>, "ref" | keyof ButtonKnownProps> & import("react").RefAttributes<HTMLButtonElement>>;
