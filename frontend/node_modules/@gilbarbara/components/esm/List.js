import { jsx as _jsx } from "react/jsx-runtime";
import { forwardRef } from 'react';
import { css } from '@emotion/react';
import styled from '@emotion/styled';
import is from 'is-lite';
import { getColorVariant, getTheme } from './modules/helpers';
import { baseStyles, borderStyles, flexItemStyles, getStyledOptions, layoutStyles, marginStyles, radiusStyles, shadowStyles, } from './modules/system';
function getSpacing(size, spacing) {
    switch (size) {
        case 'sm': {
            return [spacing.xs, spacing.sm];
        }
        case 'lg': {
            return [spacing.md, spacing.lg];
        }
        default: {
            return [spacing.sm, spacing.md];
        }
    }
}
export const StyledList = styled('ul', getStyledOptions())(props => {
    const { border, direction, shade, variant } = props;
    const borderProps = { ...props };
    if (border === true && (shade !== 'lighter' || variant !== 'gray')) {
        borderProps.border = [{ side: 'all', shade, variant }];
    }
    return css `
    ${baseStyles(props)};
    display: flex;
    flex-direction: ${direction === 'horizontal' ? 'row' : 'column'};
    list-style-position: inside;
    list-style-type: none;
    margin: 0;
    overflow: hidden;
    padding: 0;
    ${borderStyles(borderProps)};
    ${flexItemStyles(props)};
    ${layoutStyles(props)};
    ${marginStyles(props)};
    ${radiusStyles(props)};
    ${shadowStyles(props)};
  `;
});
export const StyledListItem = styled('li', getStyledOptions())(props => {
    const { black, spacing, variants, white } = getTheme(props);
    const { border, direction, itemShade, itemVariant, shade = 'lighter', size, split, variant = 'gray', } = props;
    const [spacerMain, spacerCross] = getSpacing(size, spacing);
    let bgColor = white;
    let itemColor = black;
    let { bg: borderColor } = getColorVariant(variant, shade, variants);
    if (itemVariant) {
        const { bg, color } = getColorVariant(itemVariant, itemShade, variants);
        bgColor = bg;
        borderColor = bg;
        itemColor = color;
    }
    return css `
    background-color: ${bgColor};
    color: ${itemColor};

    ${direction === 'vertical' &&
        css `
      border-bottom: ${split ? `1px solid ${borderColor}` : undefined};
      padding: ${spacerMain} ${border ? spacerCross : 0};

      &:last-of-type {
        border-bottom: none;
      }
    `};

    ${direction === 'horizontal' &&
        css `
      border-right: ${split ? `1px solid ${borderColor}` : undefined};
      padding: ${border ? spacerMain : 0} ${spacerCross};

      &:last-of-type {
        border-right: none;
      }
    `};
  `;
});
function isListItem(item) {
    return is.plainObject(item) && 'content' in item;
}
export const List = forwardRef((props, ref) => {
    const { border = true, direction = 'vertical', items, shade = 'lighter', size = 'md', split = true, variant = 'gray', } = props;
    if (!items.length) {
        return null;
    }
    return (_jsx(StyledList, { ref: ref, "data-component-name": "List", ...props, children: items.map((item, index) => {
            const key = `ListItem-${index}`;
            let content;
            let itemShade;
            let itemVariant;
            if (isListItem(item)) {
                content = item.content;
                itemShade = item.shade;
                itemVariant = item.variant;
            }
            else {
                content = item;
            }
            return (_jsx(StyledListItem, { border: border, direction: direction, itemShade: itemShade, itemVariant: itemVariant, shade: shade, size: size, split: split, variant: variant, children: content }, key));
        }) }));
});
List.defaultProps = {
    border: true,
    direction: 'vertical',
    radius: 'xs',
    shade: 'lighter',
    shadow: false,
    size: 'md',
    split: true,
    variant: 'gray',
};
//# sourceMappingURL=List.js.map