import { ReactNode } from 'react';
import { ComponentProps, Direction, ListItem, StyledProps, Variants, WithBorder, WithColor, WithFlexItem, WithLayout, WithMargin, WithRadius, WithShadow } from './types';
export interface ListKnownProps extends StyledProps, WithBorder, WithColor, WithFlexItem, WithLayout, WithMargin, WithRadius, WithShadow {
    /** @default vertical */
    direction?: Direction;
    items: (ListItem | ReactNode)[];
    /** @default md */
    size?: 'sm' | 'md' | 'lg';
    /** @default true */
    split?: boolean;
}
export declare type ListProps = ComponentProps<HTMLUListElement, ListKnownProps>;
export declare const StyledList: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
} & ListKnownProps & Omit<import("react").HTMLProps<HTMLUListElement>, "ref" | keyof ListKnownProps>, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLUListElement>, HTMLUListElement>, {}>;
export declare const StyledListItem: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
} & Required<Pick<ListProps, "size" | "direction" | "shade" | "variant" | "border" | "split">> & {
    itemShade?: "mid" | "lightest" | "lighter" | "light" | "dark" | "darker" | "darkest" | undefined;
    itemVariant?: Variants | undefined;
}, import("react").DetailedHTMLProps<import("react").LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>, {}>;
export declare const List: import("react").ForwardRefExoticComponent<ListKnownProps & Omit<import("react").HTMLProps<HTMLUListElement>, "ref" | keyof ListKnownProps> & import("react").RefAttributes<HTMLUListElement>>;
