import { jsx as _jsx } from "react/jsx-runtime";
import { useCallback, useEffect, useState } from 'react';
import { usePrevious } from 'react-use';
import { css } from '@emotion/react';
import styled from '@emotion/styled';
import { Radio } from './CheckboxAndRadio';
import { getTheme } from './modules/helpers';
import { getStyledOptions } from './modules/system';
const StyledRadioGroup = styled('div', getStyledOptions())(props => {
    const { inline } = props;
    const { spacing } = getTheme(props);
    return css `
    display: flex;
    flex-direction: ${inline ? 'row' : 'column'};

    ${inline &&
        css `
      margin-top: 0;

      [data-component-name='Radio'] + [data-component-name='Radio'] {
        margin-left: ${spacing.xs};
      }
    `};
  `;
});
export function RadioGroup(props) {
    const { defaultValue, disabled, inline, items, name, onChange, size, value, ...rest } = props;
    const [selectedValue, setSelectedValue] = useState(value ?? defaultValue);
    const previousProps = usePrevious(props);
    useEffect(() => {
        if (previousProps && value && previousProps.value !== value) {
            setSelectedValue(value);
        }
    }, [previousProps, value]);
    const handleChange = useCallback(({ target }) => {
        const numericValue = Number(target.value);
        const currentValue = !Number.isNaN(numericValue) ? numericValue : target.value;
        /* istanbul ignore else */
        if (onChange) {
            onChange(currentValue);
        }
        if (!value && !disabled) {
            setSelectedValue(currentValue);
        }
    }, [disabled, onChange, value]);
    if (!items || !items.length) {
        return null;
    }
    const currentValue = !!value && value !== selectedValue ? value : selectedValue;
    return (_jsx(StyledRadioGroup, { inline: inline, ...rest, "data-component-name": "RadioGroup", role: "radiogroup", children: items.map(d => (_jsx(Radio, { align: "start", checked: d.value === currentValue, disabled: disabled || d.disabled, label: d.label || d.value, mb: "xxs", name: name, onChange: handleChange, size: size, type: "radio", value: d.value }, d.value))) }));
}
RadioGroup.defaultProps = {
    disabled: false,
    inline: false,
    size: 'md',
};
//# sourceMappingURL=RadioGroup.js.map