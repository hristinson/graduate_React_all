import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef, useState } from 'react';
import { css, useTheme } from '@emotion/react';
import styled from '@emotion/styled';
import is from 'is-lite';
import { Box } from './Box';
import { getTheme, px } from './modules/helpers';
import { getStyledOptions } from './modules/system';
import { Text } from './Text';
const StyledColorGroup = styled('div', getStyledOptions())(props => {
    const { height, width } = props;
    const innerHeight = (is.string(height) ? parseInt(height, 10) : height) + 16;
    const innerWidth = (is.string(width) ? parseInt(width, 10) : width) + 16;
    return css `
    align-items: center;
    display: flex;

    [data-component-name='Text'] {
      min-width: 75px;
    }

    input {
      appearance: none;
      -moz-appearance: none;
      -webkit-appearance: none;
      background: none;
      border: 0;
      cursor: pointer;
      height: ${px(innerHeight)};
      margin: -8px;
      padding: 0;
      width: ${px(innerWidth)};
    }
  `;
});
export const InputColor = forwardRef((props, ref) => {
    const { spacing } = getTheme({ theme: useTheme() });
    const { height = spacing.xl, name, onChange, value, width = spacing.xl, ...rest } = props;
    const [localValue, setLocalValue] = useState('');
    const handleChange = (event) => {
        setLocalValue(event.target.value);
        if (onChange) {
            onChange(event);
        }
    };
    return (_jsxs(StyledColorGroup, { "data-component-name": "InputColor", height: height, width: width, children: [_jsx(Box, { height: height, mr: "xs", overflow: "hidden", width: width, children: _jsx("input", { ref: ref, id: name, name: name, onChange: handleChange, type: "color", ...rest }) }), _jsx(Text, { children: value || localValue })] }));
});
InputColor.defaultProps = {
    disabled: false,
    height: '32px',
    readOnly: false,
    width: '32px',
};
//# sourceMappingURL=InputColor.js.map