import { jsx as _jsx } from "react/jsx-runtime";
import { Children, forwardRef, isValidElement } from 'react';
import { css } from '@emotion/react';
import styled from '@emotion/styled';
import { getTheme } from './modules/helpers';
import { baseStyles, borderStyles, flexItemStyles, getStyledOptions, layoutStyles, marginStyles, paddingStyles, radiusStyles, shadowStyles, } from './modules/system';
export const StyledSpacer = styled('div', getStyledOptions('fill'))(props => {
    const { direction, distribution, verticalAlign, wrap } = props;
    const isHorizontal = direction === 'horizontal';
    let distributionStyles;
    if (distribution) {
        distributionStyles = css `
      justify-content: ${isHorizontal ? distribution : verticalAlign};
    `;
    }
    return css `
    ${baseStyles(props)};
    align-items: ${isHorizontal ? verticalAlign : distribution};
    display: flex;
    flex-direction: ${direction === 'vertical' ? 'column' : 'row'};
    flex-wrap: ${wrap ? 'wrap' : 'nowrap'};
    ${distributionStyles};
    ${borderStyles(props)};
    ${flexItemStyles(props)};
    ${layoutStyles(props)};
    ${marginStyles(props)};
    ${paddingStyles(props)};
    ${radiusStyles(props)};
    ${shadowStyles(props)};
  `;
});
const StyledSpacerItem = styled('div', getStyledOptions('fill'))(props => {
    const { direction, flex, gap = 'sm', gapVertical, grow } = props;
    const { spacing } = getTheme(props);
    const isHorizontal = direction === 'horizontal';
    return css `
    display: ${isHorizontal ? 'flex' : 'block'};
    flex: ${flex};
    margin-bottom: ${gapVertical ? spacing[gapVertical] : undefined};
    width: ${!isHorizontal && grow ? '100%' : 'auto'};

    &:not(:last-of-type) {
      margin-right: ${isHorizontal ? spacing[gap] : undefined};
      margin-bottom: ${!isHorizontal ? spacing[gap] : undefined};
    }
  `;
});
/**
 * You can use a "data-flex" property on the children to grow or shrink to fit the space available.
 */
export const Spacer = forwardRef((props, ref) => {
    const { children, ...rest } = props;
    const nodes = Children.toArray(children).map((child, index) => {
        const key = `SpacerItem-${index}`;
        const flex = isValidElement(child) ? child.props['data-flex'] : undefined;
        return (_jsx(StyledSpacerItem, { flex: flex, ...rest, "data-component-name": "SpacerItem", children: child }, key));
    });
    return (_jsx(StyledSpacer, { ref: ref, "data-component-name": "Spacer", ...rest, children: nodes }));
});
Spacer.defaultProps = {
    direction: 'horizontal',
    distribution: 'start',
    gap: 'sm',
    grow: false,
    radius: false,
    shadow: false,
    verticalAlign: 'center',
    wrap: true,
};
//# sourceMappingURL=Spacer.js.map