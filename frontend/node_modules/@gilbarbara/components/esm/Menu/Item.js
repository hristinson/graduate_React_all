import { jsx as _jsx } from "react/jsx-runtime";
import { Children, isValidElement, useCallback } from 'react';
import { css } from '@emotion/react';
import styled from '@emotion/styled';
import is from 'is-lite';
import { getColorVariant, getTheme } from '../modules/helpers';
import { getStyledOptions, isDarkMode } from '../modules/system';
import { Paragraph } from '../Paragraph';
export const StyledMenuItem = styled('div', getStyledOptions())(props => {
    const { shade, variant = 'primary' } = props;
    const { grayDarker, grayScale, spacing, typography, variants } = getTheme(props);
    const darkMode = isDarkMode(props);
    const themeColor = darkMode ? grayScale['20'] : grayDarker;
    const { bg, color } = getColorVariant(variant, shade, variants);
    return css `
    color: ${themeColor};
    cursor: pointer;
    font-size: ${typography.mid.fontSize};
    transition: background-color 0.3s;

    &:hover,
    &:active {
      background-color: ${bg};
      color: ${color};

      * {
        color: ${color};
      }
    }

    a {
      color: ${themeColor};
      text-decoration: none;
    }

    > * {
      display: flex !important;
      padding: ${spacing.xs} ${spacing.sm} !important;
      white-space: nowrap !important;
      width: 100%;
    }
  `;
});
export function MenuItem({ children, closeMenu, onClick, ...rest }) {
    const handleClick = useCallback(event => {
        if (!is.function(children) && closeMenu) {
            closeMenu();
        }
        if (onClick) {
            onClick(event);
        }
    }, [children, closeMenu, onClick]);
    let content = children;
    if (is.function(children) && closeMenu) {
        content = children({ closeMenu });
    }
    else if (!Children.toArray(children).every(d => isValidElement(d))) {
        content = _jsx(Paragraph, { children: children });
    }
    return (_jsx(StyledMenuItem, { "data-component-name": "MenuItem", onClick: handleClick, ...rest, children: content }));
}
//# sourceMappingURL=Item.js.map