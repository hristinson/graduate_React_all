import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { css } from '@emotion/react';
import styled from '@emotion/styled';
import { omit } from '@gilbarbara/helpers';
import { Box } from './Box';
import { H1, H2, H3 } from './Headings';
import { Icon } from './Icon';
import { backgroundStyles, baseStyles, borderStyles, flexItemStyles, getStyledOptions, layoutStyles, marginStyles, paddingStyles, radiusStyles, shadowStyles, } from './modules/system';
import { Paragraph } from './Paragraph';
export const StyledNonIdealState = styled('div', getStyledOptions('type'))(props => {
    const { direction } = props;
    return css `
    ${direction === 'horizontal' ? 'align-items: center;' : ''};
    display: ${direction === 'horizontal' ? 'flex' : 'block'};
    margin: 0 auto;
    text-align: ${direction === 'horizontal' ? 'left' : 'center'};
    width: 100%;
    ${baseStyles(props)};
    ${backgroundStyles(props, false)};
    ${borderStyles(props)};
    ${flexItemStyles(props)};
    ${layoutStyles(props)};
    ${marginStyles(props)};
    ${paddingStyles(props)};
    ${radiusStyles(props)};
    ${shadowStyles(props)};
  `;
});
export function NonIdealState(props) {
    const { children, description, direction, hideIcon, icon, size = 'md', title, type } = props;
    const iconSize = {
        sm: 48,
        md: 64,
        lg: 96,
    };
    const isVertical = direction === 'vertical';
    const template = {};
    const output = {};
    switch (type) {
        case 'error': {
            template.icon = _jsx(Icon, { name: "danger", size: iconSize[size] });
            template.title = 'Something went wrong';
            template.description = 'An unexpected error has occurred. Try reloading the page.';
            break;
        }
        case 'no-results': {
            template.icon = _jsx(Icon, { name: "search", size: iconSize[size] });
            template.title = 'No search results';
            template.description = "Your search didn't match anything.";
            break;
        }
        case 'not-found': {
            template.icon = _jsx(Icon, { name: "smile-none", size: iconSize[size] });
            template.title = 'Page not found';
            template.description = "We are sorry, but the page you requested doesn't exist.";
            break;
        }
        case 'offline': {
            template.icon = _jsx(Icon, { name: "arrows-exchange-alt-v", size: iconSize[size] });
            template.title = 'No connection';
            template.description = 'Please check our internet connection and try again.';
            break;
        }
    }
    if (!hideIcon && (icon || template.icon)) {
        output.icon = (_jsx(Box, { align: "center", flexBox: true, justify: "center", children: icon ? _jsx(Icon, { name: icon, size: iconSize[size] }) : template.icon }));
    }
    if (title !== null && (title || template.title)) {
        const content = title || template.title;
        switch (size) {
            case 'sm': {
                output.title = _jsx(H3, { mb: 0, children: content });
                break;
            }
            case 'md': {
                output.title = _jsx(H2, { mb: 0, children: content });
                break;
            }
            default: {
                output.title = _jsx(H1, { mb: 0, children: content });
                break;
            }
        }
    }
    if (description !== null && (description || template.description)) {
        output.description = (_jsx(Paragraph, { mt: output.title ? 'xxs' : undefined, children: description || template.description }));
    }
    if (children) {
        output.content = (_jsx(Box, { mt: output.title || output.description ? 'xl' : undefined, children: children }));
    }
    return (_jsxs(StyledNonIdealState, { "data-component-name": "NonIdealState", ...omit(props, 'title', 'type'), children: [output.icon, _jsxs(Box, { ml: !isVertical ? 'xs' : undefined, mt: isVertical && output.icon ? 'sm' : undefined, children: [output.title, output.description] }), output.content] }));
}
NonIdealState.defaultProps = {
    direction: 'vertical',
    hideIcon: false,
    maxWidth: '600px',
    padding: 'md',
    radius: false,
    shadow: false,
    size: 'md',
    type: 'not-found',
};
//# sourceMappingURL=NonIdealState.js.map