import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useCallback } from 'react';
import { css, useTheme } from '@emotion/react';
import styled from '@emotion/styled';
import { Box } from './Box';
import { ButtonBase } from './ButtonBase';
import { H3 } from './Headings';
import { Icon } from './Icon';
import { getTheme, px } from './modules/helpers';
import { borderStyles, getStyledOptions, isDarkMode, paddingStyles, radiusStyles, shadowStyles, } from './modules/system';
import { Portal } from './Portal';
const StyledModal = styled('div', getStyledOptions())(props => {
    const { maxWidth, width } = props;
    const { black, darkColor, white } = getTheme(props);
    const darkMode = isDarkMode(props);
    return css `
    background-color: ${darkMode ? darkColor : white};
    color: ${darkMode ? white : black};
    max-width: ${px(maxWidth)};
    width: ${width ? px(width) : 'auto'};
    ${borderStyles(props)};
    ${paddingStyles(props)};
    ${radiusStyles(props)};
    ${shadowStyles(props)};
  `;
});
const StyledModalContent = styled('div', getStyledOptions())(props => {
    const { maxHeight, padding } = props;
    const { spacing } = getTheme(props);
    return css `
    margin: 0 -${padding ? spacing[padding] : padding};
    padding: 0 ${padding ? spacing[padding] : padding};
    max-height: ${px(maxHeight)};
    overflow-y: auto;
  `;
});
export function Modal(props) {
    const { children, closeOnClickOverlay, closeOnEsc, hideCloseButton, hideOverlay, isActive, maxHeight = '80vh', onClose, onOpen, style, title, zIndex, ...rest } = props;
    const { padding = 'lg' } = rest;
    const { black, darkMode, white } = getTheme({ theme: useTheme() });
    const handlePortalClose = useCallback(() => {
        if (onClose) {
            onClose();
        }
    }, [onClose]);
    let header;
    if (!hideCloseButton || title) {
        header = (_jsxs(Box, { align: "center", display: "flex", justify: title ? 'space-between' : 'flex-end', mb: "md", children: [title && _jsx(H3, { style: { marginBottom: 0 }, children: title }), !hideCloseButton && (_jsx(ButtonBase, { onClick: onClose, children: _jsx(Icon, { color: darkMode ? white : black, name: "close", size: 26 }) }))] }));
    }
    return (_jsx(Portal, { closeOnClickOverlay: closeOnClickOverlay, closeOnEsc: closeOnEsc, hideOverlay: hideOverlay, isActive: isActive, onClose: handlePortalClose, onOpen: onOpen, zIndex: zIndex, children: _jsxs(StyledModal, { "data-component-name": "Modal", ...rest, style: style, children: [header, _jsx(StyledModalContent, { maxHeight: maxHeight, padding: padding, children: children })] }) }));
}
Modal.defaultProps = {
    closeOnClickOverlay: true,
    closeOnEsc: true,
    hideCloseButton: false,
    hideOverlay: false,
    maxHeight: '80vh',
    maxWidth: '100vw',
    padding: 'lg',
    radius: 'lg',
    shadow: 'high',
    zIndex: 1000,
};
//# sourceMappingURL=Modal.js.map