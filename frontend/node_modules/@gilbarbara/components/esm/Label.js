import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef } from 'react';
import { css } from '@emotion/react';
import styled from '@emotion/styled';
import is from 'is-lite';
import { getTheme } from './modules/helpers';
import { baseStyles, getStyledOptions } from './modules/system';
import { Text } from './Text';
export const StyledLabel = styled('label', getStyledOptions())(props => {
    const { inline } = props;
    const { spacing, typography } = getTheme(props);
    return css `
    ${baseStyles(props)};
    align-items: center;
    cursor: pointer;
    display: ${inline ? 'inline-flex' : 'flex'};
    font-family: inherit;
    font-size: ${typography.regular.fontSize};
    font-weight: 700;
    line-height: 1;
    ${!inline ? `margin-bottom: ${spacing.sm}` : ''};
    position: relative;
    white-space: nowrap;

    [data-component-name='Text'] {
      line-height: 1;
      margin-left: ${spacing.xxs};
    }
  `;
});
export const Label = forwardRef((props, ref) => {
    const { children, labelId, labelInfo } = props;
    let info;
    if (labelInfo) {
        info = is.string(labelInfo) ? (_jsx(Text, { size: "mid", variant: "gray", children: labelInfo })) : (labelInfo);
    }
    return (_jsxs(StyledLabel, { ref: ref, "data-component-name": "Label", ...props, htmlFor: labelId, children: [children, info] }));
});
Label.defaultProps = {
    inline: false,
};
//# sourceMappingURL=Label.js.map