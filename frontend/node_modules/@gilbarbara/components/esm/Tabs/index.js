import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Children, isValidElement, useEffect, useRef, } from 'react';
import { useMeasure, useSetState } from 'react-use';
import { css } from '@emotion/react';
import styled from '@emotion/styled';
import { omit, unique } from '@gilbarbara/helpers';
import { Tab } from './Tab';
import { ButtonBase } from '../ButtonBase';
import { Loader } from '../Loader';
import { getColorVariant, getTheme, px } from '../modules/helpers';
import { getStyledOptions, isDarkMode, marginStyles } from '../modules/system';
import { NonIdealState } from '../NonIdealState';
const StyledTabs = styled('div', getStyledOptions())(props => {
    const { direction } = props;
    return css `
    display: ${direction === 'vertical' ? 'block' : 'flex'};
    ${marginStyles(props)};
  `;
});
const StyledMenu = styled('div', getStyledOptions())(props => {
    const { direction, width } = props;
    const { grayLighter, spacing } = getTheme(props);
    const isHorizontal = direction === 'horizontal';
    const isVertical = direction === 'vertical';
    return css `
    align-items: flex-start;
    display: flex;
    flex-direction: ${isVertical ? 'row' : 'column'};
    margin-bottom: ${isVertical ? spacing.md : undefined};
    margin-right: ${isHorizontal ? spacing.md : undefined};
    max-width: ${width ? px(width) : undefined};
    overflow: ${isVertical ? 'auto hidden' : undefined};
    position: relative;

    &:before {
      border-bottom: ${isVertical ? `1px solid ${grayLighter}` : undefined};
      border-right: ${isHorizontal ? `1px solid ${grayLighter}` : undefined};
      bottom: 0;
      content: '';
      left: ${isVertical ? 0 : undefined};
      position: absolute;
      right: ${isHorizontal ? '-1px' : 0};
      top: ${isHorizontal ? 0 : undefined};
    }
  `;
});
const StyledMenuItem = styled(ButtonBase, getStyledOptions('disabled'))(props => {
    const { direction, disableActiveBorderRadius, disabled, isActive, shade, variant = 'primary', } = props;
    const { grayDarker, grayMid, grayScale, spacing, variants } = getTheme(props);
    const darkMode = isDarkMode(props);
    const { bg } = getColorVariant(variant, shade, variants);
    let color = darkMode ? grayScale['20'] : grayDarker;
    const isVertical = direction === 'vertical';
    const isHorizontal = direction === 'horizontal';
    if (disabled) {
        color = grayMid;
    }
    else if (isActive) {
        color = bg;
    }
    return css `
    color: ${disabled ? grayMid : color};
    cursor: ${disabled ? 'not-allowed' : 'pointer'};
    line-height: 1;
    padding: ${spacing.xs} ${spacing.md};
    position: relative;
    width: ${isHorizontal ? '100%' : undefined};
    white-space: nowrap;

    ${isActive &&
        css `
      &:before {
        background-color: ${bg};
        bottom: ${isVertical ? '-1px' : 0};
        content: '';
        display: block;
        height: ${isVertical ? '3px' : undefined};
        left: ${isVertical ? 0 : undefined};
        position: absolute;
        right: ${isHorizontal ? '-1px' : 0};
        top: ${isHorizontal ? 0 : undefined};
        width: ${isHorizontal ? '3px' : undefined};

        ${!disableActiveBorderRadius &&
            css `
          border-top-left-radius: 3px;
          border-top-right-radius: ${isVertical ? '3px' : undefined};
          border-bottom-left-radius: ${isHorizontal ? '3px' : undefined};
        `};
      }
    `}
  `;
});
const StyledContent = styled('div', getStyledOptions())(props => {
    const { maxHeight, minHeight } = props;
    return css `
    max-height: ${maxHeight ? px(maxHeight) : undefined};
    min-height: ${minHeight ? px(minHeight) : undefined};
    overflow-y: auto;
  `;
});
export function Tabs(props) {
    const { children, initialId = '', loader, maxHeight, minHeight, noContent, onClick, shade, variant, ...rest } = props;
    const [{ activeId, error, isReady, tabs, width }, setState] = useSetState({
        activeId: initialId,
        error: false,
        isReady: false,
        tabs: [],
        width: null,
    });
    const isMounted = useRef(false);
    const uniqueId = useRef(unique(6));
    const [ref, measurements] = useMeasure();
    useEffect(() => {
        isMounted.current = true;
        return () => {
            isMounted.current = false;
        };
    }, []);
    useEffect(() => {
        const nextState = {
            error: false,
            isReady: true,
            tabs: [],
        };
        Children.forEach(children, (child, index) => {
            if (!isValidElement(child)) {
                return;
            }
            if (child.type === Tab) {
                nextState.tabs.push(omit(child.props, 'children'));
                if (!activeId && index === 0) {
                    nextState.activeId = child.props.id;
                }
            }
            else {
                nextState.error = true;
                // eslint-disable-next-line no-console
                console.warn('Invalid children detected. Only the Tab component is allowed.');
            }
        });
        setState(nextState);
    }, [activeId, children, setState]);
    useEffect(() => {
        if (measurements.width && measurements.width !== width) {
            setState({ width: measurements.width });
        }
    }, [measurements, setState, width]);
    const handleClickItem = (event) => {
        const { disabled, id = '' } = event.currentTarget.dataset;
        if (activeId === id || disabled === 'true') {
            return;
        }
        setState({ activeId: id });
        if (onClick) {
            onClick(id);
        }
    };
    if (error) {
        return null;
    }
    const content = {};
    if (isReady) {
        if (tabs.length) {
            if (width || rest.direction === 'horizontal') {
                content.menu = (_jsx(StyledMenu, { "data-component-name": "TabsMenu", direction: rest.direction, role: "tablist", width: width, children: tabs.map(d => (_jsx(StyledMenuItem, { "aria-controls": `panel-${uniqueId.current}-${d.id}`, "aria-selected": d.id === activeId, "data-component-name": "TabsMenuItem", "data-disabled": !!d.disabled, "data-id": d.id, direction: rest.direction, disableActiveBorderRadius: rest.disableActiveBorderRadius, disabled: !!d.disabled, isActive: d.id === activeId, onClick: handleClickItem, role: "tab", shade: shade, variant: variant, children: d.title }, d.id))) }));
            }
            content.main = (_jsx(StyledContent, { "data-component-name": "TabsContent", maxHeight: maxHeight, minHeight: minHeight, children: Children.toArray(children)
                    .filter(d => isValidElement(d) && d.props.id === activeId)
                    .map(d => isValidElement(d) && (_jsx("div", { "data-component-name": "TabsPanel", id: `panel-${uniqueId.current}-${d.props.id}`, role: "tabpanel", children: d.props.children }, d.props.id))) }));
        }
        else {
            content.main = noContent || (_jsx(NonIdealState, { description: "Content not available", icon: "danger", size: "sm" }));
        }
    }
    else {
        content.main = loader || _jsx(Loader, {});
    }
    return (_jsxs(StyledTabs, { "data-component-name": "Tabs", ...rest, children: [rest.direction === 'vertical' && _jsx("div", { ref: ref }), content.menu, content.main] }));
}
Tabs.defaultProps = {
    direction: 'vertical',
    disableActiveBorderRadius: false,
    shade: 'mid',
    variant: 'primary',
};
export { Tab } from './Tab';
//# sourceMappingURL=index.js.map