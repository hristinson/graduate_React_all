import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useSetState } from 'react-use';
import { css } from '@emotion/react';
import styled from '@emotion/styled';
import { formatDateLocale, omit } from '@gilbarbara/helpers';
import is from 'is-lite';
import { DatePickerRange } from './Range';
import { DatePicker } from './Single';
import { defaultProps, getNumberOfMonths } from './utils';
import { Box } from '../Box';
import { ClickOutside } from '../ClickOutside';
import { Icon } from '../Icon';
import { getColorVariant, getTheme, px } from '../modules/helpers';
import { getStyledOptions, isDarkMode } from '../modules/system';
import { Text } from '../Text';
const StyledButton = styled('div', getStyledOptions())(props => {
    const { borderless, isFilled, large, variant = 'primary', width } = props;
    const { darkColor, grayDark, grayDarker, grayMid, inputHeight, lightColor, radius, spacing, variants, white, } = getTheme(props);
    const darkMode = isDarkMode(props);
    const { bg } = getColorVariant(variant, 'mid', variants);
    let borderColor = darkMode ? grayDark : grayMid;
    let textColor = grayMid;
    if (isFilled) {
        borderColor = bg;
        textColor = darkMode ? lightColor : darkColor;
    }
    const styles = borderless
        ? css `
        border: 0 !important;
        border-bottom: 1px solid ${borderColor} !important;
        border-radius: 0 !important;
        padding: ${spacing.xxs} 0 !important;
      `
        : css `
        border: 1px solid ${borderColor};
        border-radius: ${radius.xs};
        padding: 0 ${spacing.md} !important;
      `;
    return css `
    align-items: center;
    background-color: ${darkMode ? grayDarker : white};
    color: ${textColor};
    cursor: pointer;
    display: flex;
    justify-content: space-between;
    min-height: ${large ? inputHeight.large : inputHeight.normal};
    min-width: 240px;
    width: ${width ? px(width) : 'auto'};
    ${styles};
  `;
});
const StyledContent = styled('div', getStyledOptions())(props => {
    const { isActive, position, wide } = props;
    const { grayDarker, radius, shadow, spacing, white } = getTheme(props);
    const darkMode = isDarkMode(props);
    let left = position === 'left' ? 0 : 'auto';
    let translateX = '';
    if (position === 'center') {
        left = '50%';
        translateX = ' translateX(-50%)';
    }
    return css `
    background-color: ${darkMode ? grayDarker : white};
    border-radius: ${radius.xxs};
    box-shadow: ${shadow.mid};
    display: flex;
    flex-direction: column;
    justify-content: center;
    left: ${left};
    margin-top: ${spacing.xs};
    min-width: ${px(wide ? 600 : 300)};
    overflow-y: auto;
    padding: ${spacing.md};
    position: absolute;
    right: ${position === 'right' ? 0 : 'auto'};
    top: 100%;
    transform-origin: top;
    transform: ${`scaleY(0)${translateX}`};
    transition: transform 0.3s;
    z-index: 100;

    ${isActive &&
        css `
      transform: ${`scaleY(1)${translateX}`};
    `}
  `;
});
export function DatePickerInput(props) {
    const { borderless, large, onSelect, open, placeholder, position = 'right', separator = ' — ', showRange = false, showRangeApply, width, ...rest } = props;
    const [{ isActive, isFilled, selected }, setState] = useSetState({
        isActive: open || false,
        isFilled: false,
        selected: showRange ? [undefined, undefined] : '',
    });
    const toggle = () => {
        if (is.boolean(open)) {
            return;
        }
        setState(s => ({ isActive: !s.isActive }));
    };
    const handleApply = (isoDate) => {
        if (onSelect) {
            onSelect(isoDate);
        }
        toggle();
    };
    const handleSelect = (isoDate) => {
        setState({
            isFilled: is.array(isoDate) ? isoDate.some(Boolean) : !!isoDate,
            selected: isoDate,
        });
        if (onSelect && !showRangeApply) {
            onSelect(isoDate);
        }
        if (!showRangeApply &&
            ((is.array(isoDate) && isoDate.every(Boolean)) || (!is.array(isoDate) && isoDate))) {
            toggle();
        }
    };
    const picker = showRange ? (_jsx(DatePickerRange, { ...rest, onApply: handleApply, onSelect: handleSelect, showApply: showRangeApply })) : (_jsx(DatePicker, { ...rest, onSelect: handleSelect }));
    let title = showRange ? 'Select a date range' : 'Select a date';
    if (placeholder) {
        title = placeholder;
    }
    if (is.array(selected) && selected.some(Boolean)) {
        const dates = selected.reduce((acc, d, index) => {
            acc.push(d ? formatDateLocale(d) : '???');
            if (index === 0) {
                acc.push(separator);
            }
            return acc;
        }, []);
        title = _jsx(Text, { children: dates.map(d => d) });
    }
    else if (!is.array(selected) && selected) {
        title = formatDateLocale(selected);
    }
    const numberOfMonths = getNumberOfMonths(rest.fromDate, rest.toDate);
    return (_jsx(Box, { "data-component-name": "DatePickerInput", position: "relative", children: _jsxs(ClickOutside, { active: isActive, onClick: toggle, children: [_jsxs(StyledButton, { "data-component-name": "DatePickerInputButton", isFilled: isFilled, onClick: toggle, ...omit(props, 'onSelect'), children: [title, _jsx(Icon, { name: "calendar" })] }), _jsx(StyledContent, { "data-component-name": "DatePickerInputContent", isActive: isActive, position: position, wide: showRange && numberOfMonths > 1, children: picker })] }) }));
}
DatePickerInput.defaultProps = {
    ...defaultProps,
    borderless: false,
    formatLocale: 'en-US',
    large: false,
    position: 'right',
    separator: ' — ',
    showRange: false,
    showRangeApply: false,
    variant: 'primary',
    width: 'auto',
};
//# sourceMappingURL=Input.js.map