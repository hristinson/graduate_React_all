import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from 'react';
import { DayPicker, } from 'react-day-picker';
import { useTheme } from '@emotion/react';
import styled from '@emotion/styled';
import { formatDateLocale, omit } from '@gilbarbara/helpers';
import { defaultProps, getFooter, getNumberOfMonths, getRange, getStyles } from './utils';
import { BoxCenter } from '../Box';
import { Button } from '../Button';
import { getTheme } from '../modules/helpers';
import { getStyledOptions } from '../modules/system';
import { Paragraph } from '../Paragraph';
import { Spacer } from '../Spacer';
import { Text } from '../Text';
const StyledDatePicker = styled('div', getStyledOptions('onApply'))(props => {
    return getStyles(props);
});
export function DatePickerRange(props) {
    const { currentMonthLabel, formatLocale, fromDate, onApply, onSelect, showApply, toDate, variant, ...rest } = props;
    const [month, setMonth] = useState(undefined);
    const [range, setRange] = useState(undefined);
    const { radius, spacing } = getTheme({ theme: useTheme() });
    const handleClickSelect = selectedRange => {
        setRange(selectedRange);
        if (onSelect) {
            onSelect([
                selectedRange?.from?.toISOString() || undefined,
                selectedRange?.to?.toISOString() || undefined,
            ]);
        }
    };
    const handleClickApply = () => {
        if (onApply) {
            onApply([range?.from?.toISOString() || undefined, range?.to?.toISOString() || undefined]);
        }
    };
    const handleClickReset = () => {
        setRange({ from: undefined, to: undefined });
        if (onSelect) {
            onSelect([undefined, undefined]);
        }
    };
    const { from, to } = range || {};
    const modifiers = { from: from || false, to: to || false };
    const content = {
        header: _jsx(Paragraph, { children: "Select the initial date" }),
    };
    if (showApply) {
        content.footer = getFooter(setMonth, currentMonthLabel, _jsxs(Spacer, { children: [_jsx(Button, { disabled: !from, invert: true, onClick: handleClickReset, size: "sm", variant: variant, children: "Reset" }), _jsx(Button, { disabled: !to, onClick: handleClickApply, size: "sm", variant: variant, children: "Apply" })] }));
    }
    else {
        content.footer = getFooter(setMonth, currentMonthLabel);
        content.reset = (_jsx(Button, { invert: true, onClick: handleClickReset, size: "sm", style: {
                borderRadius: radius.xs,
                minHeight: 24,
                padding: `${spacing.xxs} ${spacing.xs}`,
            }, variant: variant, children: "Reset" }));
    }
    if (from && to) {
        content.header = (_jsxs(Spacer, { distribution: "center", children: [_jsxs(Text, { children: ["From ", formatDateLocale(from.toISOString(), { locale: formatLocale }), " to", ' ', formatDateLocale(to.toISOString(), { locale: formatLocale })] }), content.reset] }));
    }
    else if (from) {
        content.header = _jsx(Paragraph, { children: "Select the final date" });
    }
    return (_jsxs(StyledDatePicker, { "data-component-name": "DatePickerRange", variant: variant, ...omit(props, 'hidden', 'onSelect'), children: [_jsx(BoxCenter, { mb: "md", minHeight: 30, children: content.header }), _jsx(DayPicker, { mode: "range", modifiers: modifiers, month: month, numberOfMonths: getNumberOfMonths(fromDate, toDate), onMonthChange: setMonth, onSelect: handleClickSelect, selected: range, ...getRange(fromDate, toDate), ...rest }), content.footer] }));
}
DatePickerRange.defaultProps = {
    ...defaultProps,
    formatLocale: 'en-US',
    showApply: false,
};
//# sourceMappingURL=Range.js.map