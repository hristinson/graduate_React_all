import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useMemo, useRef } from 'react';
import innerText from 'react-innertext';
import { useSetState, useUpdateEffect } from 'react-use';
import { useTheme } from '@emotion/react';
import Body from './Body';
import Head from './Head';
import { Box, BoxCenter } from '../Box';
import { scrollTo } from '../modules/animations';
import { getElementProperty } from '../modules/helpers';
import { Pagination } from '../Pagination';
import { Text } from '../Text';
function sortData(data, sortBy, sortDirection) {
    return [...data].sort((a, b) => {
        let left = innerText(a[sortBy]);
        let right = innerText(b[sortBy]);
        if (sortBy === 'date') {
            left = getElementProperty(a[sortBy], { type: 'time', property: 'dateTime' }) || left;
            right = getElementProperty(b[sortBy], { type: 'time', property: 'dateTime' }) || right;
        }
        if (sortDirection === 'desc') {
            return right.toLowerCase().localeCompare(left.toLowerCase());
        }
        return left.toLowerCase().localeCompare(right.toLowerCase());
    });
}
export function DataTable(props) {
    const { breakpoint = 768, clean, columns, data, defaultColumn, disableScroll, loading = false, maxRows = 10, noResults, onClickPage, onClickSort, pagination = true, paginationCurrentPage, paginationServer, paginationTotalPages, responsive = false, scrollDuration = 400, scrollElement, scrollMargin = 16, width, ...rest } = props;
    const { darkMode = false } = useTheme();
    const element = useRef(null);
    const sortByDefault = defaultColumn || columns?.[0].key;
    const [{ currentPage, sortBy, sortDirection }, setState] = useSetState({
        currentPage: 1,
        sortBy: sortByDefault,
        sortDirection: 'asc',
    });
    useUpdateEffect(() => {
        const minLength = currentPage * maxRows - maxRows;
        if (data.length < minLength) {
            setState({ currentPage: 1 });
        }
    }, [currentPage, data.length, maxRows, setState]);
    const isResponsive = responsive && (width ?? window.innerWidth) < breakpoint;
    const totalPages = Math.ceil(data.length / maxRows);
    const handleClickPage = (event) => {
        const { page } = event.currentTarget.dataset;
        const pageNumber = Number(page);
        const scrollTarget = scrollElement || element.current;
        if (onClickPage) {
            onClickPage(pageNumber, paginationTotalPages || totalPages);
        }
        if (scrollTarget && !disableScroll) {
            scrollTo(scrollTarget.getBoundingClientRect().top - scrollMargin, { scrollDuration });
        }
        if (paginationServer) {
            return;
        }
        setState({ currentPage: pageNumber });
    };
    const handleClickSort = (event) => {
        const { direction, name = '' } = event.currentTarget.dataset;
        const reverseDirection = direction === 'asc' ? 'desc' : 'asc';
        const nextDirection = sortBy === name ? reverseDirection : 'asc';
        const options = {
            sortBy: name,
            sortDirection: nextDirection,
        };
        if (onClickSort) {
            onClickSort(name, nextDirection);
        }
        if (paginationServer) {
            setState(options);
            return;
        }
        setState(options);
    };
    const isEmpty = !loading && !data.length;
    const rows = useMemo(() => {
        return paginationServer ? data : sortData(data, sortBy, sortDirection);
    }, [data, paginationServer, sortBy, sortDirection]);
    const body = useMemo(() => {
        if (isEmpty) {
            return (_jsx(BoxCenter, { padding: "md", radius: "sm", variant: "white", width: "100%", children: noResults || _jsx(Text, { bold: true, children: "Nothing found" }) }));
        }
        return (_jsx(Body, { clean: clean, columns: columns, data: rows.slice(maxRows * (currentPage - 1), maxRows * currentPage), defaultColumn: defaultColumn, isResponsive: isResponsive, loading: loading }));
    }, [
        clean,
        columns,
        currentPage,
        defaultColumn,
        isEmpty,
        isResponsive,
        loading,
        maxRows,
        noResults,
        rows,
    ]);
    const styles = {};
    if (!clean) {
        styles.padding = 'md';
        styles.shade = darkMode ? 'darker' : 'lightest';
        styles.variant = 'gray';
    }
    return (_jsxs(Box, { ref: element, "data-component-name": "DataTable", maxWidth: "100%", radius: "xxs", width: width, ...styles, ...rest, children: [_jsx(Head, { clean: clean, columns: columns, isDisabled: loading || isEmpty, isResponsive: isResponsive, onClick: handleClickSort, sortBy: sortBy, sortDirection: sortDirection }), body, pagination && (_jsx(Box, { border: clean ? [{ side: 'top' }] : undefined, pt: clean ? 'sm' : undefined, children: _jsx(Pagination, { currentPage: paginationCurrentPage || currentPage, onClick: handleClickPage, totalPages: paginationTotalPages || totalPages }) }))] }));
}
DataTable.defaultProps = {
    breakpoint: 768,
    clean: false,
    loading: false,
    maxRows: 10,
    pagination: true,
    responsive: false,
    scrollDuration: 400,
    scrollMargin: 16,
};
//# sourceMappingURL=index.js.map