import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { memo } from 'react';
import { Box, BoxCenter } from '../Box';
import { Loader } from '../Loader';
import { Paragraph } from '../Paragraph';
function DataTableBody(props) {
    const { clean, columns, data, defaultColumn, isResponsive, loading } = props;
    const isInitialLoad = loading && !data.length;
    return (_jsxs(Box, { "data-component-name": "DataTableBody", minHeight: 55, position: "relative", children: [data.map((item, index) => (_jsx(Box, { "data-component-name": "DataTableBodyRow", display: "flex", mb: "sm", radius: clean ? undefined : 'sm', variant: clean ? undefined : 'white', wrap: isResponsive ? 'wrap' : 'nowrap', children: columns.map(({ hideOnResponsive, isAction, key, max, min, size, title }, columnIndex) => {
                    let maxWidth = max || size;
                    if (isResponsive && defaultColumn === key) {
                        maxWidth = undefined;
                    }
                    return (_jsxs(Box, { align: "flex-start", border: clean ? [{ side: 'top' }] : undefined, "data-component-name": "DataTableBodyColumn", direction: "column", display: "flex", flex: "grow", maxWidth: maxWidth, minWidth: min || size, order: isAction ? 1 : columnIndex + 1, padding: !clean ? 'md' : undefined, pt: clean ? 'sm' : undefined, wrap: "wrap", children: [isResponsive && !hideOnResponsive && (_jsx(Paragraph, { mb: "xxs", size: "small", style: { textTransform: 'uppercase' }, variant: "gray", children: title })), item[key]] }, key));
                }) }, item.id || index))), loading && (_jsx(BoxCenter, { bottom: 0, left: 0, opacity: isInitialLoad ? 1 : 0.5, pointerEvents: "fill", position: "absolute", right: 0, top: 0, variant: !isInitialLoad ? 'gray' : undefined, zIndex: 10, children: _jsx(Loader, {}) }))] }));
}
export default memo(DataTableBody);
//# sourceMappingURL=Body.js.map