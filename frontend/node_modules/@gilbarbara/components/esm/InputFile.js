import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef, useState } from 'react';
import { css } from '@emotion/react';
import styled from '@emotion/styled';
import { BoxInline } from './Box';
import { Button } from './Button';
import { getTheme, px } from './modules/helpers';
import { baseStyles, getStyledOptions } from './modules/system';
import { Truncate } from './Truncate';
export const StyledFileInput = styled('div', getStyledOptions())(props => {
    const { width = '100%' } = props;
    const { spacing } = getTheme(props);
    return css `
    ${baseStyles(props)};
    align-items: center;
    display: flex;
    width: ${px(width)};

    [data-component-name='Truncate'] {
      flex: 1;
      margin-left: ${spacing.xs};

      &:empty {
        display: none;
      }
    }
  `;
});
export const StyledInput = styled('input', getStyledOptions()) `
  font-size: 48px;
  left: 0;
  opacity: 0;
  position: absolute;
  top: 0;
  z-index: 1;
`;
export const InputFile = forwardRef((props, ref) => {
    const { invert, large, name, onChange, placeholder, value, ...rest } = props;
    const [localValue, setLocalValue] = useState('');
    const handleChange = (event) => {
        const { files } = event.target;
        setLocalValue(files?.length ? files[0].name : '');
        if (onChange) {
            onChange(event);
        }
    };
    return (_jsxs(StyledFileInput, { "data-component-name": "InputFile", ...rest, children: [_jsxs(BoxInline, { overflow: "hidden", position: "relative", children: [_jsx(Button, { invert: invert, size: large ? 'lg' : 'md', children: placeholder }), _jsx(StyledInput, { ref: ref, id: name, name: name, onChange: handleChange, type: "file" })] }), _jsx(Truncate, { maxWidth: "100%", children: value || localValue })] }));
});
InputFile.defaultProps = {
    disabled: false,
    invert: true,
    large: false,
    placeholder: 'Upload a file',
    readOnly: false,
    width: '100%',
};
//# sourceMappingURL=InputFile.js.map