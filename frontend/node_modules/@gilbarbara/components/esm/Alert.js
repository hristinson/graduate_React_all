import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef } from 'react';
import { css, useTheme } from '@emotion/react';
import styled from '@emotion/styled';
import { Icon } from './Icon';
import { getTheme } from './modules/helpers';
import { baseStyles, borderStyles, getStyledOptions, isDarkMode, marginStyles, paddingStyles, radiusStyles, } from './modules/system';
import { Text } from './Text';
function getOptions(type, colors, darkMode) {
    const options = {
        success: {
            color: colors.green,
            icon: 'check-o',
        },
        warning: {
            color: darkMode ? colors.orange : colors.yellow,
            icon: 'danger',
        },
        error: {
            color: colors.red,
            icon: 'close-o',
        },
        info: {
            color: colors.blue,
            icon: 'info',
        },
        neutral: {
            color: darkMode ? '#000' : '#fff',
            icon: 'data',
        },
    };
    return options[type];
}
export const StyledAlert = styled('div', getStyledOptions('type'))(props => {
    const { invert } = props;
    const { grayDark, lightColor, spacing, white } = getTheme(props);
    let backgroundColor = isDarkMode(props) ? lightColor : grayDark;
    let color = isDarkMode(props) ? grayDark : white;
    if (invert) {
        backgroundColor = isDarkMode(props) ? grayDark : lightColor;
        color = isDarkMode(props) ? white : grayDark;
    }
    return css `
    ${baseStyles(props)};
    align-items: center;
    background-color: ${backgroundColor};
    color: ${color};
    display: flex;
    overflow: hidden;
    position: relative;
    max-width: 380px;
    width: 100%;
    ${borderStyles(props)};
    ${marginStyles(props)};
    ${paddingStyles(props)};
    ${radiusStyles(props)};

    [data-component-name='Text'] {
      margin-left: ${spacing.xs};
    }
  `;
});
export const Alert = forwardRef((props, ref) => {
    const { children, icon, invert, type } = props;
    const { colors, darkMode } = getTheme({ theme: useTheme() });
    const selected = getOptions(type, colors, !!darkMode || !!invert);
    return (_jsxs(StyledAlert, { ref: ref, "data-component-name": "Alert", ...props, children: [_jsx(Icon, { color: selected.color, name: icon || selected.icon, size: 20 }), _jsx(Text, { size: "mid", children: children })] }));
});
Alert.defaultProps = {
    invert: false,
    padding: 'md',
    radius: 'xs',
    type: 'success',
};
//# sourceMappingURL=Alert.js.map