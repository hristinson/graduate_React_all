import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { css } from '@emotion/react';
import styled from '@emotion/styled';
import { BoxInline } from '../Box';
import { Icon } from '../Icon';
import { getTheme } from '../modules/helpers';
import { getStyledOptions, isDarkMode } from '../modules/system';
export const StyledContent = styled('div', getStyledOptions()) `
  align-items: center;
  display: flex;
  flex-wrap: wrap;
  width: 100%;
`;
const Item = styled('div', getStyledOptions())(props => {
    const { color, multi } = props;
    const { grayDark, radius, spacing, white } = getTheme(props);
    const darkMode = isDarkMode(props);
    let multiStyles;
    if (multi) {
        multiStyles = css `
      border: 1px solid ${color};
      border-radius: ${radius.xxs};
      background-color: ${darkMode ? grayDark : white};
      margin-bottom: ${spacing.xxs};
      margin-right: ${spacing.xs};
      margin-top: ${spacing.xxs};
      padding: 3px 6px;
    `;
    }
    return css `
    align-items: center;
    display: flex;
    line-height: 1;
    ${multiStyles};
  `;
});
const ItemClose = styled('span', getStyledOptions())(props => {
    const { spacing } = getTheme(props);
    return css `
    display: inline-flex;
    line-height: 1;
    margin-left: ${spacing.xxs};
  `;
});
const Placeholder = styled('div', getStyledOptions())(props => {
    const { darkMode, grayLight, grayMid } = getTheme(props);
    return css `
    align-items: center;
    color: ${darkMode ? grayLight : grayMid};
    display: flex;
  `;
});
function DropdownContent(props) {
    const { methods: { getStyles, removeItem }, props: { multi, placeholder }, state: { values }, } = props;
    const handleClickRemove = (value) => {
        return (event) => {
            event.stopPropagation();
            removeItem(null, value, true);
        };
    };
    if (values.length) {
        return (_jsx(StyledContent, { children: values.map(item => {
                const { label, prefix, suffix, value } = item || {};
                return (_jsxs(Item, { color: getStyles().color, "data-component-name": "ContentItem", multi: multi, children: [!!prefix && (_jsx(BoxInline, { "data-component-name": "ContentItemPrefix", mr: "xxs", children: prefix })), _jsx("span", { children: label || value }), !!suffix && (_jsx(BoxInline, { "data-component-name": "ContentItemSuffix", ml: "xxs", children: suffix })), multi && (_jsx(ItemClose, { onClick: handleClickRemove(item), children: _jsx(Icon, { name: "close" }) }))] }, value));
            }) }));
    }
    return _jsx(Placeholder, { children: placeholder });
}
export default DropdownContent;
//# sourceMappingURL=Content.js.map