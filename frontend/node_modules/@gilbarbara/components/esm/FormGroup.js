import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { forwardRef } from 'react';
import { css } from '@emotion/react';
import styled from '@emotion/styled';
import is from 'is-lite';
import { Box } from './Box';
import { ComponentWrapper } from './ComponentWrapper';
import { Icon } from './Icon';
import { Label } from './Label';
import { getTheme } from './modules/helpers';
import { baseStyles, borderStyles, getStyledOptions, isDarkMode, layoutStyles, marginStyles, paddingStyles, radiusStyles, } from './modules/system';
export const StyledFormGroup = styled('div', getStyledOptions())(props => {
    const { spacing } = getTheme(props);
    return css `
    ${baseStyles(props)};
    margin-bottom: ${spacing.md};
    width: 100%;
    ${borderStyles(props)};
    ${layoutStyles(props)};
    ${marginStyles(props)};
    ${paddingStyles(props)};
    ${radiusStyles(props)};

    [data-component-name='Box'] {
      > * {
        margin-bottom: 0;
        margin-top: 0;
      }

      [data-component-name='Label'] {
        margin-right: ${spacing.xs};
      }

      [data-component-name='FormGroupContent'] {
        flex: 1;
      }

      [data-component-name='AssistiveContent'] {
        margin-left: ${spacing.xs};

        &:empty {
          display: none;
        }
      }
    }
  `;
});
const AssistiveContent = styled('div', getStyledOptions())(props => {
    const { grayLight, grayMid, spacing, typography } = getTheme(props);
    return css `
    align-items: center;
    color: ${isDarkMode(props) ? grayLight : grayMid};
    display: flex;
    font-size: ${typography.mid.fontSize};
    line-height: 16px;
    margin-top: ${spacing.xxs};
    min-height: ${spacing.md};
    text-align: left;
  `;
});
const Error = styled.div(props => {
    const { colors } = getTheme(props);
    return css `
    align-items: center;
    color: ${colors.red};
    display: flex;
  `;
});
export const FormGroup = forwardRef((props, ref) => {
    const { assistiveText, children, error, hideAssistiveText, inline, label, labelId, labelInfo, labelStyles, required, skipIcon, valid, ...rest } = props;
    const content = {
        assistiveText,
    };
    if (error && valid === false) {
        content.assistiveText = (_jsxs(Error, { children: [_jsx(Icon, { mr: "xxs", name: "danger", title: "Invalid" }), _jsx("span", { children: error })] }));
    }
    content.children = !skipIcon ? (_jsx(ComponentWrapper, { suffix: is.boolean(valid) && valid ? _jsx(Icon, { name: "check-o", title: "valid" }) : undefined, children: children })) : (children);
    if (label) {
        content.label = (_jsx(Label, { labelId: labelId, labelInfo: labelInfo || (required && _jsx(Icon, { name: "asterisk", variant: "red" })), style: labelStyles, children: label }));
    }
    content.main = (_jsxs(_Fragment, { children: [content.label, content.children, !hideAssistiveText && (_jsx(AssistiveContent, { "data-component-name": "AssistiveContent", children: content.assistiveText }))] }));
    if (inline) {
        content.main = _jsx(Box, { display: "flex", children: content.main });
    }
    return (_jsx(StyledFormGroup, { ref: ref, "data-component-name": "FormGroup", inline: inline, ...rest, children: content.main }));
});
FormGroup.defaultProps = {
    hideAssistiveText: false,
    inline: false,
    radius: false,
    required: false,
    skipIcon: false,
};
//# sourceMappingURL=FormGroup.js.map