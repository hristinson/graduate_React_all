import { jsx as _jsx } from "react/jsx-runtime";
import { forwardRef, useEffect, useRef } from 'react';
import { css } from '@emotion/react';
import styled from '@emotion/styled';
import Item from './Item';
import { getTheme, px } from '../modules/helpers';
import { getStyledOptions, isDarkMode } from '../modules/system';
const StyledSearchItems = styled('div', getStyledOptions())(props => {
    const { active, height } = props;
    const { grayDarker, radius, shadow, spacing, white } = getTheme(props);
    const darkMode = isDarkMode(props);
    return css `
    background-color: ${darkMode ? grayDarker : white};
    border-radius: ${radius.xxs};
    box-shadow: ${shadow.mid};
    left: 0;
    max-height: ${px(height)};
    margin-top: ${spacing.xs};
    overflow-y: auto;
    position: absolute;
    right: 0;
    top: 100%;
    transform-origin: top;
    transform: scaleY(0);
    transition: transform 0.3s;

    ${active &&
        css `
      transform: scaleY(1);
    `}
  `;
});
function getSharedStyles(spacing) {
    return css `
    align-items: center;
    display: flex;
    padding: ${spacing.xs} ${spacing.sm};
    width: 100%;
  `;
}
const Empty = styled('div', getStyledOptions())(props => {
    const { spacing } = getTheme(props);
    return css `
    ${getSharedStyles(spacing)};
    justify-content: center;
  `;
});
const SearchItems = forwardRef((props, ref) => {
    const { active, cursor, height, items, noResultsLabel, onSelect } = props;
    const isActive = useRef(false);
    useEffect(() => {
        isActive.current = true;
        return () => {
            isActive.current = false;
        };
    }, []);
    const content = {};
    content.items = !items.length ? (_jsx(Empty, { children: noResultsLabel })) : (items.map((data, index) => (_jsx(Item, { isSelected: cursor === index, onClick: onSelect, value: data.value, children: data.label || data.value }, data.value))));
    return (_jsx(StyledSearchItems, { ref: ref, active: active, "data-component-name": "SearchItems", height: height, role: "list", tabIndex: 0, children: content.items }));
});
export default SearchItems;
//# sourceMappingURL=Items.js.map