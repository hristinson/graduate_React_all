import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef } from 'react';
import { css, useTheme } from '@emotion/react';
import styled from '@emotion/styled';
import { ButtonBase } from './ButtonBase';
import { Icon } from './Icon';
import { getColorVariant, getTheme } from './modules/helpers';
import { backgroundStyles, baseStyles, getStyledOptions, marginStyles, textStyles, } from './modules/system';
export const StyledTag = styled('span', getStyledOptions())(props => {
    const { color, colorShade, variant } = props;
    const { radius, spacing, variants } = getTheme(props);
    const selectedColor = color || (variant && !['black', 'white'].includes(variant) ? variant : undefined);
    let colorProp;
    if (selectedColor) {
        colorProp = getColorVariant(selectedColor, colorShade, variants).bg;
    }
    return css `
    ${baseStyles(props)};
    align-items: center;
    border-radius: ${radius.xs};
    color: ${colorProp};
    display: inline-flex;
    padding: ${spacing.xxs} ${spacing.sm};
    ${backgroundStyles(props)};
    ${marginStyles(props)};
    ${textStyles(props, 1)};
  `;
});
export const Tag = forwardRef((props, ref) => {
    const { children, colorShade, iconAfter, iconBefore, onClickAfter, onClickBefore, shade, ...rest } = props;
    const { typography } = getTheme({ theme: useTheme() });
    const iconSize = rest.size ? parseInt(typography[rest.size].fontSize, 10) : undefined;
    const icons = {};
    if (iconBefore && onClickBefore) {
        icons.before = (_jsx(ButtonBase, { mr: "xxs", onClick: onClickBefore, children: _jsx(Icon, { name: iconBefore, size: iconSize }) }));
    }
    else if (iconBefore) {
        icons.before = _jsx(Icon, { mr: "xxs", name: iconBefore, size: iconSize });
    }
    if (iconAfter && onClickAfter) {
        icons.after = (_jsx(ButtonBase, { ml: "xxs", onClick: onClickAfter, children: _jsx(Icon, { name: iconAfter, size: iconSize }) }));
    }
    else if (iconAfter) {
        icons.after = _jsx(Icon, { ml: "xxs", name: iconAfter, size: iconSize });
    }
    return (_jsxs(StyledTag, { ref: ref, "data-component-name": "Tag", ...rest, colorShade: rest.invert && !colorShade ? 'mid' : colorShade || 'dark', shade: rest.invert && !shade ? 'mid' : shade || 'lightest', children: [icons.before, _jsx("span", { children: children }), icons.after] }));
});
Tag.defaultProps = {
    bold: false,
    invert: false,
    size: 'mid',
    variant: 'primary',
};
//# sourceMappingURL=Tag.js.map