import { jsx as _jsx } from "react/jsx-runtime";
import { memo, useEffect, useRef } from 'react';
const DISPLAY = {
    BLOCK: 'block',
    FLEX: 'flex',
    INLINE: 'inline',
    INLINE_BLOCK: 'inline-block',
    CONTENTS: 'contents',
};
export function ClickOutside(props) {
    const { active, children, display = DISPLAY.BLOCK, onClick, ...rest } = props;
    const containerRef = useRef(null);
    const isTouch = useRef(false);
    const handleClick = useRef((event) => {
        const container = containerRef.current;
        if (event.type === 'touchend') {
            isTouch.current = true;
        }
        if (event.type === 'click' && isTouch.current) {
            return;
        }
        if (container && !container.contains(event.target)) {
            onClick();
        }
    });
    useEffect(() => {
        const { current } = handleClick;
        if (active) {
            document.addEventListener('touchend', current, true);
            document.addEventListener('click', current, true);
        }
        return () => {
            document.removeEventListener('touchend', current, true);
            document.removeEventListener('click', current, true);
        };
    }, [active]);
    return (_jsx("div", { ref: containerRef, "data-component-name": "ClickOutside", style: display !== DISPLAY.BLOCK && Object.values(DISPLAY).includes(display)
            ? { display }
            : undefined, ...rest, children: children }));
}
export const ClickOutsideMemo = memo(ClickOutside);
//# sourceMappingURL=ClickOutside.js.map