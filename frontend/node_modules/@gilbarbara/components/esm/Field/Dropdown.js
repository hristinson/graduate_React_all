import { jsx as _jsx } from "react/jsx-runtime";
import { useCallback } from 'react';
import is from 'is-lite';
import { getInputParameters } from './utils';
import { Dropdown } from '../Dropdown';
function FieldDropdown(props) {
    const { currentValue, dropdownProps = {}, items = [], name, onChange, setValue } = props;
    const handleChangeDropdown = useCallback((data) => {
        const { multi } = dropdownProps;
        const setValueOptions = { shouldDirty: true, shouldValidate: true };
        if (multi) {
            const values = data.map(d => d.value);
            setValue(name, values, setValueOptions);
            if (onChange && (!currentValue || currentValue !== values)) {
                onChange(data);
            }
        }
        else {
            const [selected] = data;
            /* istanbul ignore else */
            if (selected) {
                setValue(name, selected.value, setValueOptions);
                if (onChange && (!currentValue || currentValue !== selected.value)) {
                    onChange(data);
                }
            }
            else {
                setValue(name, undefined, setValueOptions);
            }
        }
    }, [dropdownProps, setValue, name, onChange, currentValue]);
    const parameters = getInputParameters(props, 'currentValue', 'registration', 'setValue');
    return (_jsx(Dropdown, { items: items, values: items.filter((d) => is.array(currentValue) ? currentValue.includes(d.value) : d.value === currentValue), width: "100%", ...parameters, ...dropdownProps, onChange: handleChangeDropdown }));
}
export default FieldDropdown;
//# sourceMappingURL=Dropdown.js.map