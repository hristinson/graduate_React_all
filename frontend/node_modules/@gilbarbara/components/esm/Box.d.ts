/// <reference types="react" />
import { ComponentProps, StyledProps, WithBorder, WithChildrenOptional, WithColor, WithFlexBox, WithFlexItem, WithLayout, WithMargin, WithPadding, WithPositioning, WithRadius, WithShadow, WithTextColor } from './types';
export interface BoxKnownProps extends StyledProps, WithBorder, WithChildrenOptional, WithColor, WithFlexBox, WithFlexItem, WithLayout, WithMargin, WithPadding, WithPositioning, WithRadius, WithShadow, WithTextColor {
    /**
     * Set the display to flex.
     * @default false
     */
    flexBox?: boolean;
}
export declare type BoxProps = ComponentProps<HTMLDivElement, BoxKnownProps>;
export declare const StyledBox: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
} & BoxKnownProps & Omit<import("react").HTMLProps<HTMLDivElement>, "size" | "ref" | keyof BoxKnownProps>, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
/**
 * A container that lays out its contents using "block" (default) or "flex" (with the display prop).
 */
export declare const Box: import("react").ForwardRefExoticComponent<BoxKnownProps & Omit<import("react").HTMLProps<HTMLDivElement>, "size" | "ref" | keyof BoxKnownProps> & import("react").RefAttributes<HTMLDivElement>>;
export declare const BoxCenter: import("react").ForwardRefExoticComponent<BoxKnownProps & Omit<import("react").HTMLProps<HTMLDivElement>, "size" | "ref" | keyof BoxKnownProps> & import("react").RefAttributes<HTMLDivElement>>;
export declare const BoxInline: import("react").ForwardRefExoticComponent<BoxKnownProps & Omit<import("react").HTMLProps<HTMLDivElement>, "size" | "ref" | keyof BoxKnownProps> & import("react").RefAttributes<HTMLDivElement>>;
