import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef } from 'react';
import { css } from '@emotion/react';
import styled from '@emotion/styled';
import { Icon } from './Icon';
import { appearanceStyles, baseStyles, colorStyles, displayStyles, getStyledOptions, marginStyles, paddingStyles, textStyles, } from './modules/system';
export const StyledAnchor = styled('a', getStyledOptions())(props => {
    const { hideDecoration } = props;
    return css `
    ${appearanceStyles};
    ${baseStyles(props)};
    align-items: center;
    color: inherit;
    cursor: pointer;
    font-family: inherit;
    line-height: 1;
    padding: 0;
    text-decoration: ${hideDecoration ? 'none' : 'underline'};
    ${colorStyles(props)};
    ${displayStyles(props)};
    ${marginStyles(props)};
    ${paddingStyles(props)};
    ${textStyles(props)};
  `;
});
export const Anchor = forwardRef((props, ref) => {
    const { children, external, iconAfter, iconBefore } = props;
    const { fontSize } = textStyles(props);
    let iconSize;
    if (fontSize) {
        iconSize = parseInt(`${fontSize}`, 10);
    }
    const addtionalProps = {};
    if (external) {
        addtionalProps.rel = 'noopener noreferrer';
        addtionalProps.target = '_blank';
    }
    return (_jsxs(StyledAnchor, { ref: ref, "data-component-name": "Anchor", ...addtionalProps, ...props, children: [iconBefore && _jsx(Icon, { mr: "xxs", name: iconBefore, size: iconSize }), _jsx("span", { children: children }), iconAfter && _jsx(Icon, { ml: "xxs", name: iconAfter, size: iconSize })] }));
});
Anchor.defaultProps = {
    bold: false,
    display: 'inline-flex',
    external: false,
    hideDecoration: false,
    shade: 'mid',
    variant: 'primary',
};
//# sourceMappingURL=Anchor.js.map