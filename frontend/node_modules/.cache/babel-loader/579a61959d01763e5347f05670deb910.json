{"ast":null,"code":"import equal from '@gilbarbara/deep-equal';\nimport is from 'is-lite';\nimport { compareNumbers, compareValues, getIterables, includesOrEqualsTo, nested } from './helpers';\nexport default function treeChanges(previousData, data) {\n  if ([previousData, data].some(is.nullOrUndefined)) {\n    throw new Error('Missing required parameters');\n  }\n\n  if (![previousData, data].every(function (d) {\n    return is.plainObject(d) || is.array(d);\n  })) {\n    throw new Error('Expected plain objects or array');\n  }\n\n  var added = function (key, value) {\n    try {\n      return compareValues(previousData, data, {\n        key: key,\n        type: 'added',\n        value: value\n      });\n    } catch (_a) {\n      /* istanbul ignore next */\n      return false;\n    }\n  };\n\n  var changed = function (key, actual, previous) {\n    try {\n      var left = nested(previousData, key);\n      var right = nested(data, key);\n      var hasActual = is.defined(actual);\n      var hasPrevious = is.defined(previous);\n\n      if (hasActual || hasPrevious) {\n        var leftComparator = hasPrevious ? includesOrEqualsTo(previous, left) : !includesOrEqualsTo(actual, left);\n        var rightComparator = includesOrEqualsTo(actual, right);\n        return leftComparator && rightComparator;\n      }\n\n      if ([left, right].every(is.array) || [left, right].every(is.plainObject)) {\n        return !equal(left, right);\n      }\n\n      return left !== right;\n    } catch (_a) {\n      /* istanbul ignore next */\n      return false;\n    }\n  };\n\n  var changedFrom = function (key, previous, actual) {\n    if (!is.defined(key)) {\n      return false;\n    }\n\n    try {\n      var left = nested(previousData, key);\n      var right = nested(data, key);\n      var hasActual = is.defined(actual);\n      return includesOrEqualsTo(previous, left) && (hasActual ? includesOrEqualsTo(actual, right) : !hasActual);\n    } catch (_a) {\n      /* istanbul ignore next */\n      return false;\n    }\n  };\n  /**\n   * @deprecated\n   * Use \"changed\" instead\n   */\n\n\n  var changedTo = function (key, actual) {\n    if (!is.defined(key)) {\n      return false;\n    }\n    /* istanbul ignore next */\n\n\n    if (process.env.NODE_ENV === 'development') {\n      // eslint-disable-next-line no-console\n      console.warn('`changedTo` is deprecated! Replace it with `change`');\n    }\n\n    return changed(key, actual);\n  };\n\n  var decreased = function (key, actual, previous) {\n    if (!is.defined(key)) {\n      return false;\n    }\n\n    try {\n      return compareNumbers(previousData, data, {\n        key: key,\n        actual: actual,\n        previous: previous,\n        type: 'decreased'\n      });\n    } catch (_a) {\n      /* istanbul ignore next */\n      return false;\n    }\n  };\n\n  var emptied = function (key) {\n    try {\n      var _a = getIterables(previousData, data, {\n        key: key\n      }),\n          left = _a[0],\n          right = _a[1];\n\n      return !!left.length && !right.length;\n    } catch (_b) {\n      /* istanbul ignore next */\n      return false;\n    }\n  };\n\n  var filled = function (key) {\n    try {\n      var _a = getIterables(previousData, data, {\n        key: key\n      }),\n          left = _a[0],\n          right = _a[1];\n\n      return !left.length && !!right.length;\n    } catch (_b) {\n      /* istanbul ignore next */\n      return false;\n    }\n  };\n\n  var increased = function (key, actual, previous) {\n    if (!is.defined(key)) {\n      return false;\n    }\n\n    try {\n      return compareNumbers(previousData, data, {\n        key: key,\n        actual: actual,\n        previous: previous,\n        type: 'increased'\n      });\n    } catch (_a) {\n      /* istanbul ignore next */\n      return false;\n    }\n  };\n\n  var removed = function (key, value) {\n    try {\n      return compareValues(previousData, data, {\n        key: key,\n        type: 'removed',\n        value: value\n      });\n    } catch (_a) {\n      /* istanbul ignore next */\n      return false;\n    }\n  };\n\n  return {\n    added: added,\n    changed: changed,\n    changedFrom: changedFrom,\n    changedTo: changedTo,\n    decreased: decreased,\n    emptied: emptied,\n    filled: filled,\n    increased: increased,\n    removed: removed\n  };\n}\nexport * from './types';","map":{"version":3,"mappings":"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","names":["equal","is","compareNumbers","compareValues","getIterables","includesOrEqualsTo","nested","treeChanges","previousData","data","some","nullOrUndefined","Error","every","plainObject","d","array","added","key","value","type","changed","actual","previous","left","right","hasActual","defined","hasPrevious","leftComparator","rightComparator","changedFrom","changedTo","process","env","NODE_ENV","console","warn","decreased","emptied","length","filled","increased","removed"],"sources":["/My_WORK/graduate_React/frontend/node_modules/tree-changes/src/index.ts"],"sourcesContent":["import equal from '@gilbarbara/deep-equal';\nimport is from 'is-lite';\n\nimport { compareNumbers, compareValues, getIterables, includesOrEqualsTo, nested } from './helpers';\nimport { Data, KeyType, TreeChanges, Value } from './types';\n\nexport default function treeChanges<P extends Data, D extends Data, K = KeyType<P, D>>(\n  previousData: P,\n  data: D,\n): TreeChanges<K> {\n  if ([previousData, data].some(is.nullOrUndefined)) {\n    throw new Error('Missing required parameters');\n  }\n\n  if (![previousData, data].every(d => is.plainObject(d) || is.array(d))) {\n    throw new Error('Expected plain objects or array');\n  }\n\n  const added = (key?: K, value?: Value): boolean => {\n    try {\n      return compareValues<K>(previousData, data, { key, type: 'added', value });\n    } catch {\n      /* istanbul ignore next */\n      return false;\n    }\n  };\n\n  const changed = (key?: K | string, actual?: Value, previous?: Value): boolean => {\n    try {\n      const left = nested(previousData, key);\n      const right = nested(data, key);\n      const hasActual = is.defined(actual);\n      const hasPrevious = is.defined(previous);\n\n      if (hasActual || hasPrevious) {\n        const leftComparator = hasPrevious\n          ? includesOrEqualsTo(previous, left)\n          : !includesOrEqualsTo(actual, left);\n        const rightComparator = includesOrEqualsTo(actual, right);\n\n        return leftComparator && rightComparator;\n      }\n\n      if ([left, right].every(is.array) || [left, right].every(is.plainObject)) {\n        return !equal(left, right);\n      }\n\n      return left !== right;\n    } catch {\n      /* istanbul ignore next */\n      return false;\n    }\n  };\n\n  const changedFrom = (key: K | string, previous: Value, actual?: Value): boolean => {\n    if (!is.defined(key)) {\n      return false;\n    }\n\n    try {\n      const left = nested(previousData, key);\n      const right = nested(data, key);\n      const hasActual = is.defined(actual);\n\n      return (\n        includesOrEqualsTo(previous, left) &&\n        (hasActual ? includesOrEqualsTo(actual, right) : !hasActual)\n      );\n    } catch {\n      /* istanbul ignore next */\n      return false;\n    }\n  };\n\n  /**\n   * @deprecated\n   * Use \"changed\" instead\n   */\n  const changedTo = (key: K | string, actual: Value): boolean => {\n    if (!is.defined(key)) {\n      return false;\n    }\n\n    /* istanbul ignore next */\n    if (process.env.NODE_ENV === 'development') {\n      // eslint-disable-next-line no-console\n      console.warn('`changedTo` is deprecated! Replace it with `change`');\n    }\n\n    return changed(key, actual);\n  };\n\n  const decreased = (key: K, actual?: Value, previous?: Value): boolean => {\n    if (!is.defined(key)) {\n      return false;\n    }\n\n    try {\n      return compareNumbers<K>(previousData, data, { key, actual, previous, type: 'decreased' });\n    } catch {\n      /* istanbul ignore next */\n      return false;\n    }\n  };\n\n  const emptied = (key?: K): boolean => {\n    try {\n      const [left, right] = getIterables(previousData, data, { key });\n\n      return !!left.length && !right.length;\n    } catch {\n      /* istanbul ignore next */\n      return false;\n    }\n  };\n\n  const filled = (key?: K): boolean => {\n    try {\n      const [left, right] = getIterables(previousData, data, { key });\n\n      return !left.length && !!right.length;\n    } catch {\n      /* istanbul ignore next */\n      return false;\n    }\n  };\n\n  const increased = (key: K, actual?: Value, previous?: Value): boolean => {\n    if (!is.defined(key)) {\n      return false;\n    }\n\n    try {\n      return compareNumbers<K>(previousData, data, { key, actual, previous, type: 'increased' });\n    } catch {\n      /* istanbul ignore next */\n      return false;\n    }\n  };\n\n  const removed = (key?: K, value?: Value): boolean => {\n    try {\n      return compareValues<K>(previousData, data, { key, type: 'removed', value });\n    } catch {\n      /* istanbul ignore next */\n      return false;\n    }\n  };\n\n  return { added, changed, changedFrom, changedTo, decreased, emptied, filled, increased, removed };\n}\n\nexport * from './types';\n"]},"metadata":{},"sourceType":"module"}