{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport { css } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport { getInitials } from '@gilbarbara/helpers';\nimport { BoxCenter } from './Box';\nimport { getColorVariant, getTheme } from './modules/helpers';\nimport { getStyledOptions } from './modules/system';\nconst sizes = {\n  xs: {\n    size: '24px',\n    fontSize: '12px'\n  },\n  sm: {\n    size: '32px',\n    fontSize: '14px'\n  },\n  md: {\n    size: '40px',\n    fontSize: '16px'\n  },\n  lg: {\n    size: '48px',\n    fontSize: '18px'\n  },\n  xl: {\n    size: '56px',\n    fontSize: '20px'\n  },\n  jumbo: {\n    size: '96px',\n    fontSize: '40px'\n  }\n};\nconst Circle = styled('div', getStyledOptions())(props => {\n  const {\n    shade,\n    size,\n    variant\n  } = props;\n  const {\n    variants\n  } = getTheme(props);\n  const {\n    bg,\n    color\n  } = getColorVariant(variant, shade, variants);\n  const selectedSize = sizes[size];\n  return css`\n    background-color: ${bg};\n    color: ${color};\n    height: ${selectedSize.size};\n    font-size: ${selectedSize.fontSize};\n    line-height: ${selectedSize.size};\n    text-align: center;\n    width: ${selectedSize.size};\n  `;\n});\nexport const Avatar = forwardRef((props, ref) => {\n  const {\n    image,\n    name,\n    shade = 'mid',\n    size = 'md',\n    variant = 'primary',\n    ...rest\n  } = props;\n  const selectedSize = sizes[size];\n  return _jsx(BoxCenter, {\n    ref: ref,\n    \"data-component-name\": \"Avatar\",\n    height: selectedSize.size,\n    overflow: \"hidden\",\n    radius: \"round\",\n    width: selectedSize.size,\n    ...rest,\n    children: image ? _jsx(\"img\", {\n      alt: name,\n      height: selectedSize.size,\n      src: image,\n      width: selectedSize.size\n    }) : _jsx(Circle, {\n      shade: shade,\n      size: size,\n      variant: variant,\n      children: getInitials(name).toUpperCase()\n    })\n  });\n});\nAvatar.defaultProps = {\n  shade: 'mid',\n  size: 'md',\n  variant: 'primary'\n};","map":{"version":3,"mappings":";AAAA,SAAwBA,UAAxB,QAA0C,OAA1C;AACA,SAASC,GAAT,QAAoB,gBAApB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,SAASC,WAAT,QAA4B,qBAA5B;AAEA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,eAAT,EAA0BC,QAA1B,QAA0C,mBAA1C;AACA,SAASC,gBAAT,QAAiC,kBAAjC;AAWA,MAAMC,KAAK,GAAG;EACZC,EAAE,EAAE;IACFC,IAAI,EAAE,MADJ;IAEFC,QAAQ,EAAE;EAFR,CADQ;EAKZC,EAAE,EAAE;IACFF,IAAI,EAAE,MADJ;IAEFC,QAAQ,EAAE;EAFR,CALQ;EASZE,EAAE,EAAE;IACFH,IAAI,EAAE,MADJ;IAEFC,QAAQ,EAAE;EAFR,CATQ;EAaZG,EAAE,EAAE;IACFJ,IAAI,EAAE,MADJ;IAEFC,QAAQ,EAAE;EAFR,CAbQ;EAiBZI,EAAE,EAAE;IACFL,IAAI,EAAE,MADJ;IAEFC,QAAQ,EAAE;EAFR,CAjBQ;EAqBZK,KAAK,EAAE;IACLN,IAAI,EAAE,MADD;IAELC,QAAQ,EAAE;EAFL;AArBK,CAAd;AA2BA,MAAMM,MAAM,GAAGf,MAAM,CACnB,KADmB,EAEnBK,gBAAgB,EAFG,CAAN,CAG8CW,KAAK,IAAG;EACnE,MAAM;IAAEC,KAAF;IAAST,IAAT;IAAeU;EAAf,IAA2BF,KAAjC;EACA,MAAM;IAAEG;EAAF,IAAef,QAAQ,CAACY,KAAD,CAA7B;EACA,MAAM;IAAEI,EAAF;IAAMC;EAAN,IAAgBlB,eAAe,CAACe,OAAD,EAAUD,KAAV,EAAiBE,QAAjB,CAArC;EACA,MAAMG,YAAY,GAAGhB,KAAK,CAACE,IAAD,CAA1B;EAEA,OAAOT,GAAG;wBACYqB,EAAE;aACbC,KAAK;cACJC,YAAY,CAACd,IAAI;iBACdc,YAAY,CAACb,QAAQ;mBACnBa,YAAY,CAACd,IAAI;;aAEvBc,YAAY,CAACd,IAAI;GAP5B;AASD,CAlBc,CAAf;AAoBA,OAAO,MAAMe,MAAM,GAAGzB,UAAU,CAA8B,CAACkB,KAAD,EAAQQ,GAAR,KAAe;EAC3E,MAAM;IAAEC,KAAF;IAASC,IAAT;IAAeT,KAAK,GAAG,KAAvB;IAA8BT,IAAI,GAAG,IAArC;IAA2CU,OAAO,GAAG,SAArD;IAAgE,GAAGS;EAAnE,IAA4EX,KAAlF;EAEA,MAAMM,YAAY,GAAGhB,KAAK,CAACE,IAAD,CAA1B;EAEA,OACEoB,KAAC1B,SAAD,EAAU;IACRsB,GAAG,EAAEA,GADG;IACA,uBACY,QAFZ;IAGRK,MAAM,EAAEP,YAAY,CAACd,IAHb;IAIRsB,QAAQ,EAAC,QAJD;IAKRC,MAAM,EAAC,OALC;IAMRC,KAAK,EAAEV,YAAY,CAACd,IANZ;IAMgB,GACpBmB,IAPI;IAOAM,UAEPR,KAAK,GACJG;MAAKM,GAAG,EAAER,IAAV;MAAgBG,MAAM,EAAEP,YAAY,CAACd,IAArC;MAA2C2B,GAAG,EAAEV,KAAhD;MAAuDO,KAAK,EAAEV,YAAY,CAACd;IAA3E,EADI,GAGJoB,KAACb,MAAD,EAAO;MAACE,KAAK,EAAEA,KAAR;MAAeT,IAAI,EAAEA,IAArB;MAA2BU,OAAO,EAAEA,OAApC;MAA2Ce,UAC/ChC,WAAW,CAACyB,IAAD,CAAX,CAAkBU,WAAlB;IADI,CAAP;EAZM,CAAV,CADF;AAmBD,CAxB+B,CAAzB;AA0BPb,MAAM,CAACc,YAAP,GAAsB;EACpBpB,KAAK,EAAE,KADa;EAEpBT,IAAI,EAAE,IAFc;EAGpBU,OAAO,EAAE;AAHW,CAAtB","names":["forwardRef","css","styled","getInitials","BoxCenter","getColorVariant","getTheme","getStyledOptions","sizes","xs","size","fontSize","sm","md","lg","xl","jumbo","Circle","props","shade","variant","variants","bg","color","selectedSize","Avatar","ref","image","name","rest","_jsx","height","overflow","radius","width","children","alt","src","toUpperCase","defaultProps"],"sources":["/My_WORK/graduate_React/frontend/node_modules/@gilbarbara/components/src/Avatar.tsx"],"sourcesContent":["import { CSSProperties, forwardRef } from 'react';\nimport { css } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport { getInitials } from '@gilbarbara/helpers';\n\nimport { BoxCenter } from './Box';\nimport { getColorVariant, getTheme } from './modules/helpers';\nimport { getStyledOptions } from './modules/system';\nimport { StyledProps, WithBorder, WithColor, WithFlexItem } from './types';\n\nexport interface AvatarProps extends StyledProps, WithBorder, WithColor, WithFlexItem {\n  image?: string;\n  name: string;\n  /** @default md */\n  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'jumbo';\n  style?: CSSProperties;\n}\n\nconst sizes = {\n  xs: {\n    size: '24px',\n    fontSize: '12px',\n  },\n  sm: {\n    size: '32px',\n    fontSize: '14px',\n  },\n  md: {\n    size: '40px',\n    fontSize: '16px',\n  },\n  lg: {\n    size: '48px',\n    fontSize: '18px',\n  },\n  xl: {\n    size: '56px',\n    fontSize: '20px',\n  },\n  jumbo: {\n    size: '96px',\n    fontSize: '40px',\n  },\n};\n\nconst Circle = styled(\n  'div',\n  getStyledOptions(),\n)<Required<Pick<AvatarProps, 'shade' | 'size' | 'variant'>>>(props => {\n  const { shade, size, variant } = props;\n  const { variants } = getTheme(props);\n  const { bg, color } = getColorVariant(variant, shade, variants);\n  const selectedSize = sizes[size];\n\n  return css`\n    background-color: ${bg};\n    color: ${color};\n    height: ${selectedSize.size};\n    font-size: ${selectedSize.fontSize};\n    line-height: ${selectedSize.size};\n    text-align: center;\n    width: ${selectedSize.size};\n  `;\n});\n\nexport const Avatar = forwardRef<HTMLDivElement, AvatarProps>((props, ref) => {\n  const { image, name, shade = 'mid', size = 'md', variant = 'primary', ...rest } = props;\n\n  const selectedSize = sizes[size];\n\n  return (\n    <BoxCenter\n      ref={ref}\n      data-component-name=\"Avatar\"\n      height={selectedSize.size}\n      overflow=\"hidden\"\n      radius=\"round\"\n      width={selectedSize.size}\n      {...rest}\n    >\n      {image ? (\n        <img alt={name} height={selectedSize.size} src={image} width={selectedSize.size} />\n      ) : (\n        <Circle shade={shade} size={size} variant={variant}>\n          {getInitials(name).toUpperCase()}\n        </Circle>\n      )}\n    </BoxCenter>\n  );\n});\n\nAvatar.defaultProps = {\n  shade: 'mid',\n  size: 'md',\n  variant: 'primary',\n};\n"]},"metadata":{},"sourceType":"module"}