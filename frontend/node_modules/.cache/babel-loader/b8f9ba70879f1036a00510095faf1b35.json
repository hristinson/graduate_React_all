{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport { css } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport { Icon } from './Icon';\nimport { appearanceStyles, baseStyles, colorStyles, displayStyles, getStyledOptions, marginStyles, paddingStyles, textStyles } from './modules/system';\nexport const StyledAnchor = styled('a', getStyledOptions())(props => {\n  const {\n    hideDecoration\n  } = props;\n  return css`\n    ${appearanceStyles};\n    ${baseStyles(props)};\n    align-items: center;\n    color: inherit;\n    cursor: pointer;\n    font-family: inherit;\n    line-height: 1;\n    padding: 0;\n    text-decoration: ${hideDecoration ? 'none' : 'underline'};\n    ${colorStyles(props)};\n    ${displayStyles(props)};\n    ${marginStyles(props)};\n    ${paddingStyles(props)};\n    ${textStyles(props)};\n  `;\n});\nexport const Anchor = forwardRef((props, ref) => {\n  const {\n    children,\n    external,\n    iconAfter,\n    iconBefore\n  } = props;\n  const {\n    fontSize\n  } = textStyles(props);\n  let iconSize;\n\n  if (fontSize) {\n    iconSize = parseInt(`${fontSize}`, 10);\n  }\n\n  const addtionalProps = {};\n\n  if (external) {\n    addtionalProps.rel = 'noopener noreferrer';\n    addtionalProps.target = '_blank';\n  }\n\n  return _jsxs(StyledAnchor, {\n    ref: ref,\n    \"data-component-name\": \"Anchor\",\n    ...addtionalProps,\n    ...props,\n    children: [iconBefore && _jsx(Icon, {\n      mr: \"xxs\",\n      name: iconBefore,\n      size: iconSize\n    }), _jsx(\"span\", {\n      children: children\n    }), iconAfter && _jsx(Icon, {\n      ml: \"xxs\",\n      name: iconAfter,\n      size: iconSize\n    })]\n  });\n});\nAnchor.defaultProps = {\n  bold: false,\n  display: 'inline-flex',\n  external: false,\n  hideDecoration: false,\n  shade: 'mid',\n  variant: 'primary'\n};","map":{"version":3,"mappings":";AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,GAAT,QAAoB,gBAApB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAEA,SAASC,IAAT,QAAqB,QAArB;AACA,SACEC,gBADF,EAEEC,UAFF,EAGEC,WAHF,EAIEC,aAJF,EAKEC,gBALF,EAMEC,YANF,EAOEC,aAPF,EAQEC,UARF,QASO,kBATP;AAwCA,OAAO,MAAMC,YAAY,GAAGV,MAAM,CAChC,GADgC,EAEhCM,gBAAgB,EAFgB,CAAN,CAGbK,KAAK,IAAG;EACrB,MAAM;IAAEC;EAAF,IAAqBD,KAA3B;EAEA,OAAOZ,GAAG;MACNG,gBAAgB;MAChBC,UAAU,CAACQ,KAAD,CAAO;;;;;;;uBAOAC,cAAc,GAAG,MAAH,GAAY,WAAW;MACtDR,WAAW,CAACO,KAAD,CAAO;MAClBN,aAAa,CAACM,KAAD,CAAO;MACpBJ,YAAY,CAACI,KAAD,CAAO;MACnBH,aAAa,CAACG,KAAD,CAAO;MACpBF,UAAU,CAACE,KAAD,CAAO;GAdrB;AAgBD,CAtB2B,CAArB;AAwBP,OAAO,MAAME,MAAM,GAAGf,UAAU,CAAiC,CAACa,KAAD,EAAQG,GAAR,KAAe;EAC9E,MAAM;IAAEC,QAAF;IAAYC,QAAZ;IAAsBC,SAAtB;IAAiCC;EAAjC,IAAgDP,KAAtD;EACA,MAAM;IAAEQ;EAAF,IAAeV,UAAU,CAACE,KAAD,CAA/B;EACA,IAAIS,QAAJ;;EAEA,IAAID,QAAJ,EAAc;IACZC,QAAQ,GAAGC,QAAQ,CAAC,GAAGF,QAAQ,EAAZ,EAAgB,EAAhB,CAAnB;EACD;;EAED,MAAMG,cAAc,GAAQ,EAA5B;;EAEA,IAAIN,QAAJ,EAAc;IACZM,cAAc,CAACC,GAAf,GAAqB,qBAArB;IACAD,cAAc,CAACE,MAAf,GAAwB,QAAxB;EACD;;EAED,OACEC,MAACf,YAAD,EAAa;IAACI,GAAG,EAAEA,GAAN;IAAS,uBAAsB,QAA/B;IAAuC,GAAKQ,cAA5C;IAA0D,GAAMX,KAAhE;IAAqEI,WAC/EG,UAAU,IAAIQ,KAACzB,IAAD,EAAK;MAAC0B,EAAE,EAAC,KAAJ;MAAUC,IAAI,EAAEV,UAAhB;MAA4BW,IAAI,EAAET;IAAlC,CAAL,CADiE,EAEhFM;MAAAX,UAAOA;IAAP,EAFgF,EAG/EE,SAAS,IAAIS,KAACzB,IAAD,EAAK;MAAC6B,EAAE,EAAC,KAAJ;MAAUF,IAAI,EAAEX,SAAhB;MAA2BY,IAAI,EAAET;IAAjC,CAAL,CAHkE;EAArE,CAAb,CADF;AAOD,CAvB+B,CAAzB;AAyBPP,MAAM,CAACkB,YAAP,GAAsB;EACpBC,IAAI,EAAE,KADc;EAEpBC,OAAO,EAAE,aAFW;EAGpBjB,QAAQ,EAAE,KAHU;EAIpBJ,cAAc,EAAE,KAJI;EAKpBsB,KAAK,EAAE,KALa;EAMpBC,OAAO,EAAE;AANW,CAAtB","names":["forwardRef","css","styled","Icon","appearanceStyles","baseStyles","colorStyles","displayStyles","getStyledOptions","marginStyles","paddingStyles","textStyles","StyledAnchor","props","hideDecoration","Anchor","ref","children","external","iconAfter","iconBefore","fontSize","iconSize","parseInt","addtionalProps","rel","target","_jsxs","_jsx","mr","name","size","ml","defaultProps","bold","display","shade","variant"],"sources":["/My_WORK/graduate_React/frontend/node_modules/@gilbarbara/components/src/Anchor.tsx"],"sourcesContent":["import { forwardRef } from 'react';\nimport { css } from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport { Icon } from './Icon';\nimport {\n  appearanceStyles,\n  baseStyles,\n  colorStyles,\n  displayStyles,\n  getStyledOptions,\n  marginStyles,\n  paddingStyles,\n  textStyles,\n} from './modules/system';\nimport {\n  ComponentProps,\n  Icons,\n  StyledProps,\n  WithChildren,\n  WithColor,\n  WithDisplay,\n  WithMargin,\n  WithPadding,\n  WithTextOptions,\n} from './types';\n\nexport interface AnchorKnownProps\n  extends StyledProps,\n    WithChildren,\n    WithColor,\n    WithDisplay,\n    WithMargin,\n    WithPadding,\n    WithTextOptions {\n  external?: boolean;\n  hideDecoration?: boolean;\n  href: string;\n  iconAfter?: Icons;\n  iconBefore?: Icons;\n  name?: string;\n}\n\nexport type AnchorProps = ComponentProps<HTMLAnchorElement, AnchorKnownProps>;\n\nexport const StyledAnchor = styled(\n  'a',\n  getStyledOptions(),\n)<AnchorProps>(props => {\n  const { hideDecoration } = props;\n\n  return css`\n    ${appearanceStyles};\n    ${baseStyles(props)};\n    align-items: center;\n    color: inherit;\n    cursor: pointer;\n    font-family: inherit;\n    line-height: 1;\n    padding: 0;\n    text-decoration: ${hideDecoration ? 'none' : 'underline'};\n    ${colorStyles(props)};\n    ${displayStyles(props)};\n    ${marginStyles(props)};\n    ${paddingStyles(props)};\n    ${textStyles(props)};\n  `;\n});\n\nexport const Anchor = forwardRef<HTMLAnchorElement, AnchorProps>((props, ref) => {\n  const { children, external, iconAfter, iconBefore } = props;\n  const { fontSize } = textStyles(props);\n  let iconSize;\n\n  if (fontSize) {\n    iconSize = parseInt(`${fontSize}`, 10);\n  }\n\n  const addtionalProps: any = {};\n\n  if (external) {\n    addtionalProps.rel = 'noopener noreferrer';\n    addtionalProps.target = '_blank';\n  }\n\n  return (\n    <StyledAnchor ref={ref} data-component-name=\"Anchor\" {...addtionalProps} {...props}>\n      {iconBefore && <Icon mr=\"xxs\" name={iconBefore} size={iconSize} />}\n      <span>{children}</span>\n      {iconAfter && <Icon ml=\"xxs\" name={iconAfter} size={iconSize} />}\n    </StyledAnchor>\n  );\n});\n\nAnchor.defaultProps = {\n  bold: false,\n  display: 'inline-flex',\n  external: false,\n  hideDecoration: false,\n  shade: 'mid',\n  variant: 'primary',\n};\n"]},"metadata":{},"sourceType":"module"}