{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport { css } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport { getTheme, px, responsive as responsiveHelper } from './modules/helpers';\nimport { baseStyles, getStyledOptions, marginStyles, paddingStyles } from './modules/system';\nconst flexMap = {\n  center: 'center',\n  right: 'flex-end',\n  left: 'flex-start',\n  stretch: 'stretch'\n};\nexport const StyledContainer = styled('div', getStyledOptions())(props => {\n  const {\n    align = 'left',\n    fullScreen,\n    fullScreenOffset,\n    responsive,\n    textAlign,\n    verticalAlign,\n    verticalPadding\n  } = props;\n  const {\n    spacing\n  } = getTheme(props);\n  const styles = {\n    alignItems: flexMap[align],\n    justifyContent: verticalAlign,\n    textAlign\n  };\n\n  if (fullScreen) {\n    styles.minHeight = fullScreenOffset ? `calc(100vh - ${px(fullScreenOffset)})` : '100vh';\n  }\n\n  return css`\n    ${baseStyles(props)};\n    display: flex;\n    flex-direction: column;\n    margin-left: auto;\n    margin-right: auto;\n    padding-left: ${spacing.md};\n    padding-right: ${spacing.md};\n    ${responsive && responsiveHelper({\n    lg: {\n      paddingLeft: spacing.xl,\n      paddingRight: spacing.xl\n    }\n  })};\n    ${verticalPadding && css`\n      padding-bottom: ${spacing.md};\n      padding-top: ${spacing.md};\n    `};\n    ${responsive && verticalPadding && responsiveHelper({\n    lg: {\n      paddingBottom: spacing.xl,\n      paddingTop: spacing.xl\n    }\n  })}\n    position: relative;\n    width: 100%;\n    ${css(styles)};\n\n    ${marginStyles(props)};\n    ${paddingStyles(props, true)};\n  `;\n});\nexport const Container = forwardRef((props, ref) => {\n  return _jsx(StyledContainer, {\n    ref: ref,\n    \"data-component-name\": \"Container\",\n    ...props\n  });\n});\nContainer.defaultProps = {\n  align: 'stretch',\n  fullScreen: false,\n  responsive: true,\n  textAlign: 'left',\n  verticalAlign: 'start',\n  verticalPadding: false\n};","map":{"version":3,"mappings":";AAAA,SAAwBA,UAAxB,QAA0C,OAA1C;AACA,SAASC,GAAT,QAA+B,gBAA/B;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAGA,SAASC,QAAT,EAAmBC,EAAnB,EAAuBC,UAAU,IAAIC,gBAArC,QAA6D,mBAA7D;AACA,SAASC,UAAT,EAAqBC,gBAArB,EAAuCC,YAAvC,EAAqDC,aAArD,QAA0E,kBAA1E;AA8BA,MAAMC,OAAO,GAAG;EACdC,MAAM,EAAE,QADM;EAEdC,KAAK,EAAE,UAFO;EAGdC,IAAI,EAAE,YAHQ;EAIdC,OAAO,EAAE;AAJK,CAAhB;AAOA,OAAO,MAAMC,eAAe,GAAGd,MAAM,CACnC,KADmC,EAEnCM,gBAAgB,EAFmB,CAAN,CAGbS,KAAK,IAAG;EACxB,MAAM;IACJC,KAAK,GAAG,MADJ;IAEJC,UAFI;IAGJC,gBAHI;IAIJf,UAJI;IAKJgB,SALI;IAMJC,aANI;IAOJC;EAPI,IAQFN,KARJ;EASA,MAAM;IAAEO;EAAF,IAAcrB,QAAQ,CAACc,KAAD,CAA5B;EACA,MAAMQ,MAAM,GAAc;IACxBC,UAAU,EAAEf,OAAO,CAACO,KAAD,CADK;IAExBS,cAAc,EAAEL,aAFQ;IAGxBD;EAHwB,CAA1B;;EAMA,IAAIF,UAAJ,EAAgB;IACdM,MAAM,CAACG,SAAP,GAAmBR,gBAAgB,GAAG,gBAAgBhB,EAAE,CAACgB,gBAAD,CAAkB,GAAvC,GAA6C,OAAhF;EACD;;EAED,OAAOnB,GAAG;MACNM,UAAU,CAACU,KAAD,CAAO;;;;;oBAKHO,OAAO,CAACK,EAAE;qBACTL,OAAO,CAACK,EAAE;MACzBxB,UAAU,IACZC,gBAAgB,CAAC;IACfwB,EAAE,EAAE;MACFC,WAAW,EAAEP,OAAO,CAACQ,EADnB;MAEFC,YAAY,EAAET,OAAO,CAACQ;IAFpB;EADW,CAAD,CAKd;MACAT,eAAe,IACjBtB,GAAG;wBACiBuB,OAAO,CAACK,EAAE;qBACbL,OAAO,CAACK,EAAE;KAC1B;MACCxB,UAAU,IACZkB,eADE,IAEFjB,gBAAgB,CAAC;IACfwB,EAAE,EAAE;MACFI,aAAa,EAAEV,OAAO,CAACQ,EADrB;MAEFG,UAAU,EAAEX,OAAO,CAACQ;IAFlB;EADW,CAAD,CAKd;;;MAGA/B,GAAG,CAACwB,MAAD,CAAQ;;MAEXhB,YAAY,CAACQ,KAAD,CAAO;MACnBP,aAAa,CAACO,KAAD,EAAQ,IAAR,CAAa;GAjC9B;AAmCD,CA3D8B,CAAxB;AA6DP,OAAO,MAAMmB,SAAS,GAAGpC,UAAU,CAAiC,CAACiB,KAAD,EAAQoB,GAAR,KAAe;EACjF,OAAOC,KAACtB,eAAD,EAAgB;IAACqB,GAAG,EAAEA,GAAN;IAAS,uBAAsB,WAA/B;IAA0C,GAAKpB;EAA/C,CAAhB,CAAP;AACD,CAFkC,CAA5B;AAIPmB,SAAS,CAACG,YAAV,GAAyB;EACvBrB,KAAK,EAAE,SADgB;EAEvBC,UAAU,EAAE,KAFW;EAGvBd,UAAU,EAAE,IAHW;EAIvBgB,SAAS,EAAE,MAJY;EAKvBC,aAAa,EAAE,OALQ;EAMvBC,eAAe,EAAE;AANM,CAAzB","names":["forwardRef","css","styled","getTheme","px","responsive","responsiveHelper","baseStyles","getStyledOptions","marginStyles","paddingStyles","flexMap","center","right","left","stretch","StyledContainer","props","align","fullScreen","fullScreenOffset","textAlign","verticalAlign","verticalPadding","spacing","styles","alignItems","justifyContent","minHeight","md","lg","paddingLeft","xl","paddingRight","paddingBottom","paddingTop","Container","ref","_jsx","defaultProps"],"sources":["/My_WORK/graduate_React/frontend/node_modules/@gilbarbara/components/src/Container.tsx"],"sourcesContent":["import { CSSProperties, forwardRef } from 'react';\nimport { css, CSSObject } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport { StringOrNumber } from '@gilbarbara/types';\n\nimport { getTheme, px, responsive as responsiveHelper } from './modules/helpers';\nimport { baseStyles, getStyledOptions, marginStyles, paddingStyles } from './modules/system';\nimport {\n  Alignment,\n  ComponentProps,\n  StyledProps,\n  WithChildren,\n  WithMargin,\n  WithPadding,\n} from './types';\n\nexport interface ContainerKnownProps extends StyledProps, WithChildren, WithMargin, WithPadding {\n  /** @default left */\n  align?: Alignment | 'stretch';\n  fullScreen?: boolean;\n  fullScreenOffset?: StringOrNumber;\n  /**\n   * Updates the padding for large screens.\n   * @default true\n   */\n  responsive?: boolean;\n  style?: CSSProperties;\n  /** @default left */\n  textAlign?: Alignment;\n  /** @default start */\n  verticalAlign?: 'start' | 'center' | 'end' | 'space-between' | 'space-around' | 'space-evenly';\n  verticalPadding?: boolean;\n}\n\nexport type ContainerProps = ComponentProps<HTMLDivElement, ContainerKnownProps>;\n\nconst flexMap = {\n  center: 'center',\n  right: 'flex-end',\n  left: 'flex-start',\n  stretch: 'stretch',\n};\n\nexport const StyledContainer = styled(\n  'div',\n  getStyledOptions(),\n)<ContainerProps>(props => {\n  const {\n    align = 'left',\n    fullScreen,\n    fullScreenOffset,\n    responsive,\n    textAlign,\n    verticalAlign,\n    verticalPadding,\n  } = props;\n  const { spacing } = getTheme(props);\n  const styles: CSSObject = {\n    alignItems: flexMap[align],\n    justifyContent: verticalAlign,\n    textAlign,\n  };\n\n  if (fullScreen) {\n    styles.minHeight = fullScreenOffset ? `calc(100vh - ${px(fullScreenOffset)})` : '100vh';\n  }\n\n  return css`\n    ${baseStyles(props)};\n    display: flex;\n    flex-direction: column;\n    margin-left: auto;\n    margin-right: auto;\n    padding-left: ${spacing.md};\n    padding-right: ${spacing.md};\n    ${responsive &&\n    responsiveHelper({\n      lg: {\n        paddingLeft: spacing.xl,\n        paddingRight: spacing.xl,\n      },\n    })};\n    ${verticalPadding &&\n    css`\n      padding-bottom: ${spacing.md};\n      padding-top: ${spacing.md};\n    `};\n    ${responsive &&\n    verticalPadding &&\n    responsiveHelper({\n      lg: {\n        paddingBottom: spacing.xl,\n        paddingTop: spacing.xl,\n      },\n    })}\n    position: relative;\n    width: 100%;\n    ${css(styles)};\n\n    ${marginStyles(props)};\n    ${paddingStyles(props, true)};\n  `;\n});\n\nexport const Container = forwardRef<HTMLDivElement, ContainerProps>((props, ref) => {\n  return <StyledContainer ref={ref} data-component-name=\"Container\" {...props} />;\n});\n\nContainer.defaultProps = {\n  align: 'stretch',\n  fullScreen: false,\n  responsive: true,\n  textAlign: 'left',\n  verticalAlign: 'start',\n  verticalPadding: false,\n};\n"]},"metadata":{},"sourceType":"module"}