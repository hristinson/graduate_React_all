{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { css } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport { getColorVariant, getTheme, px } from './modules/helpers';\nimport { baseStyles, getStyledOptions, marginStyles, textStyles } from './modules/system';\nconst borderSizes = {\n  sm: '1px',\n  md: '2px',\n  lg: '4px'\n};\nconst StyledDivider = styled('div', getStyledOptions('type'))(props => {\n  const {\n    align,\n    borderSize = 'sm',\n    borderStyle,\n    children,\n    direction,\n    gap = 'xs',\n    length = '100%',\n    shade,\n    variant = 'gray'\n  } = props;\n  const {\n    spacing,\n    variants\n  } = getTheme(props);\n  const isHorizontal = direction === 'horizontal';\n  const {\n    bg\n  } = getColorVariant(variant, shade, variants);\n  const selectedDimension = borderSizes[borderSize];\n  const margin = isHorizontal ? css`\n        margin-bottom: ${spacing.md};\n        margin-top: ${spacing.md};\n      ` : css`\n        margin-left: ${spacing.md};\n        margin-right: ${spacing.md};\n      `;\n\n  if (isHorizontal && children) {\n    let borderLeftWidth = '50%';\n    let borderRightWidth = '50%';\n\n    if (align === 'left') {\n      borderLeftWidth = '5%';\n      borderRightWidth = 'calc(95%)';\n    }\n\n    if (align === 'right') {\n      borderLeftWidth = 'calc(95%)';\n      borderRightWidth = '5%';\n    }\n\n    return css`\n      ${baseStyles(props)};\n      align-items: center;\n      color: ${bg};\n      display: flex;\n      flex-direction: row;\n      line-height: 1;\n      position: relative;\n      ${margin};\n      width: ${px(length)};\n      ${marginStyles(props)};\n      ${textStyles(props)};\n\n      &:before,\n      &:after {\n        content: '';\n        border-top: ${borderSizes[borderSize]} ${borderStyle} ${bg};\n      }\n\n      &:before {\n        margin-right: ${spacing[gap]};\n        width: ${borderLeftWidth};\n      }\n\n      &:after {\n        margin-left: ${spacing[gap]};\n        width: ${borderRightWidth};\n      }\n    `;\n  }\n\n  return css`\n    border-bottom: ${isHorizontal ? `${selectedDimension} ${borderStyle} ${bg}` : undefined};\n    border-left: ${isHorizontal ? undefined : `${selectedDimension} ${borderStyle} ${bg}`};\n    height: ${isHorizontal ? undefined : px(length)};\n    ${margin};\n    text-indent: -9999px;\n    width: ${px(isHorizontal ? length : selectedDimension)};\n    ${marginStyles(props)};\n  `;\n});\nexport function Divider(props) {\n  return _jsx(StyledDivider, {\n    \"data-component-name\": \"Divider\",\n    role: \"separator\",\n    ...props\n  });\n}\nDivider.defaultProps = {\n  align: 'center',\n  borderSize: 'sm',\n  borderStyle: 'solid',\n  direction: 'horizontal',\n  gap: 'xs',\n  length: '100%',\n  shade: 'light',\n  size: 'regular',\n  variant: 'gray'\n};","map":{"version":3,"mappings":"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","names":["css","styled","getColorVariant","getTheme","px","baseStyles","getStyledOptions","marginStyles","textStyles","borderSizes","sm","md","lg","StyledDivider","props","align","borderSize","borderStyle","children","direction","gap","length","shade","variant","spacing","variants","isHorizontal","bg","selectedDimension","margin","borderLeftWidth","borderRightWidth","undefined","Divider","_jsx","role","defaultProps","size"],"sources":["/My_WORK/graduate_React/frontend/node_modules/@gilbarbara/components/src/Divider.tsx"],"sourcesContent":["import { css } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport { StringOrNumber } from '@gilbarbara/types';\n\nimport { getColorVariant, getTheme, px } from './modules/helpers';\nimport { baseStyles, getStyledOptions, marginStyles, textStyles } from './modules/system';\nimport {\n  ComponentProps,\n  Direction,\n  Sizes,\n  Spacing,\n  StyledProps,\n  WithAlign,\n  WithChildrenOptional,\n  WithColor,\n  WithMargin,\n  WithTextSize,\n} from './types';\n\nexport interface DividerKnownProps\n  extends StyledProps,\n    WithAlign,\n    WithChildrenOptional,\n    WithColor,\n    WithMargin,\n    WithTextSize {\n  /** @default sm */\n  borderSize?: Sizes;\n  /** @default solid */\n  borderStyle?: 'solid' | 'dashed' | 'dotted';\n  /** @default horizontal */\n  direction?: Direction;\n  /**\n   * The distance between the text and borders\n   *\n   * @default xs\n   */\n  gap?: Spacing;\n  /**\n   * The width (for horizontal) or height (for vertical)\n   *\n   * @default 100%\n   */\n  length?: StringOrNumber;\n}\n\nexport type DividerProps = ComponentProps<HTMLDivElement, DividerKnownProps>;\n\nconst borderSizes = {\n  sm: '1px',\n  md: '2px',\n  lg: '4px',\n};\n\nconst StyledDivider = styled(\n  'div',\n  getStyledOptions('type'),\n)<DividerProps>(props => {\n  const {\n    align,\n    borderSize = 'sm',\n    borderStyle,\n    children,\n    direction,\n    gap = 'xs',\n    length = '100%',\n    shade,\n    variant = 'gray',\n  } = props;\n  const { spacing, variants } = getTheme(props);\n  const isHorizontal = direction === 'horizontal';\n\n  const { bg } = getColorVariant(variant, shade, variants);\n\n  const selectedDimension = borderSizes[borderSize];\n  const margin = isHorizontal\n    ? css`\n        margin-bottom: ${spacing.md};\n        margin-top: ${spacing.md};\n      `\n    : css`\n        margin-left: ${spacing.md};\n        margin-right: ${spacing.md};\n      `;\n\n  if (isHorizontal && children) {\n    let borderLeftWidth = '50%';\n    let borderRightWidth = '50%';\n\n    if (align === 'left') {\n      borderLeftWidth = '5%';\n      borderRightWidth = 'calc(95%)';\n    }\n\n    if (align === 'right') {\n      borderLeftWidth = 'calc(95%)';\n      borderRightWidth = '5%';\n    }\n\n    return css`\n      ${baseStyles(props)};\n      align-items: center;\n      color: ${bg};\n      display: flex;\n      flex-direction: row;\n      line-height: 1;\n      position: relative;\n      ${margin};\n      width: ${px(length)};\n      ${marginStyles(props)};\n      ${textStyles(props)};\n\n      &:before,\n      &:after {\n        content: '';\n        border-top: ${borderSizes[borderSize]} ${borderStyle} ${bg};\n      }\n\n      &:before {\n        margin-right: ${spacing[gap]};\n        width: ${borderLeftWidth};\n      }\n\n      &:after {\n        margin-left: ${spacing[gap]};\n        width: ${borderRightWidth};\n      }\n    `;\n  }\n\n  return css`\n    border-bottom: ${isHorizontal ? `${selectedDimension} ${borderStyle} ${bg}` : undefined};\n    border-left: ${isHorizontal ? undefined : `${selectedDimension} ${borderStyle} ${bg}`};\n    height: ${isHorizontal ? undefined : px(length)};\n    ${margin};\n    text-indent: -9999px;\n    width: ${px(isHorizontal ? length : selectedDimension)};\n    ${marginStyles(props)};\n  `;\n});\n\nexport function Divider(props: DividerProps): JSX.Element {\n  return <StyledDivider data-component-name=\"Divider\" role=\"separator\" {...props} />;\n}\n\nDivider.defaultProps = {\n  align: 'center',\n  borderSize: 'sm',\n  borderStyle: 'solid',\n  direction: 'horizontal',\n  gap: 'xs',\n  length: '100%',\n  shade: 'light',\n  size: 'regular',\n  variant: 'gray',\n};\n"]},"metadata":{},"sourceType":"module"}