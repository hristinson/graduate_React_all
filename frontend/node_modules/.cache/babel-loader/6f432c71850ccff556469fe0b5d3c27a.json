{"ast":null,"code":"import { isValidEmail, validatePassword as checkPassword } from '@gilbarbara/helpers';\nimport { clearNumber } from './helpers';\nexport function validateEmail(value) {\n  return isValidEmail(value) || 'Invalid email address';\n}\nexport function validateMatchField(compare, value) {\n  let message = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"Confirmation doesn't match\";\n  return compare === value || message;\n}\nexport function validatePassword(value) {\n  try {\n    checkPassword(value);\n    return true;\n  } catch (error) {\n    return error.message;\n  }\n}\n/**\n * Validate phone\n */\n\nexport function validatePhoneBR(value) {\n  if (!value) {\n    return undefined;\n  }\n\n  return /^\\d{10,11}$/.test(clearNumber(value)) || 'Invalid phone';\n}","map":{"version":3,"mappings":"AAAA,SAASA,YAAT,EAAuBC,gBAAgB,IAAIC,aAA3C,QAAgE,qBAAhE;AAEA,SAASC,WAAT,QAA4B,WAA5B;AAEA,OAAM,SAAUC,aAAV,CAAwBC,KAAxB,EAAqC;EACzC,OAAOL,YAAY,CAACK,KAAD,CAAZ,IAAuB,uBAA9B;AACD;AAED,OAAM,SAAUC,kBAAV,CACJC,OADI,EAEJF,KAFI,EAGkC;EAAA,IAAtCG,OAAsC,uEAA5B,4BAA4B;EAEtC,OAAOD,OAAO,KAAKF,KAAZ,IAAqBG,OAA5B;AACD;AAED,OAAM,SAAUP,gBAAV,CAA2BI,KAA3B,EAAwC;EAC5C,IAAI;IACFH,aAAa,CAACG,KAAD,CAAb;IAEA,OAAO,IAAP;EACD,CAJD,CAIE,OAAOI,KAAP,EAAmB;IACnB,OAAOA,KAAK,CAACD,OAAb;EACD;AACF;AAED;;;;AAGA,OAAM,SAAUE,eAAV,CAA0BL,KAA1B,EAAwC;EAC5C,IAAI,CAACA,KAAL,EAAY;IACV,OAAOM,SAAP;EACD;;EAED,OAAO,cAAcC,IAAd,CAAmBT,WAAW,CAACE,KAAD,CAA9B,KAA0C,eAAjD;AACD","names":["isValidEmail","validatePassword","checkPassword","clearNumber","validateEmail","value","validateMatchField","compare","message","error","validatePhoneBR","undefined","test"],"sources":["/My_WORK/graduate_React/frontend/node_modules/@gilbarbara/components/src/modules/validations.ts"],"sourcesContent":["import { isValidEmail, validatePassword as checkPassword } from '@gilbarbara/helpers';\n\nimport { clearNumber } from './helpers';\n\nexport function validateEmail(value: string) {\n  return isValidEmail(value) || 'Invalid email address';\n}\n\nexport function validateMatchField(\n  compare: string,\n  value: string,\n  message = \"Confirmation doesn't match\",\n) {\n  return compare === value || message;\n}\n\nexport function validatePassword(value: string) {\n  try {\n    checkPassword(value);\n\n    return true;\n  } catch (error: any) {\n    return error.message;\n  }\n}\n\n/**\n * Validate phone\n */\nexport function validatePhoneBR(value?: string) {\n  if (!value) {\n    return undefined;\n  }\n\n  return /^\\d{10,11}$/.test(clearNumber(value)) || 'Invalid phone';\n}\n"]},"metadata":{},"sourceType":"module"}