{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { DayPicker } from 'react-day-picker';\nimport styled from '@emotion/styled';\nimport { omit } from '@gilbarbara/helpers';\nimport { defaultProps, getFooter, getRange, getStyles } from './utils';\nimport { getStyledOptions } from '../modules/system';\nconst StyledDatePicker = styled('div', getStyledOptions())(props => {\n  return getStyles(props);\n});\nexport function DatePicker(props) {\n  const {\n    currentMonthLabel,\n    fromDate,\n    onSelect,\n    toDate,\n    variant,\n    ...rest\n  } = props;\n  const [selected, setSelected] = useState(undefined);\n  const [month, setMonth] = useState(undefined);\n\n  const handleSelect = (_day, selectedDay, modifiers) => {\n    if (modifiers.disabled || modifiers.outside) {\n      return;\n    }\n\n    let nextDate = selectedDay;\n\n    if (selected && selected.toISOString() === selectedDay.toISOString()) {\n      nextDate = undefined;\n    }\n\n    setSelected(nextDate);\n\n    if (onSelect) {\n      onSelect(nextDate ? selectedDay.toISOString() : '');\n    }\n  };\n\n  return _jsx(StyledDatePicker, {\n    \"data-component-name\": \"DatePicker\",\n    ...omit(props, 'hidden', 'onDayClick', 'onSelect'),\n    children: _jsx(DayPicker, {\n      footer: getFooter(setMonth, currentMonthLabel),\n      mode: \"single\",\n      month: month,\n      onMonthChange: setMonth,\n      onSelect: handleSelect,\n      selected: selected,\n      ...getRange(fromDate, toDate),\n      ...rest\n    })\n  });\n}\nDatePicker.defaultProps = defaultProps;","map":{"version":3,"mappings":";AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,SAAT,QAA0E,kBAA1E;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,SAASC,IAAT,QAAqB,qBAArB;AAGA,SAASC,YAAT,EAAuBC,SAAvB,EAAkCC,QAAlC,EAA4CC,SAA5C,QAA6D,SAA7D;AAEA,SAASC,gBAAT,QAAiC,mBAAjC;AAMA,MAAMC,gBAAgB,GAAGP,MAAM,CAC7B,KAD6B,EAE7BM,gBAAgB,EAFa,CAAN,CAGAE,KAAK,IAAG;EAC/B,OAAOH,SAAS,CAACG,KAAD,CAAhB;AACD,CALwB,CAAzB;AAOA,OAAM,SAAUC,UAAV,CAAqBD,KAArB,EAAiD;EACrD,MAAM;IAAEE,iBAAF;IAAqBC,QAArB;IAA+BC,QAA/B;IAAyCC,MAAzC;IAAiDC,OAAjD;IAA0D,GAAGC;EAA7D,IAAsEP,KAA5E;EACA,MAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BnB,QAAQ,CAAmBoB,SAAnB,CAAxC;EACA,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBtB,QAAQ,CAAmBoB,SAAnB,CAAlC;;EAEA,MAAMG,YAAY,GAA6B,CAACC,IAAD,EAAOC,WAAP,EAAoBC,SAApB,KAAiC;IAC9E,IAAIA,SAAS,CAACC,QAAV,IAAsBD,SAAS,CAACE,OAApC,EAA6C;MAC3C;IACD;;IAED,IAAIC,QAAQ,GAAqBJ,WAAjC;;IAEA,IAAIP,QAAQ,IAAIA,QAAQ,CAACY,WAAT,OAA2BL,WAAW,CAACK,WAAZ,EAA3C,EAAsE;MACpED,QAAQ,GAAGT,SAAX;IACD;;IAEDD,WAAW,CAACU,QAAD,CAAX;;IAEA,IAAIf,QAAJ,EAAc;MACZA,QAAQ,CAACe,QAAQ,GAAGJ,WAAW,CAACK,WAAZ,EAAH,GAA+B,EAAxC,CAAR;IACD;EACF,CAhBD;;EAkBA,OACEC,KAACtB,gBAAD,EAAiB;IAAA,uBACK,YADL;IACiB,GAC5BN,IAAI,CAACO,KAAD,EAAQ,QAAR,EAAkB,YAAlB,EAAgC,UAAhC,CAFO;IAEoCsB,UAEnDD,KAAC9B,SAAD,EAAU;MACRgC,MAAM,EAAE5B,SAAS,CAACiB,QAAD,EAAWV,iBAAX,CADT;MAERsB,IAAI,EAAC,QAFG;MAGRb,KAAK,EAAEA,KAHC;MAIRc,aAAa,EAAEb,QAJP;MAKRR,QAAQ,EAAES,YALF;MAMRL,QAAQ,EAAEA,QANF;MAMU,GACdZ,QAAQ,CAAuBO,QAAvB,EAAiCE,MAAjC,CAPJ;MAO4C,GAChDE;IARI,CAAV;EAJe,CAAjB,CADF;AAiBD;AAEDN,UAAU,CAACP,YAAX,GAA0BA,YAA1B","names":["useState","DayPicker","styled","omit","defaultProps","getFooter","getRange","getStyles","getStyledOptions","StyledDatePicker","props","DatePicker","currentMonthLabel","fromDate","onSelect","toDate","variant","rest","selected","setSelected","undefined","month","setMonth","handleSelect","_day","selectedDay","modifiers","disabled","outside","nextDate","toISOString","_jsx","children","footer","mode","onMonthChange"],"sources":["/My_WORK/graduate_React/frontend/node_modules/@gilbarbara/components/src/DatePicker/Single.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { DayPicker, DayPickerSingleProps, SelectSingleEventHandler } from 'react-day-picker';\nimport styled from '@emotion/styled';\nimport { omit } from '@gilbarbara/helpers';\n\nimport { DatePickerLayoutProps, DatePickerProps, DatePickerSingleClickHandler } from './types';\nimport { defaultProps, getFooter, getRange, getStyles } from './utils';\n\nimport { getStyledOptions } from '../modules/system';\n\nexport interface DatePickerSingleProps\n  extends DatePickerProps<DatePickerSingleClickHandler, 'single'>,\n    DatePickerLayoutProps {}\n\nconst StyledDatePicker = styled(\n  'div',\n  getStyledOptions(),\n)<DatePickerSingleProps>(props => {\n  return getStyles(props);\n});\n\nexport function DatePicker(props: DatePickerSingleProps): JSX.Element {\n  const { currentMonthLabel, fromDate, onSelect, toDate, variant, ...rest } = props;\n  const [selected, setSelected] = useState<Date | undefined>(undefined);\n  const [month, setMonth] = useState<Date | undefined>(undefined);\n\n  const handleSelect: SelectSingleEventHandler = (_day, selectedDay, modifiers) => {\n    if (modifiers.disabled || modifiers.outside) {\n      return;\n    }\n\n    let nextDate: Date | undefined = selectedDay;\n\n    if (selected && selected.toISOString() === selectedDay.toISOString()) {\n      nextDate = undefined;\n    }\n\n    setSelected(nextDate);\n\n    if (onSelect) {\n      onSelect(nextDate ? selectedDay.toISOString() : '');\n    }\n  };\n\n  return (\n    <StyledDatePicker\n      data-component-name=\"DatePicker\"\n      {...omit(props, 'hidden', 'onDayClick', 'onSelect')}\n    >\n      <DayPicker\n        footer={getFooter(setMonth, currentMonthLabel)}\n        mode=\"single\"\n        month={month}\n        onMonthChange={setMonth}\n        onSelect={handleSelect}\n        selected={selected}\n        {...getRange<DayPickerSingleProps>(fromDate, toDate)}\n        {...rest}\n      />\n    </StyledDatePicker>\n  );\n}\n\nDatePicker.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}