{"ast":null,"code":"import hue2rgb from './modules/hue2rgb';\nimport { invariant, isHSL, messages, round } from './modules/utils';\n/**\n * Convert an HSL object to RGB.\n */\n\nexport default function hsl2rgb(input) {\n  invariant(!!input, messages.inputString);\n  invariant(isHSL(input), 'invalid input');\n  const h = round(input.h) / 360;\n  const s = round(input.s) / 100;\n  const l = round(input.l) / 100;\n  let r;\n  let g;\n  let b;\n  let point;\n  let chroma;\n\n  if (s === 0) {\n    r = l;\n    g = l;\n    b = l;\n  } else {\n    chroma = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    point = 2 * l - chroma;\n    r = hue2rgb(point, chroma, h + 1 / 3);\n    g = hue2rgb(point, chroma, h);\n    b = hue2rgb(point, chroma, h - 1 / 3);\n  }\n\n  return {\n    r: Math.round(r * 255),\n    g: Math.round(g * 255),\n    b: Math.round(b * 255)\n  };\n}","map":{"version":3,"mappings":"AAAA,OAAOA,OAAP,MAAoB,mBAApB;AACA,SAASC,SAAT,EAAoBC,KAApB,EAA2BC,QAA3B,EAAqCC,KAArC,QAAkD,iBAAlD;AAGA;;;;AAGA,eAAc,SAAUC,OAAV,CAAkBC,KAAlB,EAA4B;EACxCL,SAAS,CAAC,CAAC,CAACK,KAAH,EAAUH,QAAQ,CAACI,WAAnB,CAAT;EAEAN,SAAS,CAACC,KAAK,CAACI,KAAD,CAAN,EAAe,eAAf,CAAT;EAEA,MAAME,CAAC,GAAGJ,KAAK,CAACE,KAAK,CAACE,CAAP,CAAL,GAAiB,GAA3B;EACA,MAAMC,CAAC,GAAGL,KAAK,CAACE,KAAK,CAACG,CAAP,CAAL,GAAiB,GAA3B;EACA,MAAMC,CAAC,GAAGN,KAAK,CAACE,KAAK,CAACI,CAAP,CAAL,GAAiB,GAA3B;EAEA,IAAIC,CAAJ;EACA,IAAIC,CAAJ;EACA,IAAIC,CAAJ;EAEA,IAAIC,KAAJ;EACA,IAAIC,MAAJ;;EAEA,IAAIN,CAAC,KAAK,CAAV,EAAa;IACXE,CAAC,GAAGD,CAAJ;IACAE,CAAC,GAAGF,CAAJ;IACAG,CAAC,GAAGH,CAAJ;EACD,CAJD,MAIO;IACLK,MAAM,GAAGL,CAAC,GAAG,GAAJ,GAAUA,CAAC,IAAI,IAAID,CAAR,CAAX,GAAwBC,CAAC,GAAGD,CAAJ,GAAQC,CAAC,GAAGD,CAA7C;IACAK,KAAK,GAAG,IAAIJ,CAAJ,GAAQK,MAAhB;IAEAJ,CAAC,GAAGX,OAAO,CAACc,KAAD,EAAQC,MAAR,EAAgBP,CAAC,GAAG,IAAI,CAAxB,CAAX;IACAI,CAAC,GAAGZ,OAAO,CAACc,KAAD,EAAQC,MAAR,EAAgBP,CAAhB,CAAX;IACAK,CAAC,GAAGb,OAAO,CAACc,KAAD,EAAQC,MAAR,EAAgBP,CAAC,GAAG,IAAI,CAAxB,CAAX;EACD;;EAED,OAAO;IACLG,CAAC,EAAEK,IAAI,CAACZ,KAAL,CAAWO,CAAC,GAAG,GAAf,CADE;IAELC,CAAC,EAAEI,IAAI,CAACZ,KAAL,CAAWQ,CAAC,GAAG,GAAf,CAFE;IAGLC,CAAC,EAAEG,IAAI,CAACZ,KAAL,CAAWS,CAAC,GAAG,GAAf;EAHE,CAAP;AAKD","names":["hue2rgb","invariant","isHSL","messages","round","hsl2rgb","input","inputString","h","s","l","r","g","b","point","chroma","Math"],"sources":["/My_WORK/graduate_React/frontend/node_modules/colorizr/src/hsl2rgb.ts"],"sourcesContent":["import hue2rgb from './modules/hue2rgb';\nimport { invariant, isHSL, messages, round } from './modules/utils';\nimport { HSL, RGB } from './types';\n\n/**\n * Convert an HSL object to RGB.\n */\nexport default function hsl2rgb(input: HSL): RGB {\n  invariant(!!input, messages.inputString);\n\n  invariant(isHSL(input), 'invalid input');\n\n  const h = round(input.h) / 360;\n  const s = round(input.s) / 100;\n  const l = round(input.l) / 100;\n\n  let r;\n  let g;\n  let b;\n\n  let point;\n  let chroma;\n\n  if (s === 0) {\n    r = l;\n    g = l;\n    b = l;\n  } else {\n    chroma = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    point = 2 * l - chroma;\n\n    r = hue2rgb(point, chroma, h + 1 / 3);\n    g = hue2rgb(point, chroma, h);\n    b = hue2rgb(point, chroma, h - 1 / 3);\n  }\n\n  return {\n    r: Math.round(r * 255),\n    g: Math.round(g * 255),\n    b: Math.round(b * 255),\n  };\n}\n"]},"metadata":{},"sourceType":"module"}