{"ast":null,"code":"import { useEffect, useRef } from 'react';\nimport equal from '@gilbarbara/deep-equal';\nimport treeChanges from 'tree-changes';\nexport default function useTreeChanges(value) {\n  var previousValue = useRef(value);\n  var isEqual = equal(previousValue.current, value);\n  var previousIsEqual = useRef(isEqual);\n  var instance = useRef(treeChanges(previousValue.current, value));\n  useEffect(function () {\n    previousValue.current = value;\n  });\n\n  if (previousIsEqual.current !== isEqual || !isEqual) {\n    previousIsEqual.current = isEqual;\n    instance.current = treeChanges(previousValue.current, value);\n  }\n\n  return instance.current;\n} // eslint-disable-next-line unicorn/prefer-export-from\n\nexport { treeChanges };\nexport * from 'tree-changes';","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,OAAOC,WAAP,MAAwD,cAAxD;AAEA,eAAc,SAAUC,cAAV,CAAyCC,KAAzC,EAAiD;EAC7D,IAAMC,aAAa,GAAGL,MAAM,CAACI,KAAD,CAA5B;EACA,IAAME,OAAO,GAAGL,KAAK,CAACI,aAAa,CAACE,OAAf,EAAwBH,KAAxB,CAArB;EACA,IAAMI,eAAe,GAAGR,MAAM,CAACM,OAAD,CAA9B;EACA,IAAMG,QAAQ,GAAGT,MAAM,CACrBE,WAAW,CAACG,aAAa,CAACE,OAAf,EAAwBH,KAAxB,CADU,CAAvB;EAIAL,SAAS,CAAC;IACRM,aAAa,CAACE,OAAd,GAAwBH,KAAxB;EACD,CAFQ,CAAT;;EAIA,IAAII,eAAe,CAACD,OAAhB,KAA4BD,OAA5B,IAAuC,CAACA,OAA5C,EAAqD;IACnDE,eAAe,CAACD,OAAhB,GAA0BD,OAA1B;IACAG,QAAQ,CAACF,OAAT,GAAmBL,WAAW,CAACG,aAAa,CAACE,OAAf,EAAwBH,KAAxB,CAA9B;EACD;;EAED,OAAOK,QAAQ,CAACF,OAAhB;AACD,C,CAED;;AACA,SAASL,WAAT;AACA,cAAc,cAAd","names":["useEffect","useRef","equal","treeChanges","useTreeChanges","value","previousValue","isEqual","current","previousIsEqual","instance"],"sources":["/My_WORK/graduate_React/frontend/node_modules/tree-changes-hook/src/index.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\nimport equal from '@gilbarbara/deep-equal';\nimport treeChanges, { Data, KeyType, TreeChanges } from 'tree-changes';\n\nexport default function useTreeChanges<T extends Data>(value: T) {\n  const previousValue = useRef(value);\n  const isEqual = equal(previousValue.current, value);\n  const previousIsEqual = useRef(isEqual);\n  const instance = useRef<TreeChanges<KeyType<T, typeof previousValue.current>>>(\n    treeChanges(previousValue.current, value),\n  );\n\n  useEffect(() => {\n    previousValue.current = value;\n  });\n\n  if (previousIsEqual.current !== isEqual || !isEqual) {\n    previousIsEqual.current = isEqual;\n    instance.current = treeChanges(previousValue.current, value);\n  }\n\n  return instance.current;\n}\n\n// eslint-disable-next-line unicorn/prefer-export-from\nexport { treeChanges };\nexport * from 'tree-changes';\n"]},"metadata":{},"sourceType":"module"}