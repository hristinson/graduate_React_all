{"ast":null,"code":"import { Children, cloneElement, isValidElement } from 'react';\nimport { css } from '@emotion/react';\nimport { omit } from '@gilbarbara/helpers';\nimport { deepmergeCustom } from 'deepmerge-ts';\nimport is from 'is-lite';\nimport { getColorScale, getGrayScale } from './colors';\nimport * as theme from './theme';\nconst {\n  black,\n  breakpoints,\n  white\n} = theme;\nconst deepmerge = deepmergeCustom({\n  mergeArrays: false\n});\nexport function clearNumber(value) {\n  return value.replace(/\\D+/g, '');\n}\n/**\n * Generate the media query\n */\n\nexport function createMediaQuery(size, mediaQueries) {\n  if (isCSSUnit(size) || is.numericString(size)) {\n    return `@media screen and (min-width: ${px(size)})`;\n  }\n\n  return mediaQueries[size];\n}\n/**\n * Get color from theme\n */\n\nexport function getColorVariant(variant) {\n  let shade = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'mid';\n  let variants = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : theme.variants;\n\n  try {\n    switch (variant) {\n      case 'black':\n        {\n          return {\n            bg: black,\n            color: white\n          };\n        }\n\n      case 'white':\n        {\n          return {\n            bg: white,\n            color: black\n          };\n        }\n\n      default:\n        {\n          return variants[variant][shade];\n        }\n    }\n  } catch {\n    return variants.primary.mid;\n  }\n}\nexport function getElementProperty(element, options) {\n  const {\n    children\n  } = element.props;\n  const {\n    property,\n    type\n  } = options;\n\n  const getValue = input => {\n    const {\n      props\n    } = input;\n\n    if (input.type === type) {\n      if (property) {\n        return props?.[property] || null;\n      }\n\n      return props.children || null;\n    }\n\n    return null;\n  };\n\n  for (const child of Children.toArray(children)) {\n    if (!isValidElement(child)) {\n      return getValue(element);\n    }\n\n    const childrenElement = child.props?.children?.type === type ? child.props.children : undefined;\n    const selectedElement = child.type === type ? child : childrenElement;\n\n    if (selectedElement) {\n      return getValue(selectedElement);\n    }\n\n    if (is.array(child.props.children)) {\n      return getElementProperty(child, options);\n    }\n  }\n\n  return null;\n}\nexport function getMediaQueries() {\n  return Object.keys(breakpoints).filter(d => Number.isNaN(parseInt(d, 10))).reduce((acc, d) => {\n    acc[d] = `@media screen and (min-width: ${px(breakpoints[d])})`;\n    return acc;\n  }, {});\n}\nexport function getTheme(props) {\n  return mergeTheme(props?.theme || {});\n}\nexport function isCSSUnit(value) {\n  const units = ['em', 'px', 'rem', 'vh', 'vmax', 'vmin', 'vw'];\n  const regex = new RegExp(`\\\\d+(${units.join('|')})$`);\n  return typeof value === 'string' && regex.test(value);\n}\nexport function mergeTheme() {\n  let customTheme = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const nextTheme = deepmerge({ ...theme\n  }, customTheme);\n  const {\n    gray,\n    grayDark,\n    grayDarker,\n    grayDarkest,\n    grayLight,\n    grayLighter,\n    grayLightest\n  } = nextTheme;\n  const baseVariants = Object.entries({ ...nextTheme.colors,\n    gray: nextTheme.gray\n  }).filter(_ref => {\n    let [key] = _ref;\n    return !['black', 'white'].includes(key);\n  }).reduce((acc, _ref2) => {\n    let [key, value] = _ref2;\n    acc[key] = key === 'gray' ? getGrayScale(grayLightest, grayLighter, grayLight, gray, grayDark, grayDarker, grayDarkest) : getColorScale(value);\n    return acc;\n  }, {});\n  return { ...nextTheme,\n    variants: deepmerge(baseVariants, customTheme.variants || {})\n  };\n}\nexport function px(value) {\n  return is.number(value) || is.numericString(value) ? `${value}px` : value;\n}\nexport function recursiveChildrenEnhancer(children, props, options) {\n  const {\n    componentType,\n    overrideProps\n  } = options;\n  return Children.map(children, child => {\n    if (!isValidElement(child)) {\n      return child;\n    }\n\n    const nextProps = overrideProps ? props : omit(props, ...Object.keys(child.props));\n\n    if (child.props.children) {\n      let childProps = {\n        children: is.function(child.props.children) ? child.props.children : recursiveChildrenEnhancer(child.props.children, nextProps, options)\n      };\n\n      if (child.type === componentType) {\n        childProps = { ...childProps,\n          ...nextProps\n        };\n      }\n\n      return cloneElement(child, childProps);\n    }\n\n    if (child.type !== componentType) {\n      return child;\n    }\n\n    return cloneElement(child, nextProps);\n  });\n}\n/**\n * Helper to generate responsive media queries\n */\n\nexport function responsive(rules) {\n  const entries = {};\n  const mediaQueries = getMediaQueries();\n\n  for (const rule in rules) {\n    /* istanbul ignore else */\n    if ({}.hasOwnProperty.call(rules, rule)) {\n      const breakpoint = rule;\n      const styles = rules[rule];\n      const query = createMediaQuery(breakpoint, mediaQueries);\n\n      if (breakpoint === '_') {\n        Object.entries(styles).forEach(_ref3 => {\n          let [k, v] = _ref3;\n          entries[k] = v;\n        });\n      } else if (query) {\n        entries[query] = styles;\n      }\n    }\n  }\n\n  return css(entries);\n}","map":{"version":3,"mappings":"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","names":["Children","cloneElement","isValidElement","css","omit","deepmergeCustom","is","getColorScale","getGrayScale","theme","black","breakpoints","white","deepmerge","mergeArrays","clearNumber","value","replace","createMediaQuery","size","mediaQueries","isCSSUnit","numericString","px","getColorVariant","variant","shade","variants","bg","color","primary","mid","getElementProperty","element","options","children","props","property","type","getValue","input","child","toArray","childrenElement","undefined","selectedElement","array","getMediaQueries","Object","keys","filter","d","Number","isNaN","parseInt","reduce","acc","getTheme","mergeTheme","units","regex","RegExp","join","test","customTheme","nextTheme","gray","grayDark","grayDarker","grayDarkest","grayLight","grayLighter","grayLightest","baseVariants","entries","colors","key","includes","number","recursiveChildrenEnhancer","componentType","overrideProps","map","nextProps","childProps","function","responsive","rules","rule","hasOwnProperty","call","breakpoint","styles","query","forEach","k","v"],"sources":["/My_WORK/graduate_React/frontend/node_modules/@gilbarbara/components/src/modules/helpers.ts"],"sourcesContent":["import { Children, cloneElement, isValidElement, ReactElement, ReactNode } from 'react';\nimport { css } from '@emotion/react';\nimport { omit } from '@gilbarbara/helpers';\nimport { AnyObject, StringOrNumber } from '@gilbarbara/types';\nimport { deepmergeCustom, DeepMergeLeafURI } from 'deepmerge-ts';\nimport is from 'is-lite';\nimport { PartialDeep } from 'type-fest';\n\nimport { getColorScale, getGrayScale } from './colors';\nimport * as theme from './theme';\n\nimport {\n  BaseProps,\n  Breakpoints,\n  GetElementPropertyOptions,\n  MediaQueries,\n  RecursiveChildrenEnhancerOptions,\n  ResponsiveInput,\n  ResponsiveSizes,\n  Shades,\n  Theme,\n  Variants,\n} from '../types';\n\nconst { black, breakpoints, white } = theme;\n\nconst deepmerge = deepmergeCustom<{\n  DeepMergeArraysURI: DeepMergeLeafURI; // <-- Needed for correct output type.\n}>({\n  mergeArrays: false,\n});\n\nexport function clearNumber(value: string) {\n  return value.replace(/\\D+/g, '');\n}\n\n/**\n * Generate the media query\n */\nexport function createMediaQuery(size: ResponsiveSizes, mediaQueries: MediaQueries): string {\n  if (isCSSUnit(size) || is.numericString(size)) {\n    return `@media screen and (min-width: ${px(size)})`;\n  }\n\n  return mediaQueries[size];\n}\n\n/**\n * Get color from theme\n */\nexport function getColorVariant(\n  variant: Variants,\n  shade: Shades = 'mid',\n  variants: Theme['variants'] = theme.variants,\n) {\n  try {\n    switch (variant) {\n      case 'black': {\n        return { bg: black, color: white };\n      }\n      case 'white': {\n        return { bg: white, color: black };\n      }\n      default: {\n        return variants[variant][shade];\n      }\n    }\n  } catch {\n    return variants.primary.mid;\n  }\n}\n\nexport function getElementProperty(\n  element: ReactElement,\n  options: GetElementPropertyOptions,\n): string | null {\n  const { children } = element.props;\n  const { property, type } = options;\n\n  const getValue = (input: ReactElement) => {\n    const { props } = input;\n\n    if (input.type === type) {\n      if (property) {\n        return props?.[property] || null;\n      }\n\n      return props.children || null;\n    }\n\n    return null;\n  };\n\n  for (const child of Children.toArray(children)) {\n    if (!isValidElement(child)) {\n      return getValue(element);\n    }\n\n    const childrenElement = child.props?.children?.type === type ? child.props.children : undefined;\n    const selectedElement = child.type === type ? child : childrenElement;\n\n    if (selectedElement) {\n      return getValue(selectedElement);\n    }\n\n    if (is.array(child.props.children)) {\n      return getElementProperty(child, options);\n    }\n  }\n\n  return null;\n}\n\nexport function getMediaQueries(): MediaQueries {\n  return Object.keys(breakpoints)\n    .filter(d => Number.isNaN(parseInt(d, 10)))\n    .reduce((acc: AnyObject, d) => {\n      acc[d] = `@media screen and (min-width: ${px(breakpoints[d as Breakpoints])})`;\n\n      return acc;\n    }, {}) as MediaQueries;\n}\n\nexport function getTheme(props: BaseProps): Theme {\n  return mergeTheme(props?.theme || {});\n}\n\nexport function isCSSUnit(value: unknown): value is string {\n  const units = ['em', 'px', 'rem', 'vh', 'vmax', 'vmin', 'vw'];\n  const regex = new RegExp(`\\\\d+(${units.join('|')})$`);\n\n  return typeof value === 'string' && regex.test(value);\n}\n\nexport function mergeTheme(customTheme: PartialDeep<Theme> = {}): Theme {\n  const nextTheme = deepmerge({ ...theme }, customTheme) as Theme;\n\n  const { gray, grayDark, grayDarker, grayDarkest, grayLight, grayLighter, grayLightest } =\n    nextTheme;\n\n  const baseVariants = Object.entries({ ...nextTheme.colors, gray: nextTheme.gray })\n    .filter(([key]) => !['black', 'white'].includes(key))\n    .reduce((acc, [key, value]) => {\n      acc[key as keyof Theme['variants']] =\n        key === 'gray'\n          ? getGrayScale(\n              grayLightest,\n              grayLighter,\n              grayLight,\n              gray,\n              grayDark,\n              grayDarker,\n              grayDarkest,\n            )\n          : getColorScale(value);\n\n      return acc;\n    }, {} as Theme['variants']);\n\n  return {\n    ...nextTheme,\n    variants: deepmerge(baseVariants, customTheme.variants || {}) as Theme['variants'],\n  };\n}\n\nexport function px(value: StringOrNumber | undefined): string | undefined {\n  return is.number(value) || is.numericString(value) ? `${value}px` : value;\n}\n\nexport function recursiveChildrenEnhancer(\n  children: ReactNode,\n  props: AnyObject,\n  options: RecursiveChildrenEnhancerOptions,\n): ReactNode {\n  const { componentType, overrideProps } = options;\n\n  return Children.map(children, child => {\n    if (!isValidElement(child)) {\n      return child;\n    }\n\n    const nextProps = overrideProps ? props : omit(props, ...Object.keys(child.props));\n\n    if (child.props.children) {\n      let childProps = {\n        children: is.function(child.props.children)\n          ? child.props.children\n          : recursiveChildrenEnhancer(child.props.children, nextProps, options),\n      };\n\n      if (child.type === componentType) {\n        childProps = { ...childProps, ...nextProps };\n      }\n\n      return cloneElement(child, childProps);\n    }\n\n    if (child.type !== componentType) {\n      return child;\n    }\n\n    return cloneElement(child, nextProps);\n  });\n}\n\n/**\n * Helper to generate responsive media queries\n */\nexport function responsive(rules: ResponsiveInput) {\n  const entries: AnyObject = {};\n  const mediaQueries = getMediaQueries();\n\n  for (const rule in rules) {\n    /* istanbul ignore else */\n    if ({}.hasOwnProperty.call(rules, rule)) {\n      const breakpoint = rule as ResponsiveSizes;\n      const styles = rules[rule];\n      const query = createMediaQuery(breakpoint, mediaQueries);\n\n      if (breakpoint === '_') {\n        Object.entries(styles).forEach(([k, v]) => {\n          entries[k] = v;\n        });\n      } else if (query) {\n        entries[query] = styles;\n      }\n    }\n  }\n\n  return css(entries);\n}\n"]},"metadata":{},"sourceType":"module"}