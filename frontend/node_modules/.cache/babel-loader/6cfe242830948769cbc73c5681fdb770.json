{"ast":null,"code":"import { invariant, isRGB, isRGBArray, messages } from './modules/utils';\n/**\n * Convert an RGA object to hex.\n */\n\nexport default function rgb2hex(input) {\n  invariant(!!input, messages.input);\n  invariant(isRGBArray(input) || isRGB(input), messages.invalid);\n  let r;\n  let g;\n  let b;\n\n  if (isRGBArray(input)) {\n    [r, g, b] = input;\n  } else {\n    ({\n      r,\n      g,\n      b\n    } = input);\n  }\n\n  const output = [r.toString(16), g.toString(16), b.toString(16)];\n  return `#${output.map(d => d.length === 1 ? `0${d}` : d).join('')}`;\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,EAAoBC,KAApB,EAA2BC,UAA3B,EAAuCC,QAAvC,QAAuD,iBAAvD;AAGA;;;;AAGA,eAAc,SAAUC,OAAV,CAAkBC,KAAlB,EAAuC;EACnDL,SAAS,CAAC,CAAC,CAACK,KAAH,EAAUF,QAAQ,CAACE,KAAnB,CAAT;EACAL,SAAS,CAACE,UAAU,CAACG,KAAD,CAAV,IAAqBJ,KAAK,CAACI,KAAD,CAA3B,EAAoCF,QAAQ,CAACG,OAA7C,CAAT;EAEA,IAAIC,CAAJ;EACA,IAAIC,CAAJ;EACA,IAAIC,CAAJ;;EAEA,IAAIP,UAAU,CAACG,KAAD,CAAd,EAAuB;IACrB,CAACE,CAAD,EAAIC,CAAJ,EAAOC,CAAP,IAAYJ,KAAZ;EACD,CAFD,MAEO;IACL,CAAC;MAAEE,CAAF;MAAKC,CAAL;MAAQC;IAAR,IAAcJ,KAAf;EACD;;EAED,MAAMK,MAAM,GAAG,CAACH,CAAC,CAACI,QAAF,CAAW,EAAX,CAAD,EAAiBH,CAAC,CAACG,QAAF,CAAW,EAAX,CAAjB,EAAiCF,CAAC,CAACE,QAAF,CAAW,EAAX,CAAjC,CAAf;EAEA,OAAO,IAAID,MAAM,CAACE,GAAP,CAAWC,CAAC,IAAKA,CAAC,CAACC,MAAF,KAAa,CAAb,GAAiB,IAAID,CAAC,EAAtB,GAA2BA,CAA5C,EAAgDE,IAAhD,CAAqD,EAArD,CAAwD,EAAnE;AACD","names":["invariant","isRGB","isRGBArray","messages","rgb2hex","input","invalid","r","g","b","output","toString","map","d","length","join"],"sources":["/My_WORK/graduate_React/frontend/node_modules/colorizr/src/rgb2hex.ts"],"sourcesContent":["import { invariant, isRGB, isRGBArray, messages } from './modules/utils';\nimport { RGB, RGBArray } from './types';\n\n/**\n * Convert an RGA object to hex.\n */\nexport default function rgb2hex(input: RGB | RGBArray): string {\n  invariant(!!input, messages.input);\n  invariant(isRGBArray(input) || isRGB(input), messages.invalid);\n\n  let r: number;\n  let g: number;\n  let b: number;\n\n  if (isRGBArray(input)) {\n    [r, g, b] = input;\n  } else {\n    ({ r, g, b } = input);\n  }\n\n  const output = [r.toString(16), g.toString(16), b.toString(16)];\n\n  return `#${output.map(d => (d.length === 1 ? `0${d}` : d)).join('')}`;\n}\n"]},"metadata":{},"sourceType":"module"}