{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { css } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport is from 'is-lite';\nimport { Box } from './Box';\nimport { Loader } from './Loader';\nimport { getTheme, px, responsive as responsiveHelper } from './modules/helpers';\nimport { paddingStyles } from './modules/system';\nexport const StyledMain = styled(Box)(props => {\n  const {\n    minHeight = '100vh',\n    padding,\n    responsive\n  } = props;\n  const {\n    spacing\n  } = getTheme(props);\n  return css`\n    display: grid;\n    min-height: ${px(minHeight)};\n    padding: ${spacing.md};\n    width: 100%;\n\n    ${responsive && is.nullOrUndefined(padding) && responsiveHelper({\n    lg: {\n      padding: spacing.xl\n    }\n  })};\n\n    // overrides default padding\n    ${paddingStyles(props, true)};\n  `;\n});\nexport function Main(props) {\n  const {\n    align,\n    centered,\n    children,\n    isLoading,\n    justify,\n    maxWidth,\n    name,\n    textAlign,\n    ...rest\n  } = props;\n  const textAlignMap = {\n    start: 'left',\n    'flex-start': 'left',\n    center: 'center',\n    end: 'right',\n    'flex-end': 'right'\n  };\n  const shouldCenter = isLoading || centered;\n  let textAlignValue = textAlign;\n\n  if (!textAlign) {\n    if (centered) {\n      textAlignValue = 'center';\n    } else if (align && (['start', 'center', 'end'].includes(align) || align.startsWith('flex'))) {\n      textAlignValue = textAlignMap[align];\n    }\n  }\n\n  return _jsx(StyledMain, {\n    \"data-component-name\": name,\n    ...rest,\n    children: _jsx(Box, {\n      align: shouldCenter ? 'center' : align,\n      direction: \"column\",\n      display: shouldCenter || align || justify ? 'flex' : undefined,\n      fill: true,\n      justify: shouldCenter ? 'center' : justify,\n      maxWidth: maxWidth,\n      mx: maxWidth ? 'auto' : undefined,\n      textAlign: textAlignValue,\n      children: isLoading ? _jsx(Loader, {\n        block: true\n      }) : children\n    })\n  });\n}\nMain.defaultProps = {\n  centered: false,\n  isLoading: false,\n  minHeight: '100vh',\n  name: 'Main',\n  responsive: true\n};","map":{"version":3,"mappings":";AACA,SAASA,GAAT,QAAoB,gBAApB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAGA,OAAOC,EAAP,MAAe,SAAf;AAEA,SAASC,GAAT,QAAoB,OAApB;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,QAAT,EAAmBC,EAAnB,EAAuBC,UAAU,IAAIC,gBAArC,QAA6D,mBAA7D;AACA,SAASC,aAAT,QAA8B,kBAA9B;AA8CA,OAAO,MAAMC,UAAU,GAAGT,MAAM,CAACE,GAAD,CAAN,CAAqCQ,KAAK,IAAG;EACrE,MAAM;IAAEC,SAAS,GAAG,OAAd;IAAuBC,OAAvB;IAAgCN;EAAhC,IAA+CI,KAArD;EACA,MAAM;IAAEG;EAAF,IAAcT,QAAQ,CAACM,KAAD,CAA5B;EAEA,OAAOX,GAAG;;kBAEMM,EAAE,CAACM,SAAD,CAAW;eAChBE,OAAO,CAACC,EAAE;;;MAGnBR,UAAU,IACZL,EAAE,CAACc,eAAH,CAAmBH,OAAnB,CADE,IAEFL,gBAAgB,CAAC;IACfS,EAAE,EAAE;MACFJ,OAAO,EAAEC,OAAO,CAACI;IADf;EADW,CAAD,CAId;;;MAGAT,aAAa,CAACE,KAAD,EAAQ,IAAR,CAAa;GAf9B;AAiBD,CArByB,CAAnB;AAuBP,OAAM,SAAUQ,IAAV,CAAeR,KAAf,EAA+B;EACnC,MAAM;IAAES,KAAF;IAASC,QAAT;IAAmBC,QAAnB;IAA6BC,SAA7B;IAAwCC,OAAxC;IAAiDC,QAAjD;IAA2DC,IAA3D;IAAiEC,SAAjE;IAA4E,GAAGC;EAA/E,IACJjB,KADF;EAGA,MAAMkB,YAAY,GAAoD;IACpEC,KAAK,EAAE,MAD6D;IAEpE,cAAc,MAFsD;IAGpEC,MAAM,EAAE,QAH4D;IAIpEC,GAAG,EAAE,OAJ+D;IAKpE,YAAY;EALwD,CAAtE;EAQA,MAAMC,YAAY,GAAGV,SAAS,IAAIF,QAAlC;EACA,IAAIa,cAAc,GAAGP,SAArB;;EAEA,IAAI,CAACA,SAAL,EAAgB;IACd,IAAIN,QAAJ,EAAc;MACZa,cAAc,GAAG,QAAjB;IACD,CAFD,MAEO,IAAId,KAAK,KAAK,CAAC,OAAD,EAAU,QAAV,EAAoB,KAApB,EAA2Be,QAA3B,CAAoCf,KAApC,KAA8CA,KAAK,CAACgB,UAAN,CAAiB,MAAjB,CAAnD,CAAT,EAAuF;MAC5FF,cAAc,GAAGL,YAAY,CAACT,KAAD,CAA7B;IACD;EACF;;EAED,OACEiB,KAAC3B,UAAD,EAAW;IAAA,uBAAsBgB,IAAtB;IAA0B,GAAME,IAAhC;IAAoCN,UAC7Ce,KAAClC,GAAD,EAAI;MACFiB,KAAK,EAAEa,YAAY,GAAG,QAAH,GAAcb,KAD/B;MAEFkB,SAAS,EAAC,QAFR;MAGFC,OAAO,EAAEN,YAAY,IAAIb,KAAhB,IAAyBI,OAAzB,GAAmC,MAAnC,GAA4CgB,SAHnD;MAIFC,IAAI,MAJF;MAKFjB,OAAO,EAAES,YAAY,GAAG,QAAH,GAAcT,OALjC;MAMFC,QAAQ,EAAEA,QANR;MAOFiB,EAAE,EAAEjB,QAAQ,GAAG,MAAH,GAAYe,SAPtB;MAQFb,SAAS,EAAEO,cART;MAQuBZ,UAExBC,SAAS,GAAGc,KAACjC,MAAD,EAAO;QAACuC,KAAK;MAAN,CAAP,CAAH,GAAsBrB;IAV9B,CAAJ;EADS,CAAX,CADF;AAgBD;AAEDH,IAAI,CAACyB,YAAL,GAAoB;EAClBvB,QAAQ,EAAE,KADQ;EAElBE,SAAS,EAAE,KAFO;EAGlBX,SAAS,EAAE,OAHO;EAIlBc,IAAI,EAAE,MAJY;EAKlBnB,UAAU,EAAE;AALM,CAApB","names":["css","styled","is","Box","Loader","getTheme","px","responsive","responsiveHelper","paddingStyles","StyledMain","props","minHeight","padding","spacing","md","nullOrUndefined","lg","xl","Main","align","centered","children","isLoading","justify","maxWidth","name","textAlign","rest","textAlignMap","start","center","end","shouldCenter","textAlignValue","includes","startsWith","_jsx","direction","display","undefined","fill","mx","block","defaultProps"],"sources":["/My_WORK/graduate_React/frontend/node_modules/@gilbarbara/components/src/Main.tsx"],"sourcesContent":["import { CSSProperties, ReactNode } from 'react';\nimport { css } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport { StringOrNumber } from '@gilbarbara/types';\nimport { Property } from 'csstype';\nimport is from 'is-lite';\n\nimport { Box } from './Box';\nimport { Loader } from './Loader';\nimport { getTheme, px, responsive as responsiveHelper } from './modules/helpers';\nimport { paddingStyles } from './modules/system';\nimport {\n  Alignment,\n  ComponentProps,\n  StyledProps,\n  WithColor,\n  WithFlexBox,\n  WithPadding,\n  WithTextColor,\n} from './types';\n\nexport interface MainKnownProps\n  extends StyledProps,\n    WithColor,\n    Pick<WithFlexBox, 'align' | 'justify'>,\n    WithPadding,\n    WithTextColor {\n  /**\n   * Override `align` and `justify` to \"center\"\n   *\n   * @default false\n   */\n  centered?: boolean;\n  children: ReactNode;\n  /** @default false */\n  isLoading?: boolean;\n  maxWidth?: StringOrNumber;\n  /** @default 100vh */\n  minHeight?: StringOrNumber;\n  /**\n   * Set the \"data-component-name\" property\n   *\n   * @default Main\n   */\n  name?: string;\n  /**\n   * Updates the padding for large screens.\n   * @default true\n   */\n  responsive?: boolean;\n  style?: CSSProperties;\n  textAlign?: Alignment;\n}\n\nexport type MainProps = ComponentProps<HTMLDivElement, MainKnownProps, 'wrap'>;\n\nexport const StyledMain = styled(Box)<Omit<MainProps, 'name'>>(props => {\n  const { minHeight = '100vh', padding, responsive } = props;\n  const { spacing } = getTheme(props);\n\n  return css`\n    display: grid;\n    min-height: ${px(minHeight)};\n    padding: ${spacing.md};\n    width: 100%;\n\n    ${responsive &&\n    is.nullOrUndefined(padding) &&\n    responsiveHelper({\n      lg: {\n        padding: spacing.xl,\n      },\n    })};\n\n    // overrides default padding\n    ${paddingStyles(props, true)};\n  `;\n});\n\nexport function Main(props: MainProps): JSX.Element {\n  const { align, centered, children, isLoading, justify, maxWidth, name, textAlign, ...rest } =\n    props;\n\n  const textAlignMap: Partial<Record<Property.AlignItems, Alignment>> = {\n    start: 'left',\n    'flex-start': 'left',\n    center: 'center',\n    end: 'right',\n    'flex-end': 'right',\n  };\n\n  const shouldCenter = isLoading || centered;\n  let textAlignValue = textAlign;\n\n  if (!textAlign) {\n    if (centered) {\n      textAlignValue = 'center';\n    } else if (align && (['start', 'center', 'end'].includes(align) || align.startsWith('flex'))) {\n      textAlignValue = textAlignMap[align];\n    }\n  }\n\n  return (\n    <StyledMain data-component-name={name} {...rest}>\n      <Box\n        align={shouldCenter ? 'center' : align}\n        direction=\"column\"\n        display={shouldCenter || align || justify ? 'flex' : undefined}\n        fill\n        justify={shouldCenter ? 'center' : justify}\n        maxWidth={maxWidth}\n        mx={maxWidth ? 'auto' : undefined}\n        textAlign={textAlignValue}\n      >\n        {isLoading ? <Loader block /> : children}\n      </Box>\n    </StyledMain>\n  );\n}\n\nMain.defaultProps = {\n  centered: false,\n  isLoading: false,\n  minHeight: '100vh',\n  name: 'Main',\n  responsive: true,\n};\n"]},"metadata":{},"sourceType":"module"}