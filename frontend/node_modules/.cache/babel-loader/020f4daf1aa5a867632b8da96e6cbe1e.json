{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useMemo } from 'react';\nimport { useFormContext, useWatch } from 'react-hook-form';\nimport { useSetState, useUnmount } from 'react-use';\nimport FieldCheckbox from './Checkbox';\nimport FieldDebug from './Debug';\nimport FieldDropdown from './Dropdown';\nimport FieldInput from './Input';\nimport FieldRadio from './Radio';\nimport FieldSelect from './Select';\nimport FieldTextarea from './Textarea';\nimport FieldToggle from './Toggle';\nimport { getDefaultValue, getError, getRegisterOptions } from './utils';\nimport { FormGroup } from '../FormGroup';\nexport function Field(props) {\n  const {\n    assistiveText,\n    hideAssistiveText,\n    id,\n    inline,\n    label,\n    name,\n    required,\n    skipValidation,\n    style,\n    type = 'text',\n    validations,\n    value\n  } = props;\n  const [{\n    isActive,\n    isDirty\n  }, setStatus] = useSetState({\n    isActive: false,\n    isDirty: false\n  });\n  const {\n    formState: {\n      dirtyFields,\n      errors\n    },\n    getValues,\n    register,\n    setValue,\n    unregister\n  } = useFormContext();\n  const registerOptions = useMemo(() => getRegisterOptions({ ...props,\n    getValues\n  }), [getValues, props]);\n  const registration = register(name, registerOptions);\n  const currentValue = useWatch({\n    name,\n    defaultValue: getDefaultValue(value || getValues()[name], type)\n  });\n  const [error, errorType = ''] = getError(name, errors);\n  useUnmount(() => {\n    unregister(name);\n  });\n  const showError = !!error && errorType !== 'revalidate' && (!isActive || isDirty);\n  const isValid = !!currentValue && !error && (required || validations?.length);\n  const groupProps = {\n    assistiveText,\n    hideAssistiveText,\n    inline,\n    label,\n    labelId: id || name,\n    required,\n    style\n  };\n  const output = {\n    error\n  };\n  /* istanbul ignore else */\n\n  if (!skipValidation) {\n    groupProps.skipIcon = ['checkbox', 'dropdown', 'radio', 'select', 'toggle'].includes(type);\n\n    if (showError) {\n      groupProps.error = error;\n      groupProps.valid = false;\n    } else if (isValid) {\n      groupProps.valid = true;\n    }\n  }\n\n  switch (type) {\n    case 'checkbox':\n      {\n        output.content = _jsx(FieldCheckbox, {\n          currentValue: currentValue,\n          setValue: setValue,\n          ...props\n        });\n        break;\n      }\n\n    case 'dropdown':\n      {\n        output.content = _jsx(FieldDropdown, {\n          currentValue: currentValue,\n          registration: registration,\n          setValue: setValue,\n          ...props\n        });\n        break;\n      }\n\n    case 'radio':\n      {\n        output.content = _jsx(FieldRadio, {\n          registration: registration,\n          ...props\n        });\n        break;\n      }\n\n    case 'select':\n      {\n        output.content = _jsx(FieldSelect, {\n          isDirty: !!dirtyFields[name],\n          registration: registration,\n          setStatus: setStatus,\n          ...props\n        });\n        break;\n      }\n\n    case 'textarea':\n      {\n        output.content = _jsx(FieldTextarea, {\n          isDirty: !!dirtyFields[name],\n          registration: registration,\n          setStatus: setStatus,\n          ...props\n        });\n        break;\n      }\n\n    case 'toggle':\n      {\n        output.content = _jsx(FieldToggle, { ...props,\n          setValue: setValue\n        });\n        break;\n      }\n\n    default:\n      {\n        output.content = _jsx(FieldInput, {\n          currentValue: currentValue,\n          isDirty: !!dirtyFields[name],\n          registration: registration,\n          setStatus: setStatus,\n          ...props\n        });\n      }\n  }\n\n  if (type === 'hidden') {\n    return output.content;\n  }\n\n  return _jsxs(FormGroup, {\n    \"data-component-name\": \"Field\",\n    ...groupProps,\n    children: [output.content, _jsx(FieldDebug, { ...props\n    })]\n  });\n}\nField.defaultProps = {\n  debug: false,\n  disabled: false,\n  hideAssistiveText: false,\n  inline: false,\n  label: '',\n  readOnly: false,\n  required: false,\n  skipValidation: false,\n  type: 'text'\n};","map":{"version":3,"mappings":"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","names":["useMemo","useFormContext","useWatch","useSetState","useUnmount","FieldCheckbox","FieldDebug","FieldDropdown","FieldInput","FieldRadio","FieldSelect","FieldTextarea","FieldToggle","getDefaultValue","getError","getRegisterOptions","FormGroup","Field","props","assistiveText","hideAssistiveText","id","inline","label","name","required","skipValidation","style","type","validations","value","isActive","isDirty","setStatus","formState","dirtyFields","errors","getValues","register","setValue","unregister","registerOptions","registration","currentValue","defaultValue","error","errorType","showError","isValid","length","groupProps","labelId","output","skipIcon","includes","valid","content","_jsx","_jsxs","children","defaultProps","debug","disabled","readOnly"],"sources":["/My_WORK/graduate_React/frontend/node_modules/@gilbarbara/components/src/Field/index.tsx"],"sourcesContent":["import { useMemo } from 'react';\nimport { useFormContext, useWatch } from 'react-hook-form';\nimport { useSetState, useUnmount } from 'react-use';\nimport { AnyObject } from '@gilbarbara/types';\n\nimport FieldCheckbox from './Checkbox';\nimport FieldDebug from './Debug';\nimport FieldDropdown from './Dropdown';\nimport FieldInput from './Input';\nimport FieldRadio from './Radio';\nimport FieldSelect from './Select';\nimport FieldTextarea from './Textarea';\nimport FieldToggle from './Toggle';\nimport {\n  FieldCheckboxProps,\n  FieldDropdownProps,\n  FieldInputProps,\n  FieldProps,\n  FieldRadioProps,\n  FieldSelectProps,\n  FieldTextareaProps,\n  FieldToggleProps,\n} from './types';\nimport { getDefaultValue, getError, getRegisterOptions } from './utils';\n\nimport { FormGroup } from '../FormGroup';\n\nexport function Field<T extends FieldProps>(props: T) {\n  const {\n    assistiveText,\n    hideAssistiveText,\n    id,\n    inline,\n    label,\n    name,\n    required,\n    skipValidation,\n    style,\n    type = 'text',\n    validations,\n    value,\n  } = props;\n  const [{ isActive, isDirty }, setStatus] = useSetState({\n    isActive: false,\n    isDirty: false,\n  });\n\n  const {\n    formState: { dirtyFields, errors },\n    getValues,\n    register,\n    setValue,\n    unregister,\n  } = useFormContext();\n  const registerOptions = useMemo(\n    () => getRegisterOptions({ ...props, getValues }),\n    [getValues, props],\n  );\n  const registration = register(name, registerOptions);\n\n  const currentValue = useWatch({\n    name,\n    defaultValue: getDefaultValue(value || getValues()[name], type),\n  });\n  const [error, errorType = ''] = getError(name, errors);\n\n  useUnmount(() => {\n    unregister(name);\n  });\n\n  const showError = !!error && errorType !== 'revalidate' && (!isActive || isDirty);\n  const isValid = !!currentValue && !error && (required || validations?.length);\n\n  const groupProps: AnyObject = {\n    assistiveText,\n    hideAssistiveText,\n    inline,\n    label,\n    labelId: id || name,\n    required,\n    style,\n  };\n  const output: AnyObject = { error };\n\n  /* istanbul ignore else */\n  if (!skipValidation) {\n    groupProps.skipIcon = ['checkbox', 'dropdown', 'radio', 'select', 'toggle'].includes(type);\n\n    if (showError) {\n      groupProps.error = error;\n      groupProps.valid = false;\n    } else if (isValid) {\n      groupProps.valid = true;\n    }\n  }\n\n  switch (type) {\n    case 'checkbox': {\n      output.content = (\n        <FieldCheckbox\n          currentValue={currentValue}\n          setValue={setValue}\n          {...(props as FieldCheckboxProps)}\n        />\n      );\n\n      break;\n    }\n    case 'dropdown': {\n      output.content = (\n        <FieldDropdown\n          currentValue={currentValue}\n          registration={registration}\n          setValue={setValue}\n          {...(props as FieldDropdownProps)}\n        />\n      );\n\n      break;\n    }\n    case 'radio': {\n      output.content = <FieldRadio registration={registration} {...(props as FieldRadioProps)} />;\n\n      break;\n    }\n    case 'select': {\n      output.content = (\n        <FieldSelect\n          isDirty={!!dirtyFields[name]}\n          registration={registration}\n          setStatus={setStatus}\n          {...(props as FieldSelectProps)}\n        />\n      );\n\n      break;\n    }\n    case 'textarea': {\n      output.content = (\n        <FieldTextarea\n          isDirty={!!dirtyFields[name]}\n          registration={registration}\n          setStatus={setStatus}\n          {...(props as FieldTextareaProps)}\n        />\n      );\n\n      break;\n    }\n    case 'toggle': {\n      output.content = <FieldToggle {...(props as FieldToggleProps)} setValue={setValue} />;\n\n      break;\n    }\n    default: {\n      output.content = (\n        <FieldInput\n          currentValue={currentValue}\n          isDirty={!!dirtyFields[name]}\n          registration={registration}\n          setStatus={setStatus}\n          {...(props as FieldInputProps)}\n        />\n      );\n    }\n  }\n\n  if (type === 'hidden') {\n    return output.content;\n  }\n\n  return (\n    <FormGroup data-component-name=\"Field\" {...groupProps}>\n      {output.content}\n      <FieldDebug {...props} />\n    </FormGroup>\n  );\n}\n\nField.defaultProps = {\n  debug: false,\n  disabled: false,\n  hideAssistiveText: false,\n  inline: false,\n  label: '',\n  readOnly: false,\n  required: false,\n  skipValidation: false,\n  type: 'text',\n};\n\nexport { FieldProps } from './types';\n"]},"metadata":{},"sourceType":"module"}