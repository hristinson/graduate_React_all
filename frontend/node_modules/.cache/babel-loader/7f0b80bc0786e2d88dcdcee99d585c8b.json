{"ast":null,"code":"import { invariant, isHSL, isPlainObject, isRGB, isString, limit, messages } from './utils';\nimport hex2hsl from '../hex2hsl';\nimport hex2rgb from '../hex2rgb';\nimport hsl2hex from '../hsl2hex';\nimport hsl2rgb from '../hsl2rgb';\nimport isValidHex from '../is-valid-hex';\nimport parseCSS from '../parse-css';\nimport rgb2hex from '../rgb2hex';\nimport rgb2hsl from '../rgb2hsl';\nexport default function parseColor(color) {\n  invariant(!!color, messages.input);\n  const output = {};\n\n  if (isString(color)) {\n    const hex = parseCSS(color);\n    invariant(isValidHex(hex), 'input is not valid');\n    output.hex = hex;\n    output.rgb = hex2rgb(hex);\n    output.hsl = hex2hsl(hex);\n  } else if (Array.isArray(color)) {\n    output.rgb = {\n      r: limit(color[0], 'r'),\n      g: limit(color[1], 'g'),\n      b: limit(color[2], 'b')\n    };\n    output.hex = rgb2hex(output.rgb);\n    output.hsl = rgb2hsl(output.rgb);\n  } else if (isPlainObject(color)) {\n    if (isHSL(color)) {\n      output.hsl = {\n        h: limit(color.h, 'h'),\n        s: limit(color.s, 's'),\n        l: limit(color.l, 'l')\n      };\n      output.rgb = hsl2rgb(output.hsl);\n    } else if (isRGB(color)) {\n      output.rgb = {\n        r: limit(color.r, 'r'),\n        g: limit(color.g, 'g'),\n        b: limit(color.b, 'b')\n      };\n      output.hsl = rgb2hsl(output.rgb);\n    } else {\n      throw new Error('invalid color');\n    }\n\n    output.hex = hsl2hex(output.hsl);\n  } else {\n    throw new Error(messages.input);\n  }\n\n  return output;\n}","map":{"version":3,"mappings":"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","names":["invariant","isHSL","isPlainObject","isRGB","isString","limit","messages","hex2hsl","hex2rgb","hsl2hex","hsl2rgb","isValidHex","parseCSS","rgb2hex","rgb2hsl","parseColor","color","input","output","hex","rgb","hsl","Array","isArray","r","g","b","h","s","l","Error"],"sources":["/My_WORK/graduate_React/frontend/node_modules/colorizr/src/modules/parse-color.ts"],"sourcesContent":["import { invariant, isHSL, isPlainObject, isRGB, isString, limit, messages } from './utils';\n\nimport hex2hsl from '../hex2hsl';\nimport hex2rgb from '../hex2rgb';\nimport hsl2hex from '../hsl2hex';\nimport hsl2rgb from '../hsl2rgb';\nimport isValidHex from '../is-valid-hex';\nimport parseCSS from '../parse-css';\nimport rgb2hex from '../rgb2hex';\nimport rgb2hsl from '../rgb2hsl';\nimport { Colors, HSL, PlainObject, RGB, RGBArray } from '../types';\n\nexport default function parseColor(color: string | HSL | RGB | RGBArray): Colors {\n  invariant(!!color, messages.input);\n\n  const output: PlainObject = {};\n\n  if (isString(color)) {\n    const hex = parseCSS(color) as string;\n\n    invariant(isValidHex(hex), 'input is not valid');\n\n    output.hex = hex;\n    output.rgb = hex2rgb(hex);\n    output.hsl = hex2hsl(hex);\n  } else if (Array.isArray(color)) {\n    output.rgb = {\n      r: limit(color[0], 'r'),\n      g: limit(color[1], 'g'),\n      b: limit(color[2], 'b'),\n    };\n\n    output.hex = rgb2hex(output.rgb);\n    output.hsl = rgb2hsl(output.rgb);\n  } else if (isPlainObject(color)) {\n    if (isHSL(color)) {\n      output.hsl = {\n        h: limit(color.h, 'h'),\n        s: limit(color.s, 's'),\n        l: limit(color.l, 'l'),\n      };\n      output.rgb = hsl2rgb(output.hsl);\n    } else if (isRGB(color)) {\n      output.rgb = {\n        r: limit(color.r, 'r'),\n        g: limit(color.g, 'g'),\n        b: limit(color.b, 'b'),\n      };\n      output.hsl = rgb2hsl(output.rgb);\n    } else {\n      throw new Error('invalid color');\n    }\n\n    output.hex = hsl2hex(output.hsl);\n  } else {\n    throw new Error(messages.input);\n  }\n\n  return output as Colors;\n}\n"]},"metadata":{},"sourceType":"module"}