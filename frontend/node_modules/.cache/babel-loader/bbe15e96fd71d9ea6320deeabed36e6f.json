{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useCallback, useState } from 'react';\nimport { css } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport { ButtonBase } from './ButtonBase';\nimport { Icon } from './Icon';\nimport { Menu } from './Menu';\nimport { getTheme } from './modules/helpers';\nimport { backgroundStyles, getStyledOptions } from './modules/system';\nexport const StyledButtonSplit = styled('div', getStyledOptions())(props => {\n  const {\n    block,\n    disabled,\n    invert,\n    size = 'md'\n  } = props;\n  const {\n    button,\n    grayLight,\n    grayMid,\n    spacing\n  } = getTheme(props);\n  const {\n    borderRadius,\n    fontSize,\n    fontWeight,\n    height,\n    lineHeight,\n    padding\n  } = button;\n  const buttonPadding = `${padding[size][0]} ${padding[size][1]}`;\n  const styles = backgroundStyles(props);\n\n  if (disabled) {\n    styles.backgroundColor = grayLight;\n    styles.borderColor = grayLight;\n    styles.color = grayMid;\n  }\n\n  return css`\n    display: inline-flex;\n    min-height: ${height[size]};\n    min-width: ${height[size]};\n    width: ${block ? '100%' : 'auto'};\n\n    > [data-component-name='ButtonBase'] {\n      ${styles};\n      border-bottom-left-radius: ${borderRadius[size]};\n      border-right: 0;\n      border-top-left-radius: ${borderRadius[size]};\n      display: flex;\n      flex: 1;\n      font-size: ${fontSize[size]};\n      font-weight: ${fontWeight};\n      justify-content: center;\n      line-height: ${lineHeight[size]};\n      opacity: 1;\n      padding: ${buttonPadding};\n    }\n\n    > [data-component-name='Menu'] {\n      ${styles};\n      align-items: center;\n      border-left: ${invert ? styles.border : `1px solid ${styles.color}`};\n      border-top-right-radius: ${borderRadius[size]};\n      border-bottom-right-radius: ${borderRadius[size]};\n      display: flex;\n    }\n\n    [data-component-name='MenuButton'] {\n      height: 100%;\n      opacity: 1;\n      padding: 0 ${spacing.xs};\n      width: 100%;\n    }\n  `;\n});\nexport function ButtonSplit(props) {\n  const {\n    busy,\n    children,\n    label,\n    onClick,\n    onToggle,\n    position,\n    ...rest\n  } = props;\n  const {\n    disabled,\n    shade,\n    variant\n  } = rest;\n  const [active, setActive] = useState(false);\n  const handleToggle = useCallback(status => {\n    setActive(status);\n\n    if (onToggle) {\n      onToggle(status);\n    }\n  }, [onToggle]);\n  const buttonProps = {};\n  const wrapperProps = {};\n  Object.entries(rest).forEach(_ref => {\n    let [key, value] = _ref;\n\n    if (key.startsWith('data-')) {\n      buttonProps[key] = value;\n    } else {\n      wrapperProps[key] = value;\n    }\n  });\n  return _jsxs(StyledButtonSplit, {\n    \"data-component-name\": \"ButtonSplit\",\n    ...wrapperProps,\n    children: [_jsx(ButtonBase, {\n      busy: busy,\n      disabled: disabled,\n      onClick: onClick,\n      ...buttonProps,\n      children: label\n    }), _jsx(Menu, {\n      component: _jsx(Icon, {\n        name: active ? 'chevron-up' : 'chevron-down',\n        size: 24\n      }),\n      disabled: disabled || busy,\n      onToggle: handleToggle,\n      position: position,\n      shade: shade,\n      variant: variant,\n      children: children\n    })]\n  });\n}\nButtonSplit.defaultProps = {\n  block: false,\n  busy: false,\n  disabled: false,\n  invert: false,\n  position: 'bottom-right',\n  shade: 'mid',\n  size: 'md',\n  variant: 'primary'\n};\nexport { MenuDivider as ButtonSplitDivider, MenuItem as ButtonSplitItem } from './Menu';","map":{"version":3,"mappings":"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","names":["useCallback","useState","css","styled","ButtonBase","Icon","Menu","getTheme","backgroundStyles","getStyledOptions","StyledButtonSplit","props","block","disabled","invert","size","button","grayLight","grayMid","spacing","borderRadius","fontSize","fontWeight","height","lineHeight","padding","buttonPadding","styles","backgroundColor","borderColor","color","border","xs","ButtonSplit","busy","children","label","onClick","onToggle","position","rest","shade","variant","active","setActive","handleToggle","status","buttonProps","wrapperProps","Object","entries","forEach","key","value","startsWith","_jsxs","_jsx","component","name","defaultProps","MenuDivider","ButtonSplitDivider","MenuItem","ButtonSplitItem"],"sources":["/My_WORK/graduate_React/frontend/node_modules/@gilbarbara/components/src/ButtonSplit.tsx"],"sourcesContent":["import { MouseEventHandler, ReactNode, useCallback, useState } from 'react';\nimport { css } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport { AnyObject } from '@gilbarbara/types';\n\nimport { ButtonBase } from './ButtonBase';\nimport { Icon } from './Icon';\nimport { Menu, MenuProps } from './Menu';\nimport { getTheme } from './modules/helpers';\nimport { backgroundStyles, getStyledOptions } from './modules/system';\nimport {\n  PositionY,\n  WithBlock,\n  WithBusy,\n  WithChildren,\n  WithColor,\n  WithComponentSize,\n  WithInvert,\n} from './types';\n\nexport interface ButtonSplitProps\n  extends Pick<MenuProps, 'disabled' | 'onToggle'>,\n    WithBlock,\n    WithBusy,\n    WithChildren,\n    WithColor,\n    WithComponentSize,\n    WithInvert {\n  label: ReactNode;\n  onClick: MouseEventHandler<HTMLButtonElement>;\n  /** @default bottom-right */\n  position?: PositionY;\n}\n\nexport const StyledButtonSplit = styled(\n  'div',\n  getStyledOptions(),\n)<Omit<ButtonSplitProps, 'label' | 'onClick'>>(props => {\n  const { block, disabled, invert, size = 'md' } = props;\n  const { button, grayLight, grayMid, spacing } = getTheme(props);\n\n  const { borderRadius, fontSize, fontWeight, height, lineHeight, padding } = button;\n  const buttonPadding = `${padding[size][0]} ${padding[size][1]}`;\n  const styles = backgroundStyles(props);\n\n  if (disabled) {\n    styles.backgroundColor = grayLight;\n    styles.borderColor = grayLight;\n    styles.color = grayMid;\n  }\n\n  return css`\n    display: inline-flex;\n    min-height: ${height[size]};\n    min-width: ${height[size]};\n    width: ${block ? '100%' : 'auto'};\n\n    > [data-component-name='ButtonBase'] {\n      ${styles};\n      border-bottom-left-radius: ${borderRadius[size]};\n      border-right: 0;\n      border-top-left-radius: ${borderRadius[size]};\n      display: flex;\n      flex: 1;\n      font-size: ${fontSize[size]};\n      font-weight: ${fontWeight};\n      justify-content: center;\n      line-height: ${lineHeight[size]};\n      opacity: 1;\n      padding: ${buttonPadding};\n    }\n\n    > [data-component-name='Menu'] {\n      ${styles};\n      align-items: center;\n      border-left: ${invert ? styles.border : `1px solid ${styles.color}`};\n      border-top-right-radius: ${borderRadius[size]};\n      border-bottom-right-radius: ${borderRadius[size]};\n      display: flex;\n    }\n\n    [data-component-name='MenuButton'] {\n      height: 100%;\n      opacity: 1;\n      padding: 0 ${spacing.xs};\n      width: 100%;\n    }\n  `;\n});\n\nexport function ButtonSplit(props: ButtonSplitProps): JSX.Element {\n  const { busy, children, label, onClick, onToggle, position, ...rest } = props;\n  const { disabled, shade, variant } = rest;\n  const [active, setActive] = useState(false);\n\n  const handleToggle = useCallback(\n    (status: boolean) => {\n      setActive(status);\n\n      if (onToggle) {\n        onToggle(status);\n      }\n    },\n    [onToggle],\n  );\n\n  const buttonProps: AnyObject = {};\n  const wrapperProps: AnyObject = {};\n\n  Object.entries(rest).forEach(([key, value]) => {\n    if (key.startsWith('data-')) {\n      buttonProps[key] = value;\n    } else {\n      wrapperProps[key] = value;\n    }\n  });\n\n  return (\n    <StyledButtonSplit data-component-name=\"ButtonSplit\" {...wrapperProps}>\n      <ButtonBase busy={busy} disabled={disabled} onClick={onClick} {...buttonProps}>\n        {label}\n      </ButtonBase>\n      <Menu\n        component={<Icon name={active ? 'chevron-up' : 'chevron-down'} size={24} />}\n        disabled={disabled || busy}\n        onToggle={handleToggle}\n        position={position}\n        shade={shade}\n        variant={variant}\n      >\n        {children}\n      </Menu>\n    </StyledButtonSplit>\n  );\n}\n\nButtonSplit.defaultProps = {\n  block: false,\n  busy: false,\n  disabled: false,\n  invert: false,\n  position: 'bottom-right',\n  shade: 'mid',\n  size: 'md',\n  variant: 'primary',\n};\n\nexport { MenuDivider as ButtonSplitDivider, MenuItem as ButtonSplitItem } from './Menu';\n"]},"metadata":{},"sourceType":"module"}