{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nimport * as React from 'react';\nimport convert from 'react-from-dom';\nimport { canUseDOM, isSupportedEnvironment, omit, randomString, STATUS } from './helpers';\nexport var cacheStore = Object.create(null);\n\nvar InlineSVG =\n/** @class */\nfunction (_super) {\n  __extends(InlineSVG, _super);\n\n  function InlineSVG(props) {\n    var _this = _super.call(this, props) || this;\n\n    Object.defineProperty(_this, \"isInitialized\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(_this, \"isActive\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(_this, \"hash\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"handleLoad\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: function (content) {\n        /* istanbul ignore else */\n        if (_this.isActive) {\n          _this.setState({\n            content: content,\n            status: STATUS.LOADED\n          }, _this.getElement);\n        }\n      }\n    });\n    Object.defineProperty(_this, \"handleError\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: function (error) {\n        var onError = _this.props.onError;\n        var status = error.message === 'Browser does not support SVG' ? STATUS.UNSUPPORTED : STATUS.FAILED;\n        /* istanbul ignore else */\n\n        if (_this.isActive) {\n          _this.setState({\n            status: status\n          }, function () {\n            /* istanbul ignore else */\n            if (typeof onError === 'function') {\n              onError(error);\n            }\n          });\n        }\n      }\n    });\n    Object.defineProperty(_this, \"request\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: function () {\n        var _a = _this.props,\n            cacheRequests = _a.cacheRequests,\n            fetchOptions = _a.fetchOptions,\n            src = _a.src;\n\n        try {\n          if (cacheRequests) {\n            cacheStore[src] = {\n              content: '',\n              status: STATUS.LOADING\n            };\n          }\n\n          return fetch(src, fetchOptions).then(function (response) {\n            var contentType = response.headers.get('content-type');\n\n            var _a = __read((contentType || '').split(/ ?; ?/), 1),\n                fileType = _a[0];\n\n            if (response.status > 299) {\n              throw new Error('Not found');\n            }\n\n            if (!['image/svg+xml', 'text/plain'].some(function (d) {\n              return fileType.includes(d);\n            })) {\n              throw new Error(\"Content type isn't valid: \".concat(fileType));\n            }\n\n            return response.text();\n          }).then(function (content) {\n            var currentSrc = _this.props.src; // the current src don't match the previous one, skipping...\n\n            if (src !== currentSrc) {\n              if (cacheStore[src].status === STATUS.LOADING) {\n                delete cacheStore[src];\n              }\n\n              return;\n            }\n\n            _this.handleLoad(content);\n            /* istanbul ignore else */\n\n\n            if (cacheRequests) {\n              var cache = cacheStore[src];\n              /* istanbul ignore else */\n\n              if (cache) {\n                cache.content = content;\n                cache.status = STATUS.LOADED;\n              }\n            }\n          }).catch(function (error) {\n            _this.handleError(error);\n            /* istanbul ignore else */\n\n\n            if (cacheRequests) {\n              var cache = cacheStore[src];\n              /* istanbul ignore else */\n\n              if (cache) {\n                delete cacheStore[src];\n              }\n            }\n          });\n        } catch (error) {\n          return _this.handleError(new Error(error.message));\n        }\n      }\n    });\n    _this.state = {\n      content: '',\n      element: null,\n      hasCache: !!props.cacheRequests && !!cacheStore[props.src],\n      status: STATUS.PENDING\n    };\n    _this.hash = props.uniqueHash || randomString(8);\n    return _this;\n  }\n\n  Object.defineProperty(InlineSVG.prototype, \"componentDidMount\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this.isActive = true;\n\n      if (!canUseDOM() || this.isInitialized) {\n        return;\n      }\n\n      var status = this.state.status;\n      var src = this.props.src;\n\n      try {\n        /* istanbul ignore else */\n        if (status === STATUS.PENDING) {\n          /* istanbul ignore else */\n          if (!isSupportedEnvironment()) {\n            throw new Error('Browser does not support SVG');\n          }\n          /* istanbul ignore else */\n\n\n          if (!src) {\n            throw new Error('Missing src');\n          }\n\n          this.load();\n        }\n      } catch (error) {\n        this.handleError(error);\n      }\n\n      this.isInitialized = true;\n    }\n  });\n  Object.defineProperty(InlineSVG.prototype, \"componentDidUpdate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (previousProps, previousState) {\n      if (!canUseDOM()) {\n        return;\n      }\n\n      var _a = this.state,\n          hasCache = _a.hasCache,\n          status = _a.status;\n      var _b = this.props,\n          onLoad = _b.onLoad,\n          src = _b.src;\n\n      if (previousState.status !== STATUS.READY && status === STATUS.READY) {\n        /* istanbul ignore else */\n        if (onLoad) {\n          onLoad(src, hasCache);\n        }\n      }\n\n      if (previousProps.src !== src) {\n        if (!src) {\n          this.handleError(new Error('Missing src'));\n          return;\n        }\n\n        this.load();\n      }\n    }\n  });\n  Object.defineProperty(InlineSVG.prototype, \"componentWillUnmount\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this.isActive = false;\n    }\n  });\n  Object.defineProperty(InlineSVG.prototype, \"getNode\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _a = this.props,\n          description = _a.description,\n          title = _a.title;\n\n      try {\n        var svgText = this.processSVG();\n        var node = convert(svgText, {\n          nodeOnly: true\n        });\n\n        if (!node || !(node instanceof SVGSVGElement)) {\n          throw new Error('Could not convert the src to a DOM Node');\n        }\n\n        var svg = this.updateSVGAttributes(node);\n\n        if (description) {\n          var originalDesc = svg.querySelector('desc');\n\n          if (originalDesc && originalDesc.parentNode) {\n            originalDesc.parentNode.removeChild(originalDesc);\n          }\n\n          var descElement = document.createElement('desc');\n          descElement.innerHTML = description;\n          svg.prepend(descElement);\n        }\n\n        if (title) {\n          var originalTitle = svg.querySelector('title');\n\n          if (originalTitle && originalTitle.parentNode) {\n            originalTitle.parentNode.removeChild(originalTitle);\n          }\n\n          var titleElement = document.createElement('title');\n          titleElement.innerHTML = title;\n          svg.prepend(titleElement);\n        }\n\n        return svg;\n      } catch (error) {\n        return this.handleError(error);\n      }\n    }\n  });\n  Object.defineProperty(InlineSVG.prototype, \"getElement\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      try {\n        var node = this.getNode();\n        var element = convert(node);\n\n        if (!element || !React.isValidElement(element)) {\n          throw new Error('Could not convert the src to a React element');\n        }\n\n        this.setState({\n          element: element,\n          status: STATUS.READY\n        });\n      } catch (error) {\n        this.handleError(new Error(error.message));\n      }\n    }\n  });\n  Object.defineProperty(InlineSVG.prototype, \"load\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n      /* istanbul ignore else */\n\n\n      if (this.isActive) {\n        this.setState({\n          content: '',\n          element: null,\n          status: STATUS.LOADING\n        }, function () {\n          var _a = _this.props,\n              cacheRequests = _a.cacheRequests,\n              src = _a.src;\n          var cache = cacheRequests && cacheStore[src];\n\n          if (cache && cache.status === STATUS.LOADED) {\n            _this.handleLoad(cache.content);\n\n            return;\n          }\n\n          var dataURI = src.match(/data:image\\/svg[^,]*?(;base64)?,(.*)/);\n          var inlineSrc;\n\n          if (dataURI) {\n            inlineSrc = dataURI[1] ? window.atob(dataURI[2]) : decodeURIComponent(dataURI[2]);\n          } else if (src.includes('<svg')) {\n            inlineSrc = src;\n          }\n\n          if (inlineSrc) {\n            _this.handleLoad(inlineSrc);\n\n            return;\n          }\n\n          _this.request();\n        });\n      }\n    }\n  });\n  Object.defineProperty(InlineSVG.prototype, \"updateSVGAttributes\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (node) {\n      var _this = this;\n\n      var _a = this.props,\n          _b = _a.baseURL,\n          baseURL = _b === void 0 ? '' : _b,\n          uniquifyIDs = _a.uniquifyIDs;\n      var replaceableAttributes = ['id', 'href', 'xlink:href', 'xlink:role', 'xlink:arcrole'];\n      var linkAttributes = ['href', 'xlink:href'];\n\n      var isDataValue = function (name, value) {\n        return linkAttributes.includes(name) && (value ? !value.includes('#') : false);\n      };\n\n      if (!uniquifyIDs) {\n        return node;\n      }\n\n      __spreadArray([], __read(node.children), false).map(function (d) {\n        if (d.attributes && d.attributes.length) {\n          var attributes_1 = Object.values(d.attributes).map(function (a) {\n            var attribute = a;\n            var match = a.value.match(/url\\((.*?)\\)/);\n\n            if (match && match[1]) {\n              attribute.value = a.value.replace(match[0], \"url(\".concat(baseURL).concat(match[1], \"__\").concat(_this.hash, \")\"));\n            }\n\n            return attribute;\n          });\n          replaceableAttributes.forEach(function (r) {\n            var attribute = attributes_1.find(function (a) {\n              return a.name === r;\n            });\n\n            if (attribute && !isDataValue(r, attribute.value)) {\n              attribute.value = \"\".concat(attribute.value, \"__\").concat(_this.hash);\n            }\n          });\n        }\n\n        if (d.children.length) {\n          return _this.updateSVGAttributes(d);\n        }\n\n        return d;\n      });\n\n      return node;\n    }\n  });\n  Object.defineProperty(InlineSVG.prototype, \"processSVG\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var content = this.state.content;\n      var preProcessor = this.props.preProcessor;\n\n      if (preProcessor) {\n        return preProcessor(content);\n      }\n\n      return content;\n    }\n  });\n  Object.defineProperty(InlineSVG.prototype, \"render\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _a = this.state,\n          element = _a.element,\n          status = _a.status;\n      var _b = this.props,\n          _c = _b.children,\n          children = _c === void 0 ? null : _c,\n          innerRef = _b.innerRef,\n          _d = _b.loader,\n          loader = _d === void 0 ? null : _d;\n      var elementProps = omit(this.props, 'baseURL', 'cacheRequests', 'children', 'description', 'fetchOptions', 'innerRef', 'loader', 'onError', 'onLoad', 'preProcessor', 'src', 'title', 'uniqueHash', 'uniquifyIDs');\n\n      if (!canUseDOM()) {\n        return loader;\n      }\n\n      if (element) {\n        return React.cloneElement(element, __assign({\n          ref: innerRef\n        }, elementProps));\n      }\n\n      if ([STATUS.UNSUPPORTED, STATUS.FAILED].includes(status)) {\n        return children;\n      }\n\n      return loader;\n    }\n  });\n  Object.defineProperty(InlineSVG, \"defaultProps\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: {\n      cacheRequests: true,\n      uniquifyIDs: false\n    }\n  });\n  return InlineSVG;\n}(React.PureComponent);\n\nexport default InlineSVG;\nexport * from './types';","map":{"version":3,"mappings":"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","names":["React","convert","canUseDOM","isSupportedEnvironment","omit","randomString","STATUS","cacheStore","Object","create","__extends","props","_super","content","_this","isActive","setState","status","LOADED","getElement","error","onError","message","UNSUPPORTED","FAILED","cacheRequests","fetchOptions","src","LOADING","fetch","then","contentType","response","headers","get","split","fileType","Error","some","includes","d","text","currentSrc","handleLoad","cache","catch","handleError","state","element","hasCache","PENDING","hash","uniqueHash","isInitialized","load","previousProps","previousState","onLoad","READY","description","title","svgText","processSVG","node","nodeOnly","SVGSVGElement","svg","updateSVGAttributes","originalDesc","querySelector","parentNode","removeChild","descElement","document","createElement","innerHTML","prepend","originalTitle","titleElement","getNode","isValidElement","dataURI","match","inlineSrc","window","atob","decodeURIComponent","request","_b","baseURL","uniquifyIDs","replaceableAttributes","linkAttributes","isDataValue","name","value","__spreadArray","children","map","attributes","length","attributes_1","values","attribute","a","replace","concat","forEach","find","r","preProcessor","_c","innerRef","_d","loader","elementProps","cloneElement","__assign","ref","PureComponent","InlineSVG"],"sources":["/My_WORK/graduate_React/frontend/node_modules/react-inlinesvg/src/index.tsx"],"sourcesContent":["import * as React from 'react';\nimport convert from 'react-from-dom';\n\nimport { canUseDOM, isSupportedEnvironment, omit, randomString, STATUS } from './helpers';\nimport { FetchError, Props, State, StorageItem } from './types';\n\nexport const cacheStore: { [key: string]: StorageItem } = Object.create(null);\n\nexport default class InlineSVG extends React.PureComponent<Props, State> {\n  private isInitialized = false;\n  private isActive = false;\n  private readonly hash: string;\n\n  public static defaultProps = {\n    cacheRequests: true,\n    uniquifyIDs: false,\n  };\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      content: '',\n      element: null,\n      hasCache: !!props.cacheRequests && !!cacheStore[props.src],\n      status: STATUS.PENDING,\n    };\n\n    this.hash = props.uniqueHash || randomString(8);\n  }\n\n  public componentDidMount(): void {\n    this.isActive = true;\n\n    if (!canUseDOM() || this.isInitialized) {\n      return;\n    }\n\n    const { status } = this.state;\n    const { src } = this.props;\n\n    try {\n      /* istanbul ignore else */\n      if (status === STATUS.PENDING) {\n        /* istanbul ignore else */\n        if (!isSupportedEnvironment()) {\n          throw new Error('Browser does not support SVG');\n        }\n\n        /* istanbul ignore else */\n        if (!src) {\n          throw new Error('Missing src');\n        }\n\n        this.load();\n      }\n    } catch (error: any) {\n      this.handleError(error);\n    }\n\n    this.isInitialized = true;\n  }\n\n  public componentDidUpdate(previousProps: Props, previousState: State): void {\n    if (!canUseDOM()) {\n      return;\n    }\n\n    const { hasCache, status } = this.state;\n    const { onLoad, src } = this.props;\n\n    if (previousState.status !== STATUS.READY && status === STATUS.READY) {\n      /* istanbul ignore else */\n      if (onLoad) {\n        onLoad(src, hasCache);\n      }\n    }\n\n    if (previousProps.src !== src) {\n      if (!src) {\n        this.handleError(new Error('Missing src'));\n\n        return;\n      }\n\n      this.load();\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this.isActive = false;\n  }\n\n  private getNode() {\n    const { description, title } = this.props;\n\n    try {\n      const svgText = this.processSVG();\n      const node = convert(svgText, { nodeOnly: true });\n\n      if (!node || !(node instanceof SVGSVGElement)) {\n        throw new Error('Could not convert the src to a DOM Node');\n      }\n\n      const svg = this.updateSVGAttributes(node);\n\n      if (description) {\n        const originalDesc = svg.querySelector('desc');\n\n        if (originalDesc && originalDesc.parentNode) {\n          originalDesc.parentNode.removeChild(originalDesc);\n        }\n\n        const descElement = document.createElement('desc');\n\n        descElement.innerHTML = description;\n        svg.prepend(descElement);\n      }\n\n      if (title) {\n        const originalTitle = svg.querySelector('title');\n\n        if (originalTitle && originalTitle.parentNode) {\n          originalTitle.parentNode.removeChild(originalTitle);\n        }\n\n        const titleElement = document.createElement('title');\n\n        titleElement.innerHTML = title;\n        svg.prepend(titleElement);\n      }\n\n      return svg;\n    } catch (error: any) {\n      return this.handleError(error);\n    }\n  }\n\n  private getElement() {\n    try {\n      const node = this.getNode() as Node;\n      const element = convert(node);\n\n      if (!element || !React.isValidElement(element)) {\n        throw new Error('Could not convert the src to a React element');\n      }\n\n      this.setState({\n        element,\n        status: STATUS.READY,\n      });\n    } catch (error: any) {\n      this.handleError(new Error(error.message));\n    }\n  }\n\n  private handleLoad = (content: string) => {\n    /* istanbul ignore else */\n    if (this.isActive) {\n      this.setState(\n        {\n          content,\n          status: STATUS.LOADED,\n        },\n        this.getElement,\n      );\n    }\n  };\n\n  private handleError = (error: Error | FetchError) => {\n    const { onError } = this.props;\n    const status =\n      error.message === 'Browser does not support SVG' ? STATUS.UNSUPPORTED : STATUS.FAILED;\n\n    /* istanbul ignore else */\n    if (this.isActive) {\n      this.setState({ status }, () => {\n        /* istanbul ignore else */\n        if (typeof onError === 'function') {\n          onError(error);\n        }\n      });\n    }\n  };\n\n  private request = () => {\n    const { cacheRequests, fetchOptions, src } = this.props;\n\n    try {\n      if (cacheRequests) {\n        cacheStore[src] = { content: '', status: STATUS.LOADING };\n      }\n\n      return fetch(src, fetchOptions)\n        .then(response => {\n          const contentType = response.headers.get('content-type');\n          const [fileType] = (contentType || '').split(/ ?; ?/);\n\n          if (response.status > 299) {\n            throw new Error('Not found');\n          }\n\n          if (!['image/svg+xml', 'text/plain'].some(d => fileType.includes(d))) {\n            throw new Error(`Content type isn't valid: ${fileType}`);\n          }\n\n          return response.text();\n        })\n        .then(content => {\n          const { src: currentSrc } = this.props;\n\n          // the current src don't match the previous one, skipping...\n          if (src !== currentSrc) {\n            if (cacheStore[src].status === STATUS.LOADING) {\n              delete cacheStore[src];\n            }\n\n            return;\n          }\n\n          this.handleLoad(content);\n\n          /* istanbul ignore else */\n          if (cacheRequests) {\n            const cache = cacheStore[src];\n\n            /* istanbul ignore else */\n            if (cache) {\n              cache.content = content;\n              cache.status = STATUS.LOADED;\n            }\n          }\n        })\n        .catch(error => {\n          this.handleError(error);\n\n          /* istanbul ignore else */\n          if (cacheRequests) {\n            const cache = cacheStore[src];\n\n            /* istanbul ignore else */\n            if (cache) {\n              delete cacheStore[src];\n            }\n          }\n        });\n    } catch (error: any) {\n      return this.handleError(new Error(error.message));\n    }\n  };\n\n  private load() {\n    /* istanbul ignore else */\n    if (this.isActive) {\n      this.setState(\n        {\n          content: '',\n          element: null,\n          status: STATUS.LOADING,\n        },\n        () => {\n          const { cacheRequests, src } = this.props;\n          const cache = cacheRequests && cacheStore[src];\n\n          if (cache && cache.status === STATUS.LOADED) {\n            this.handleLoad(cache.content);\n\n            return;\n          }\n\n          const dataURI = src.match(/data:image\\/svg[^,]*?(;base64)?,(.*)/);\n          let inlineSrc;\n\n          if (dataURI) {\n            inlineSrc = dataURI[1] ? window.atob(dataURI[2]) : decodeURIComponent(dataURI[2]);\n          } else if (src.includes('<svg')) {\n            inlineSrc = src;\n          }\n\n          if (inlineSrc) {\n            this.handleLoad(inlineSrc);\n\n            return;\n          }\n\n          this.request();\n        },\n      );\n    }\n  }\n\n  private updateSVGAttributes(node: SVGSVGElement): SVGSVGElement {\n    const { baseURL = '', uniquifyIDs } = this.props;\n    const replaceableAttributes = ['id', 'href', 'xlink:href', 'xlink:role', 'xlink:arcrole'];\n    const linkAttributes = ['href', 'xlink:href'];\n    const isDataValue = (name: string, value: string) =>\n      linkAttributes.includes(name) && (value ? !value.includes('#') : false);\n\n    if (!uniquifyIDs) {\n      return node;\n    }\n\n    [...node.children].map(d => {\n      if (d.attributes && d.attributes.length) {\n        const attributes = Object.values(d.attributes).map(a => {\n          const attribute = a;\n          const match = a.value.match(/url\\((.*?)\\)/);\n\n          if (match && match[1]) {\n            attribute.value = a.value.replace(match[0], `url(${baseURL}${match[1]}__${this.hash})`);\n          }\n\n          return attribute;\n        });\n\n        replaceableAttributes.forEach(r => {\n          const attribute = attributes.find(a => a.name === r);\n\n          if (attribute && !isDataValue(r, attribute.value)) {\n            attribute.value = `${attribute.value}__${this.hash}`;\n          }\n        });\n      }\n\n      if (d.children.length) {\n        return this.updateSVGAttributes(d as SVGSVGElement);\n      }\n\n      return d;\n    });\n\n    return node;\n  }\n\n  private processSVG() {\n    const { content } = this.state;\n    const { preProcessor } = this.props;\n\n    if (preProcessor) {\n      return preProcessor(content);\n    }\n\n    return content;\n  }\n\n  public render(): React.ReactNode {\n    const { element, status } = this.state;\n    const { children = null, innerRef, loader = null } = this.props;\n    const elementProps = omit(\n      this.props,\n      'baseURL',\n      'cacheRequests',\n      'children',\n      'description',\n      'fetchOptions',\n      'innerRef',\n      'loader',\n      'onError',\n      'onLoad',\n      'preProcessor',\n      'src',\n      'title',\n      'uniqueHash',\n      'uniquifyIDs',\n    );\n\n    if (!canUseDOM()) {\n      return loader;\n    }\n\n    if (element) {\n      return React.cloneElement(element as React.ReactElement, { ref: innerRef, ...elementProps });\n    }\n\n    if ([STATUS.UNSUPPORTED, STATUS.FAILED].includes(status)) {\n      return children;\n    }\n\n    return loader;\n  }\n}\n\nexport * from './types';\n"]},"metadata":{},"sourceType":"module"}