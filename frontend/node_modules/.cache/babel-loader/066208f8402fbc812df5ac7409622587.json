{"ast":null,"code":"import chroma from './chroma';\nimport compare from './compare';\nimport darken from './darken';\nimport desaturate from './desaturate';\nimport fade from './fade';\nimport formatCSS from './format-css';\nimport lighten from './lighten';\nimport luminance from './luminance';\nimport parseColor from './modules/parse-color';\nimport { invariant } from './modules/utils';\nimport rotate from './rotate';\nimport saturate from './saturate';\nimport textColor from './text-color';\n\nclass Colorizr {\n  hex;\n  model;\n  hsl;\n  rgb;\n\n  constructor(color) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    invariant(!!color, 'color is required');\n    const {\n      model = 'rgb'\n    } = options;\n    const {\n      hex,\n      hsl,\n      rgb\n    } = parseColor(color);\n    this.model = model;\n    this.hex = hex;\n    this.hsl = hsl;\n    this.rgb = rgb;\n  }\n  /**\n   * Get css string\n   */\n\n\n  get css() {\n    return formatCSS(this.hsl, {\n      model: this.model\n    });\n  }\n  /**\n   * Get the red value\n   */\n\n\n  get red() {\n    return Number(this.rgb.r);\n  }\n  /**\n   * Get the green value\n   */\n\n\n  get green() {\n    return Number(this.rgb.g);\n  }\n  /**\n   * Get the blue value\n   */\n\n\n  get blue() {\n    return Number(this.rgb.b);\n  }\n  /**\n   * Get the hue value\n   */\n\n\n  get hue() {\n    return Number(this.hsl.h);\n  }\n  /**\n   * Get the saturation value\n   */\n\n\n  get saturation() {\n    return Number(this.hsl.s);\n  }\n  /**\n   * Get the lightness value\n   */\n\n\n  get lightness() {\n    return Number(this.hsl.l);\n  }\n  /**\n   * Get the luminance value\n   */\n\n\n  get luminance() {\n    return luminance(this.hex);\n  }\n  /**\n   * Get the chroma value\n   */\n\n\n  get chroma() {\n    return chroma(this.hex);\n  }\n  /**\n   * Get the contrasted color\n   */\n\n\n  get textColor() {\n    return textColor(this.hex);\n  }\n  /**\n   * Test 2 colors for compliance\n   */\n\n\n  compare(input) {\n    return compare(this.hex, input);\n  }\n  /**\n   * Increase lightness\n   */\n\n\n  lighten() {\n    let percentage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n    return lighten(this.hex, percentage);\n  }\n  /**\n   * Decrease lightness\n   */\n\n\n  darken() {\n    let percentage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n    return darken(this.hex, percentage);\n  }\n  /**\n   * Increase saturation\n   */\n\n\n  saturate() {\n    let percentage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n    return saturate(this.hex, percentage);\n  }\n  /**\n   * Decrease saturation\n   */\n\n\n  desaturate() {\n    let percentage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n    return desaturate(this.hex, percentage);\n  }\n  /**\n   * Invert color\n   */\n\n\n  invert() {\n    return rotate(this.hex, 180);\n  }\n  /**\n   * Rotate color\n   */\n\n\n  rotate() {\n    let degrees = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 15;\n    return rotate(this.hex, degrees);\n  }\n  /**\n   * Fade color\n   */\n\n\n  fade() {\n    let percentage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n    return fade(this.hex, percentage, this.model);\n  }\n\n}\n\nexport { default as brightnessDifference } from './brightness-difference';\nexport { default as chroma } from './chroma';\nexport { default as colorDifference } from './color-difference';\nexport { default as compare } from './compare';\nexport { default as contrast } from './contrast';\nexport { default as darken } from './darken';\nexport { default as desaturate } from './desaturate';\nexport { default as fade } from './fade';\nexport { default as formatCSS } from './format-css';\nexport { default as formatHex } from './format-hex';\nexport { default as hex2hsl } from './hex2hsl';\nexport { default as hex2rgb } from './hex2rgb';\nexport { default as hsl2hex } from './hsl2hex';\nexport { default as hsl2rgb } from './hsl2rgb';\nexport { default as isValidColor } from './is-valid-color';\nexport { default as isValidHex } from './is-valid-hex';\nexport { default as lighten } from './lighten';\nexport { default as luminance } from './luminance';\nexport { default as name } from './name';\nexport { default as palette } from './palette';\nexport { default as parseCSS } from './parse-css';\nexport { default as random } from './random';\nexport { default as rgb2hex } from './rgb2hex';\nexport { default as rgb2hsl } from './rgb2hsl';\nexport { default as rotate } from './rotate';\nexport { default as saturate } from './saturate';\nexport { default as scheme } from './scheme';\nexport { default as textColor } from './text-color';\nexport * from './types';\nexport default Colorizr;","map":{"version":3,"mappings":"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","names":["chroma","compare","darken","desaturate","fade","formatCSS","lighten","luminance","parseColor","invariant","rotate","saturate","textColor","Colorizr","hex","model","hsl","rgb","constructor","color","options","css","red","Number","r","green","g","blue","b","hue","h","saturation","s","lightness","l","input","percentage","invert","degrees","default","brightnessDifference","colorDifference","contrast","formatHex","hex2hsl","hex2rgb","hsl2hex","hsl2rgb","isValidColor","isValidHex","name","palette","parseCSS","random","rgb2hex","rgb2hsl","scheme"],"sources":["/My_WORK/graduate_React/frontend/node_modules/colorizr/src/index.ts"],"sourcesContent":["import chroma from './chroma';\nimport compare from './compare';\nimport darken from './darken';\nimport desaturate from './desaturate';\nimport fade from './fade';\nimport formatCSS from './format-css';\nimport lighten from './lighten';\nimport luminance from './luminance';\nimport parseColor from './modules/parse-color';\nimport { invariant } from './modules/utils';\nimport rotate from './rotate';\nimport saturate from './saturate';\nimport textColor from './text-color';\nimport { Analysis, HSL, Options, RGB, RGBArray } from './types';\n\nclass Colorizr {\n  public hex: string;\n  private readonly model: Options['model'];\n  public hsl: HSL;\n  public rgb: RGB;\n\n  constructor(color: string | HSL | RGB | RGBArray, options: Options = {}) {\n    invariant(!!color, 'color is required');\n\n    const { model = 'rgb' } = options;\n    const { hex, hsl, rgb } = parseColor(color);\n\n    this.model = model;\n    this.hex = hex;\n    this.hsl = hsl;\n    this.rgb = rgb;\n  }\n\n  /**\n   * Get css string\n   */\n  get css(): string {\n    return formatCSS(this.hsl, { model: this.model });\n  }\n\n  /**\n   * Get the red value\n   */\n  get red(): number {\n    return Number(this.rgb.r);\n  }\n\n  /**\n   * Get the green value\n   */\n  get green(): number {\n    return Number(this.rgb.g);\n  }\n\n  /**\n   * Get the blue value\n   */\n  get blue(): number {\n    return Number(this.rgb.b);\n  }\n\n  /**\n   * Get the hue value\n   */\n  get hue(): number {\n    return Number(this.hsl.h);\n  }\n\n  /**\n   * Get the saturation value\n   */\n  get saturation(): number {\n    return Number(this.hsl.s);\n  }\n\n  /**\n   * Get the lightness value\n   */\n  get lightness(): number {\n    return Number(this.hsl.l);\n  }\n\n  /**\n   * Get the luminance value\n   */\n  get luminance(): number {\n    return luminance(this.hex);\n  }\n\n  /**\n   * Get the chroma value\n   */\n  get chroma(): number {\n    return chroma(this.hex);\n  }\n\n  /**\n   * Get the contrasted color\n   */\n  get textColor(): string {\n    return textColor(this.hex);\n  }\n\n  /**\n   * Test 2 colors for compliance\n   */\n  public compare(input: string): Analysis {\n    return compare(this.hex, input);\n  }\n\n  /**\n   * Increase lightness\n   */\n  public lighten(percentage = 10): string {\n    return lighten(this.hex, percentage);\n  }\n\n  /**\n   * Decrease lightness\n   */\n  public darken(percentage = 10): string {\n    return darken(this.hex, percentage);\n  }\n\n  /**\n   * Increase saturation\n   */\n  public saturate(percentage = 10): string {\n    return saturate(this.hex, percentage);\n  }\n\n  /**\n   * Decrease saturation\n   */\n  public desaturate(percentage = 10): string {\n    return desaturate(this.hex, percentage);\n  }\n\n  /**\n   * Invert color\n   */\n  public invert(): string {\n    return rotate(this.hex, 180);\n  }\n\n  /**\n   * Rotate color\n   */\n  public rotate(degrees = 15): string {\n    return rotate(this.hex, degrees);\n  }\n\n  /**\n   * Fade color\n   */\n  public fade(percentage = 10): string {\n    return fade(this.hex, percentage, this.model);\n  }\n}\n\nexport { default as brightnessDifference } from './brightness-difference';\nexport { default as chroma } from './chroma';\nexport { default as colorDifference } from './color-difference';\nexport { default as compare } from './compare';\nexport { default as contrast } from './contrast';\nexport { default as darken } from './darken';\nexport { default as desaturate } from './desaturate';\nexport { default as fade } from './fade';\nexport { default as formatCSS } from './format-css';\nexport { default as formatHex } from './format-hex';\nexport { default as hex2hsl } from './hex2hsl';\nexport { default as hex2rgb } from './hex2rgb';\nexport { default as hsl2hex } from './hsl2hex';\nexport { default as hsl2rgb } from './hsl2rgb';\nexport { default as isValidColor } from './is-valid-color';\nexport { default as isValidHex } from './is-valid-hex';\nexport { default as lighten } from './lighten';\nexport { default as luminance } from './luminance';\nexport { default as name } from './name';\nexport { default as palette } from './palette';\nexport { default as parseCSS } from './parse-css';\nexport { default as random } from './random';\nexport { default as rgb2hex } from './rgb2hex';\nexport { default as rgb2hsl } from './rgb2hsl';\nexport { default as rotate } from './rotate';\nexport { default as saturate } from './saturate';\nexport { default as scheme } from './scheme';\nexport { default as textColor } from './text-color';\n\nexport * from './types';\n\nexport default Colorizr;\n"]},"metadata":{},"sourceType":"module"}