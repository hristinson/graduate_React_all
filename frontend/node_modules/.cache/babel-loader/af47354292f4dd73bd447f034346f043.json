{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { css, keyframes } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport { rotate } from '../modules/animations';\nimport { getColorVariant, getTheme, px } from '../modules/helpers';\nimport { getStyledOptions, isDarkMode } from '../modules/system';\nconst dash = keyframes`\n  0% {\n    stroke-dasharray: 1, 200;\n    stroke-dashoffset: 0;\n  }\n\n  50% {\n    stroke-dasharray: 89, 200;\n    stroke-dashoffset: -35px;\n  }\n\n  100% {\n    stroke-dasharray: 89, 200;\n    stroke-dashoffset: -124px;\n  }\n`;\nconst StyledLoaderRotate = styled('div', getStyledOptions())(props => {\n  const {\n    block\n  } = props;\n  const {\n    spacing\n  } = getTheme(props);\n  return css`\n    display: ${block ? 'flex' : 'inline-flex'};\n    margin: ${block ? spacing.lg : 0} auto;\n    text-align: center;\n  `;\n});\nconst StyledLoaderRotateSVG = styled('svg', getStyledOptions())(props => {\n  const {\n    size\n  } = props;\n  return css`\n    animation: ${rotate} 2s linear infinite;\n    height: ${px(size)};\n    margin: auto;\n    transform-origin: center center;\n    width: ${px(size)};\n  `;\n});\nconst StyledLoaderRotateCircle = styled('circle', getStyledOptions())`\n  animation: ${dash} 1.5s infinite ease-in-out;\n  stroke: ${props => props.color};\n  stroke-dasharray: 1, 200;\n  stroke-dashoffset: 0;\n  stroke-linecap: round;\n`;\nexport default function LoaderRotate(props) {\n  const {\n    color,\n    shade,\n    size = 32,\n    variant\n  } = props;\n  const {\n    darkColor,\n    lightColor,\n    variants\n  } = getTheme(props);\n  const darkMode = isDarkMode(props);\n  let variantColor = darkMode ? lightColor : darkColor;\n\n  if (variant) {\n    variantColor = getColorVariant(variant, shade, variants).bg;\n  }\n\n  return _jsx(StyledLoaderRotate, {\n    \"data-component-name\": \"LoaderRotate\",\n    ...props,\n    children: _jsx(StyledLoaderRotateSVG, {\n      size: size,\n      viewBox: \"25 25 50 50\",\n      children: _jsx(StyledLoaderRotateCircle, {\n        color: color || variantColor,\n        cx: \"50\",\n        cy: \"50\",\n        fill: \"none\",\n        r: \"20\",\n        strokeWidth: 2\n      })\n    })\n  });\n}","map":{"version":3,"mappings":";AAAA,SAASA,GAAT,EAAcC,SAAd,QAA+B,gBAA/B;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAEA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,eAAT,EAA0BC,QAA1B,EAAoCC,EAApC,QAA8C,oBAA9C;AACA,SAASC,gBAAT,EAA2BC,UAA3B,QAA6C,mBAA7C;AAGA,MAAMC,IAAI,GAAGR,SAAS;;;;;;;;;;;;;;;CAAtB;AAiBA,MAAMS,kBAAkB,GAAGR,MAAM,CAC/B,KAD+B,EAE/BK,gBAAgB,EAFe,CAAN,CAGZI,KAAK,IAAG;EACrB,MAAM;IAAEC;EAAF,IAAYD,KAAlB;EACA,MAAM;IAAEE;EAAF,IAAcR,QAAQ,CAACM,KAAD,CAA5B;EAEA,OAAOX,GAAG;eACGY,KAAK,GAAG,MAAH,GAAY,aAAa;cAC/BA,KAAK,GAAGC,OAAO,CAACC,EAAX,GAAgB,CAAC;;GAFlC;AAKD,CAZ0B,CAA3B;AAcA,MAAMC,qBAAqB,GAAGb,MAAM,CAClC,KADkC,EAElCK,gBAAgB,EAFkB,CAAN,CAGVI,KAAK,IAAG;EAC1B,MAAM;IAAEK;EAAF,IAAWL,KAAjB;EAEA,OAAOX,GAAG;iBACKG,MAAM;cACTG,EAAE,CAACU,IAAD,CAAM;;;aAGTV,EAAE,CAACU,IAAD,CAAM;GALnB;AAOD,CAb6B,CAA9B;AAeA,MAAMC,wBAAwB,GAAGf,MAAM,CAAC,QAAD,EAAWK,gBAAgB,EAA3B,CAAiD;eACzEE,IAAI;YACPE,KAAK,IAAIA,KAAK,CAACO,KAAK;;;;CAFhC;AAQA,eAAc,SAAUC,YAAV,CAAuBR,KAAvB,EAAyC;EACrD,MAAM;IAAEO,KAAF;IAASE,KAAT;IAAgBJ,IAAI,GAAG,EAAvB;IAA2BK;EAA3B,IAAuCV,KAA7C;EACA,MAAM;IAAEW,SAAF;IAAaC,UAAb;IAAyBC;EAAzB,IAAsCnB,QAAQ,CAACM,KAAD,CAApD;EACA,MAAMc,QAAQ,GAAGjB,UAAU,CAACG,KAAD,CAA3B;EAEA,IAAIe,YAAY,GAAGD,QAAQ,GAAGF,UAAH,GAAgBD,SAA3C;;EAEA,IAAID,OAAJ,EAAa;IACXK,YAAY,GAAGtB,eAAe,CAACiB,OAAD,EAAUD,KAAV,EAAiBI,QAAjB,CAAf,CAA0CG,EAAzD;EACD;;EAED,OACEC,KAAClB,kBAAD,EAAmB;IAAA,uBAAqB,cAArB;IAAmC,GAAKC,KAAxC;IAA6CkB,UAC9DD,KAACb,qBAAD,EAAsB;MAACC,IAAI,EAAEA,IAAP;MAAac,OAAO,EAAC,aAArB;MAAkCD,UACtDD,KAACX,wBAAD,EAAyB;QACvBC,KAAK,EAAEA,KAAK,IAAIQ,YADO;QAEvBK,EAAE,EAAC,IAFoB;QAGvBC,EAAE,EAAC,IAHoB;QAIvBC,IAAI,EAAC,MAJkB;QAKvBC,CAAC,EAAC,IALqB;QAMvBC,WAAW,EAAE;MANU,CAAzB;IADoB,CAAtB;EADiB,CAAnB,CADF;AAcD","names":["css","keyframes","styled","rotate","getColorVariant","getTheme","px","getStyledOptions","isDarkMode","dash","StyledLoaderRotate","props","block","spacing","lg","StyledLoaderRotateSVG","size","StyledLoaderRotateCircle","color","LoaderRotate","shade","variant","darkColor","lightColor","variants","darkMode","variantColor","bg","_jsx","children","viewBox","cx","cy","fill","r","strokeWidth"],"sources":["/My_WORK/graduate_React/frontend/node_modules/@gilbarbara/components/src/Loader/Rotate.tsx"],"sourcesContent":["import { css, keyframes } from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport { rotate } from '../modules/animations';\nimport { getColorVariant, getTheme, px } from '../modules/helpers';\nimport { getStyledOptions, isDarkMode } from '../modules/system';\nimport { LoaderProps } from '../types';\n\nconst dash = keyframes`\n  0% {\n    stroke-dasharray: 1, 200;\n    stroke-dashoffset: 0;\n  }\n\n  50% {\n    stroke-dasharray: 89, 200;\n    stroke-dashoffset: -35px;\n  }\n\n  100% {\n    stroke-dasharray: 89, 200;\n    stroke-dashoffset: -124px;\n  }\n`;\n\nconst StyledLoaderRotate = styled(\n  'div',\n  getStyledOptions(),\n)<LoaderProps>(props => {\n  const { block } = props;\n  const { spacing } = getTheme(props);\n\n  return css`\n    display: ${block ? 'flex' : 'inline-flex'};\n    margin: ${block ? spacing.lg : 0} auto;\n    text-align: center;\n  `;\n});\n\nconst StyledLoaderRotateSVG = styled(\n  'svg',\n  getStyledOptions(),\n)<{ size: number }>(props => {\n  const { size } = props;\n\n  return css`\n    animation: ${rotate} 2s linear infinite;\n    height: ${px(size)};\n    margin: auto;\n    transform-origin: center center;\n    width: ${px(size)};\n  `;\n});\n\nconst StyledLoaderRotateCircle = styled('circle', getStyledOptions())<{ color: string }>`\n  animation: ${dash} 1.5s infinite ease-in-out;\n  stroke: ${props => props.color};\n  stroke-dasharray: 1, 200;\n  stroke-dashoffset: 0;\n  stroke-linecap: round;\n`;\n\nexport default function LoaderRotate(props: LoaderProps) {\n  const { color, shade, size = 32, variant } = props;\n  const { darkColor, lightColor, variants } = getTheme(props);\n  const darkMode = isDarkMode(props);\n\n  let variantColor = darkMode ? lightColor : darkColor;\n\n  if (variant) {\n    variantColor = getColorVariant(variant, shade, variants).bg;\n  }\n\n  return (\n    <StyledLoaderRotate data-component-name=\"LoaderRotate\" {...props}>\n      <StyledLoaderRotateSVG size={size} viewBox=\"25 25 50 50\">\n        <StyledLoaderRotateCircle\n          color={color || variantColor}\n          cx=\"50\"\n          cy=\"50\"\n          fill=\"none\"\n          r=\"20\"\n          strokeWidth={2}\n        />\n      </StyledLoaderRotateSVG>\n    </StyledLoaderRotate>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}