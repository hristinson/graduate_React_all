{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport { css } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport is from 'is-lite';\nimport { getTheme } from './modules/helpers';\nimport { baseStyles, getStyledOptions } from './modules/system';\nimport { Text } from './Text';\nexport const StyledLabel = styled('label', getStyledOptions())(props => {\n  const {\n    inline\n  } = props;\n  const {\n    spacing,\n    typography\n  } = getTheme(props);\n  return css`\n    ${baseStyles(props)};\n    align-items: center;\n    cursor: pointer;\n    display: ${inline ? 'inline-flex' : 'flex'};\n    font-family: inherit;\n    font-size: ${typography.regular.fontSize};\n    font-weight: 700;\n    line-height: 1;\n    ${!inline ? `margin-bottom: ${spacing.sm}` : ''};\n    position: relative;\n    white-space: nowrap;\n\n    [data-component-name='Text'] {\n      line-height: 1;\n      margin-left: ${spacing.xxs};\n    }\n  `;\n});\nexport const Label = forwardRef((props, ref) => {\n  const {\n    children,\n    labelId,\n    labelInfo\n  } = props;\n  let info;\n\n  if (labelInfo) {\n    info = is.string(labelInfo) ? _jsx(Text, {\n      size: \"mid\",\n      variant: \"gray\",\n      children: labelInfo\n    }) : labelInfo;\n  }\n\n  return _jsxs(StyledLabel, {\n    ref: ref,\n    \"data-component-name\": \"Label\",\n    ...props,\n    htmlFor: labelId,\n    children: [children, info]\n  });\n});\nLabel.defaultProps = {\n  inline: false\n};","map":{"version":3,"mappings":";AAAA,SAASA,UAAT,QAAsC,OAAtC;AACA,SAASC,GAAT,QAAoB,gBAApB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,EAAP,MAAe,SAAf;AAEA,SAASC,QAAT,QAAyB,mBAAzB;AACA,SAASC,UAAT,EAAqBC,gBAArB,QAA6C,kBAA7C;AACA,SAASC,IAAT,QAAqB,QAArB;AAWA,OAAO,MAAMC,WAAW,GAAGN,MAAM,CAC/B,OAD+B,EAE/BI,gBAAgB,EAFe,CAAN,CAGbG,KAAK,IAAG;EACpB,MAAM;IAAEC;EAAF,IAAaD,KAAnB;EACA,MAAM;IAAEE,OAAF;IAAWC;EAAX,IAA0BR,QAAQ,CAACK,KAAD,CAAxC;EAEA,OAAOR,GAAG;MACNI,UAAU,CAACI,KAAD,CAAO;;;eAGRC,MAAM,GAAG,aAAH,GAAmB,MAAM;;iBAE7BE,UAAU,CAACC,OAAX,CAAmBC,QAAQ;;;MAGtC,CAACJ,MAAD,GAAU,kBAAkBC,OAAO,CAACI,EAAE,EAAtC,GAA2C,EAAE;;;;;;qBAM9BJ,OAAO,CAACK,GAAG;;GAf9B;AAkBD,CAzB0B,CAApB;AA2BP,OAAO,MAAMC,KAAK,GAAGjB,UAAU,CAA+B,CAACS,KAAD,EAAQS,GAAR,KAAe;EAC3E,MAAM;IAAEC,QAAF;IAAYC,OAAZ;IAAqBC;EAArB,IAAmCZ,KAAzC;EAEA,IAAIa,IAAJ;;EAEA,IAAID,SAAJ,EAAe;IACbC,IAAI,GAAGnB,EAAE,CAACoB,MAAH,CAAUF,SAAV,IACLG,KAACjB,IAAD,EAAK;MAACkB,IAAI,EAAC,KAAN;MAAYC,OAAO,EAAC,MAApB;MAA0BP,UAC5BE;IADE,CAAL,CADK,GAKLA,SALF;EAOD;;EAED,OACEM,MAACnB,WAAD,EAAY;IAACU,GAAG,EAAEA,GAAN;IAAS,uBAAsB,OAA/B;IAAsC,GAAKT,KAA3C;IAAkDmB,OAAO,EAAER,OAA3D;IAAkED,WAC3EA,QAD2E,EAE3EG,IAF2E;EAAlE,CAAZ,CADF;AAMD,CArB8B,CAAxB;AAuBPL,KAAK,CAACY,YAAN,GAAqB;EACnBnB,MAAM,EAAE;AADW,CAArB","names":["forwardRef","css","styled","is","getTheme","baseStyles","getStyledOptions","Text","StyledLabel","props","inline","spacing","typography","regular","fontSize","sm","xxs","Label","ref","children","labelId","labelInfo","info","string","_jsx","size","variant","_jsxs","htmlFor","defaultProps"],"sources":["/My_WORK/graduate_React/frontend/node_modules/@gilbarbara/components/src/Label.tsx"],"sourcesContent":["import { forwardRef, ReactNode } from 'react';\nimport { css } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport is from 'is-lite';\n\nimport { getTheme } from './modules/helpers';\nimport { baseStyles, getStyledOptions } from './modules/system';\nimport { Text } from './Text';\nimport { ComponentProps, StyledProps, WithChildren, WithInline } from './types';\n\nexport interface LabelKnownProps extends StyledProps, WithChildren, WithInline {\n  /** For the htmlFor attribute */\n  labelId?: string;\n  labelInfo?: ReactNode;\n}\n\nexport type LabelProps = ComponentProps<HTMLLabelElement, LabelKnownProps>;\n\nexport const StyledLabel = styled(\n  'label',\n  getStyledOptions(),\n)<LabelProps>(props => {\n  const { inline } = props;\n  const { spacing, typography } = getTheme(props);\n\n  return css`\n    ${baseStyles(props)};\n    align-items: center;\n    cursor: pointer;\n    display: ${inline ? 'inline-flex' : 'flex'};\n    font-family: inherit;\n    font-size: ${typography.regular.fontSize};\n    font-weight: 700;\n    line-height: 1;\n    ${!inline ? `margin-bottom: ${spacing.sm}` : ''};\n    position: relative;\n    white-space: nowrap;\n\n    [data-component-name='Text'] {\n      line-height: 1;\n      margin-left: ${spacing.xxs};\n    }\n  `;\n});\n\nexport const Label = forwardRef<HTMLLabelElement, LabelProps>((props, ref) => {\n  const { children, labelId, labelInfo } = props;\n\n  let info;\n\n  if (labelInfo) {\n    info = is.string(labelInfo) ? (\n      <Text size=\"mid\" variant=\"gray\">\n        {labelInfo}\n      </Text>\n    ) : (\n      labelInfo\n    );\n  }\n\n  return (\n    <StyledLabel ref={ref} data-component-name=\"Label\" {...props} htmlFor={labelId}>\n      {children}\n      {info}\n    </StyledLabel>\n  );\n});\n\nLabel.defaultProps = {\n  inline: false,\n};\n"]},"metadata":{},"sourceType":"module"}