{"ast":null,"code":"// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isOfType(type) {\n  return function (value) {\n    return typeof value === type;\n  };\n} // eslint-disable-next-line @typescript-eslint/ban-types\n\n\nexport var isFunction = isOfType('function');\nexport var isNull = function (value) {\n  return value === null;\n};\nexport var isRegex = function (value) {\n  return Object.prototype.toString.call(value).slice(8, -1) === 'RegExp';\n};\nexport var isObject = function (value) {\n  return !isUndefined(value) && !isNull(value) && (isFunction(value) || typeof value === 'object');\n};\nexport var isUndefined = isOfType('undefined');","map":{"version":3,"mappings":"AAEA;AACA,SAASA,QAAT,CAAkDC,IAAlD,EAA8D;EAC5D,OAAO,UAACC,KAAD,EAAe;IAAiB,cAAOA,KAAP,KAAiBD,IAAjB;EAAqB,CAA5D;AACD,C,CAED;;;AACA,OAAO,IAAME,UAAU,GAAGH,QAAQ,CAAW,UAAX,CAA3B;AAEP,OAAO,IAAMI,MAAM,GAAG,UAACF,KAAD,EAAe;EACnC,OAAOA,KAAK,KAAK,IAAjB;AACD,CAFM;AAIP,OAAO,IAAMG,OAAO,GAAG,UAACH,KAAD,EAAe;EACpC,OAAOI,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BP,KAA/B,EAAsCQ,KAAtC,CAA4C,CAA5C,EAA+C,CAAC,CAAhD,MAAuD,QAA9D;AACD,CAFM;AAIP,OAAO,IAAMC,QAAQ,GAAG,UAACT,KAAD,EAAe;EACrC,OAAO,CAACU,WAAW,CAACV,KAAD,CAAZ,IAAuB,CAACE,MAAM,CAACF,KAAD,CAA9B,KAA0CC,UAAU,CAACD,KAAD,CAAV,IAAqB,OAAOA,KAAP,KAAiB,QAAhF,CAAP;AACD,CAFM;AAIP,OAAO,IAAMU,WAAW,GAAGZ,QAAQ,CAAY,WAAZ,CAA5B","names":["isOfType","type","value","isFunction","isNull","isRegex","Object","prototype","toString","call","slice","isObject","isUndefined"],"sources":["/My_WORK/graduate_React/frontend/node_modules/@gilbarbara/deep-equal/src/helpers.ts"],"sourcesContent":["import { AnyObject, Primitive } from './types';\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isOfType<T extends Primitive | Function>(type: string) {\n  return (value: unknown): value is T => typeof value === type;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport const isFunction = isOfType<Function>('function');\n\nexport const isNull = (value: unknown): value is null => {\n  return value === null;\n};\n\nexport const isRegex = (value: unknown): value is RegExp => {\n  return Object.prototype.toString.call(value).slice(8, -1) === 'RegExp';\n};\n\nexport const isObject = (value: unknown): value is AnyObject => {\n  return !isUndefined(value) && !isNull(value) && (isFunction(value) || typeof value === 'object');\n};\n\nexport const isUndefined = isOfType<undefined>('undefined');\n"]},"metadata":{},"sourceType":"module"}