{"ast":null,"code":"import { invariant, isString, messages } from './modules/utils';\nimport parseCSS from './parse-css';\nimport rotate from './rotate';\n/**\n * Get the scheme for a color.\n */\n\nexport default function scheme(input) {\n  let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'complementary';\n  invariant(isString(input), messages.inputString);\n  const hex = parseCSS(input);\n  const output = [];\n\n  switch (type) {\n    case 'analogous':\n      {\n        output.push(rotate(hex, -30), hex, rotate(hex, 30));\n        break;\n      }\n\n    case 'complementary':\n      {\n        output.push(hex, rotate(hex, 180));\n        break;\n      }\n\n    case 'split':\n    case 'split-complementary':\n      {\n        output.push(hex, rotate(hex, 150), rotate(hex, 210));\n        break;\n      }\n\n    case 'triadic':\n      {\n        output.push(hex, rotate(hex, 120), rotate(hex, 240));\n        break;\n      }\n\n    case 'tetradic':\n    case 'rectangle':\n      {\n        output.push(hex, rotate(hex, 60), rotate(hex, 180), rotate(hex, 240));\n        break;\n      }\n\n    case 'square':\n      {\n        output.push(hex, rotate(hex, 90), rotate(hex, 180), rotate(hex, 270));\n        break;\n      }\n\n    default:\n      {\n        throw new TypeError('invalid type');\n      }\n  }\n\n  return output;\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,QAA9B,QAA8C,iBAA9C;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAGA;;;;AAGA,eAAc,SAAUC,MAAV,CAAiBC,KAAjB,EAA8D;EAAA,IAA9BC,IAA8B,uEAAf,eAAe;EAC1EP,SAAS,CAACC,QAAQ,CAACK,KAAD,CAAT,EAAkBJ,QAAQ,CAACM,WAA3B,CAAT;EAEA,MAAMC,GAAG,GAAGN,QAAQ,CAACG,KAAD,CAApB;EACA,MAAMI,MAAM,GAAa,EAAzB;;EAEA,QAAQH,IAAR;IACE,KAAK,WAAL;MAAkB;QAChBG,MAAM,CAACC,IAAP,CAAYP,MAAM,CAACK,GAAD,EAAM,CAAC,EAAP,CAAlB,EAA8BA,GAA9B,EAAmCL,MAAM,CAACK,GAAD,EAAM,EAAN,CAAzC;QACA;MACD;;IACD,KAAK,eAAL;MAAsB;QACpBC,MAAM,CAACC,IAAP,CAAYF,GAAZ,EAAiBL,MAAM,CAACK,GAAD,EAAM,GAAN,CAAvB;QACA;MACD;;IAED,KAAK,OAAL;IACA,KAAK,qBAAL;MAA4B;QAC1BC,MAAM,CAACC,IAAP,CAAYF,GAAZ,EAAiBL,MAAM,CAACK,GAAD,EAAM,GAAN,CAAvB,EAAmCL,MAAM,CAACK,GAAD,EAAM,GAAN,CAAzC;QACA;MACD;;IACD,KAAK,SAAL;MAAgB;QACdC,MAAM,CAACC,IAAP,CAAYF,GAAZ,EAAiBL,MAAM,CAACK,GAAD,EAAM,GAAN,CAAvB,EAAmCL,MAAM,CAACK,GAAD,EAAM,GAAN,CAAzC;QACA;MACD;;IAED,KAAK,UAAL;IACA,KAAK,WAAL;MAAkB;QAChBC,MAAM,CAACC,IAAP,CAAYF,GAAZ,EAAiBL,MAAM,CAACK,GAAD,EAAM,EAAN,CAAvB,EAAkCL,MAAM,CAACK,GAAD,EAAM,GAAN,CAAxC,EAAoDL,MAAM,CAACK,GAAD,EAAM,GAAN,CAA1D;QACA;MACD;;IACD,KAAK,QAAL;MAAe;QACbC,MAAM,CAACC,IAAP,CAAYF,GAAZ,EAAiBL,MAAM,CAACK,GAAD,EAAM,EAAN,CAAvB,EAAkCL,MAAM,CAACK,GAAD,EAAM,GAAN,CAAxC,EAAoDL,MAAM,CAACK,GAAD,EAAM,GAAN,CAA1D;QACA;MACD;;IACD;MAAS;QACP,MAAM,IAAIG,SAAJ,CAAc,cAAd,CAAN;MACD;EA/BH;;EAkCA,OAAOF,MAAP;AACD","names":["invariant","isString","messages","parseCSS","rotate","scheme","input","type","inputString","hex","output","push","TypeError"],"sources":["/My_WORK/graduate_React/frontend/node_modules/colorizr/src/scheme.ts"],"sourcesContent":["import { invariant, isString, messages } from './modules/utils';\nimport parseCSS from './parse-css';\nimport rotate from './rotate';\nimport { Scheme } from './types';\n\n/**\n * Get the scheme for a color.\n */\nexport default function scheme(input: string, type: Scheme = 'complementary'): string[] {\n  invariant(isString(input), messages.inputString);\n\n  const hex = parseCSS(input);\n  const output: string[] = [];\n\n  switch (type) {\n    case 'analogous': {\n      output.push(rotate(hex, -30), hex, rotate(hex, 30));\n      break;\n    }\n    case 'complementary': {\n      output.push(hex, rotate(hex, 180));\n      break;\n    }\n\n    case 'split':\n    case 'split-complementary': {\n      output.push(hex, rotate(hex, 150), rotate(hex, 210));\n      break;\n    }\n    case 'triadic': {\n      output.push(hex, rotate(hex, 120), rotate(hex, 240));\n      break;\n    }\n\n    case 'tetradic':\n    case 'rectangle': {\n      output.push(hex, rotate(hex, 60), rotate(hex, 180), rotate(hex, 240));\n      break;\n    }\n    case 'square': {\n      output.push(hex, rotate(hex, 90), rotate(hex, 180), rotate(hex, 270));\n      break;\n    }\n    default: {\n      throw new TypeError('invalid type');\n    }\n  }\n\n  return output;\n}\n"]},"metadata":{},"sourceType":"module"}