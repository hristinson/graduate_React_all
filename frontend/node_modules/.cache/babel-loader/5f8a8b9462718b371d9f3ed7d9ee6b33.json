{"ast":null,"code":"export default function copyTextToClipboard(input) {\n  let {\n    target = document.body\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const element = document.createElement('textarea');\n  const previouslyFocusedElement = document.activeElement;\n  element.value = input; // Prevent keyboard from showing on mobile\n\n  element.setAttribute('readonly', '');\n  element.style.contain = 'strict';\n  element.style.position = 'absolute';\n  element.style.left = '-9999px';\n  element.style.fontSize = '12pt'; // Prevent zooming on iOS\n\n  const selection = document.getSelection();\n\n  if (!selection) {\n    return false;\n  }\n\n  const originalRange = selection.rangeCount > 0 && selection.getRangeAt(0);\n  target.append(element);\n  element.select(); // Explicit selection workaround for iOS\n\n  element.selectionStart = 0;\n  element.selectionEnd = input.length;\n  let isSuccess = false;\n\n  try {\n    isSuccess = document.execCommand('copy');\n  } catch {// noop\n  }\n\n  element.remove();\n\n  if (originalRange) {\n    selection.removeAllRanges();\n    selection.addRange(originalRange);\n  } // Get the focus back on the previously focused element, if any\n\n\n  if (previouslyFocusedElement) {\n    previouslyFocusedElement.focus();\n  }\n\n  return isSuccess;\n}","map":{"version":3,"mappings":"AAQA,eAAc,SAAUA,mBAAV,CACZC,KADY,EAE4B;EAAA,IAAxC;IAAEC,MAAM,GAAGC,QAAQ,CAACC;EAApB,CAAwC,uEAAF,EAAE;EAExC,MAAMC,OAAO,GAAGF,QAAQ,CAACG,aAAT,CAAuB,UAAvB,CAAhB;EACA,MAAMC,wBAAwB,GAAGJ,QAAQ,CAACK,aAA1C;EAEAH,OAAO,CAACI,KAAR,GAAgBR,KAAhB,CALwC,CAOxC;;EACAI,OAAO,CAACK,YAAR,CAAqB,UAArB,EAAiC,EAAjC;EAEAL,OAAO,CAACM,KAAR,CAAcC,OAAd,GAAwB,QAAxB;EACAP,OAAO,CAACM,KAAR,CAAcE,QAAd,GAAyB,UAAzB;EACAR,OAAO,CAACM,KAAR,CAAcG,IAAd,GAAqB,SAArB;EACAT,OAAO,CAACM,KAAR,CAAcI,QAAd,GAAyB,MAAzB,CAbwC,CAaP;;EAEjC,MAAMC,SAAS,GAAGb,QAAQ,CAACc,YAAT,EAAlB;;EAEA,IAAI,CAACD,SAAL,EAAgB;IACd,OAAO,KAAP;EACD;;EAED,MAAME,aAAa,GAAGF,SAAS,CAACG,UAAV,GAAuB,CAAvB,IAA4BH,SAAS,CAACI,UAAV,CAAqB,CAArB,CAAlD;EAEAlB,MAAM,CAACmB,MAAP,CAAchB,OAAd;EACAA,OAAO,CAACiB,MAAR,GAxBwC,CA0BxC;;EACAjB,OAAO,CAACkB,cAAR,GAAyB,CAAzB;EACAlB,OAAO,CAACmB,YAAR,GAAuBvB,KAAK,CAACwB,MAA7B;EAEA,IAAIC,SAAS,GAAG,KAAhB;;EAEA,IAAI;IACFA,SAAS,GAAGvB,QAAQ,CAACwB,WAAT,CAAqB,MAArB,CAAZ;EACD,CAFD,CAEE,MAAM,CACN;EACD;;EAEDtB,OAAO,CAACuB,MAAR;;EAEA,IAAIV,aAAJ,EAAmB;IACjBF,SAAS,CAACa,eAAV;IACAb,SAAS,CAACc,QAAV,CAAmBZ,aAAnB;EACD,CA3CuC,CA6CxC;;;EACA,IAAIX,wBAAJ,EAA8B;IAC3BA,wBAAwC,CAACwB,KAAzC;EACF;;EAED,OAAOL,SAAP;AACD","names":["copyTextToClipboard","input","target","document","body","element","createElement","previouslyFocusedElement","activeElement","value","setAttribute","style","contain","position","left","fontSize","selection","getSelection","originalRange","rangeCount","getRangeAt","append","select","selectionStart","selectionEnd","length","isSuccess","execCommand","remove","removeAllRanges","addRange","focus"],"sources":["/My_WORK/graduate_React/frontend/node_modules/@gilbarbara/components/src/modules/copy-text-to-clipboard.ts"],"sourcesContent":["interface Options {\n  /**\n   Specify a DOM element where the temporary, behind-the-scenes `textarea` should be appended, in cases where you need to stay within a focus trap, like in a modal.\n   @default document.body\n   */\n  target?: HTMLElement;\n}\n\nexport default function copyTextToClipboard(\n  input: string,\n  { target = document.body }: Options = {},\n) {\n  const element = document.createElement('textarea');\n  const previouslyFocusedElement = document.activeElement;\n\n  element.value = input;\n\n  // Prevent keyboard from showing on mobile\n  element.setAttribute('readonly', '');\n\n  element.style.contain = 'strict';\n  element.style.position = 'absolute';\n  element.style.left = '-9999px';\n  element.style.fontSize = '12pt'; // Prevent zooming on iOS\n\n  const selection = document.getSelection();\n\n  if (!selection) {\n    return false;\n  }\n\n  const originalRange = selection.rangeCount > 0 && selection.getRangeAt(0);\n\n  target.append(element);\n  element.select();\n\n  // Explicit selection workaround for iOS\n  element.selectionStart = 0;\n  element.selectionEnd = input.length;\n\n  let isSuccess = false;\n\n  try {\n    isSuccess = document.execCommand('copy');\n  } catch {\n    // noop\n  }\n\n  element.remove();\n\n  if (originalRange) {\n    selection.removeAllRanges();\n    selection.addRange(originalRange);\n  }\n\n  // Get the focus back on the previously focused element, if any\n  if (previouslyFocusedElement) {\n    (previouslyFocusedElement as HTMLElement).focus();\n  }\n\n  return isSuccess;\n}\n"]},"metadata":{},"sourceType":"module"}