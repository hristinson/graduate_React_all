{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { isValidElement, useEffect, useRef, useState } from 'react';\nimport innerText from 'react-innertext';\nimport { css, useTheme } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport is from 'is-lite';\nimport { fadeIn } from './modules/animations';\nimport { getColorVariant, getTheme, px } from './modules/helpers';\nimport { baseStyles, getStyledOptions } from './modules/system';\nimport { Text } from './Text';\nconst arrowDistance = -3;\nconst arrowSize = 10;\nconst arrowSpacing = arrowSize + 2;\nconst StyledTooltip = styled('span', getStyledOptions())`\n  ${baseStyles};\n  display: inline-flex;\n  line-height: 1;\n  position: relative;\n`;\nconst StyledArrow = styled.span(props => {\n  const {\n    align,\n    bg,\n    position\n  } = props;\n  const styles = {};\n  const distance = '10px';\n  const offset = '-7px';\n  let arrowTranslate = '';\n\n  switch (position) {\n    case 'bottom':\n      {\n        styles.top = offset;\n        arrowTranslate = 'translate(-2px, 2px)';\n        break;\n      }\n\n    case 'left':\n      {\n        styles.right = offset;\n        arrowTranslate = 'translate(-2px, -2px)';\n        break;\n      }\n\n    case 'right':\n      {\n        styles.left = offset;\n        arrowTranslate = 'translate(2px, 2px)';\n        break;\n      }\n\n    case 'top':\n      {\n        styles.bottom = offset;\n        arrowTranslate = 'translate(2px, -2px)';\n        break;\n      }\n    // No default\n  }\n\n  if (['bottom', 'top'].includes(position)) {\n    if (align === 'start') {\n      styles.left = distance;\n    } else if (align === 'middle') {\n      styles.left = '50%';\n      styles.transform = 'translateX(-50%)';\n    } else {\n      styles.right = distance;\n    }\n  } else if (['left', 'right'].includes(position)) {\n    if (align === 'start') {\n      styles.top = distance;\n    } else if (align === 'middle') {\n      styles.top = '50%';\n      styles.transform = 'translateY(-50%)';\n    } else {\n      styles.bottom = distance;\n    }\n  }\n\n  return css`\n    display: block;\n    height: ${px(arrowSize)};\n    position: absolute;\n    width: ${px(arrowSize)};\n    z-index: 5;\n    ${styles};\n\n    &:before {\n      background-color: ${bg};\n      border-radius: 1px;\n      content: '';\n      display: block;\n      height: ${px(arrowSize)};\n      position: absolute;\n      transform: rotate(-45deg) ${arrowTranslate};\n      width: ${px(arrowSize)};\n    }\n  `;\n});\nconst StyledBody = styled('span', getStyledOptions())(props => {\n  const {\n    align,\n    bg,\n    color,\n    position,\n    size,\n    wrap\n  } = props;\n  const {\n    radius,\n    spacing\n  } = getTheme(props);\n  const styles = {};\n\n  if (align === 'start') {\n    if (['left', 'right'].includes(position)) {\n      styles.top = px(arrowDistance);\n    } else {\n      styles.left = px(arrowDistance);\n    }\n  } else if (align === 'middle') {\n    if (['left', 'right'].includes(position)) {\n      styles.top = '50%';\n      styles.transform = 'translateY(-50%)';\n    } else {\n      styles.left = '50%';\n      styles.transform = 'translateX(-50%)';\n    }\n  } else if (['left', 'right'].includes(position)) {\n    styles.bottom = px(arrowDistance);\n  } else {\n    styles.right = px(arrowDistance);\n  }\n\n  switch (position) {\n    case 'bottom':\n      {\n        styles.marginTop = arrowSpacing;\n        styles.top = '100%';\n        break;\n      }\n\n    case 'left':\n      {\n        styles.right = '100%';\n        styles.marginRight = arrowSpacing;\n        break;\n      }\n\n    case 'right':\n      {\n        styles.left = '100%';\n        styles.marginLeft = arrowSpacing;\n        break;\n      }\n\n    case 'top':\n      {\n        styles.bottom = '100%';\n        styles.marginBottom = arrowSpacing;\n        break;\n      }\n  }\n\n  switch (size) {\n    case 'small':\n    case 'mid':\n      {\n        styles.padding = `${spacing.xxs} ${spacing.xs}`;\n        break;\n      }\n\n    default:\n      {\n        styles.padding = `${spacing.xs} ${spacing.sm}`;\n        break;\n      }\n  }\n\n  let width;\n\n  switch (wrap) {\n    case 'sm':\n      {\n        width = '100px';\n        break;\n      }\n\n    case 'md':\n      {\n        width = '200px';\n        break;\n      }\n\n    case 'lg':\n      {\n        width = '320px';\n        break;\n      }\n  }\n\n  return css`\n    animation: ${fadeIn} 0.2s forwards;\n    background-color: ${bg};\n    border-radius: ${radius.xxs};\n    color: ${color};\n    position: absolute;\n    text-align: center;\n    white-space: ${wrap ? 'initial' : 'nowrap'};\n    width: ${width};\n    ${styles};\n  `;\n});\nconst StyledContent = styled(Text)`\n  position: relative;\n  z-index: 10;\n`;\n\nfunction TooltipBody(props) {\n  const {\n    align = 'middle',\n    bg,\n    bold,\n    color,\n    content,\n    position = 'right',\n    size = 'mid',\n    style,\n    wrap\n  } = props;\n  return _jsxs(StyledBody, {\n    align: align,\n    bg: bg,\n    color: color,\n    \"data-component-name\": \"TooltipBody\",\n    position: position,\n    size: size,\n    style: style,\n    wrap: wrap,\n    children: [isValidElement(content) ? content : _jsx(StyledContent, {\n      bold: bold,\n      \"data-component-name\": \"TooltipContent\",\n      size: size,\n      children: content\n    }), _jsx(StyledArrow, {\n      align: align,\n      bg: bg,\n      color: color,\n      \"data-component-name\": \"TooltipArrow\",\n      position: position\n    })]\n  });\n}\n\nexport function Tooltip(props) {\n  const {\n    children,\n    content,\n    open,\n    shade,\n    variant = 'gray'\n  } = props;\n  const isActive = useRef(false);\n  const [isOpen, setOpen] = useState(open || false);\n  const {\n    variants\n  } = getTheme({\n    theme: useTheme()\n  });\n  const text = innerText(content);\n  const {\n    bg,\n    color\n  } = getColorVariant(variant, shade, variants);\n  useEffect(() => {\n    isActive.current = true;\n    return () => {\n      isActive.current = false;\n    };\n  }, []);\n\n  const handleMouseEnter = () => {\n    if (!is.boolean(open)) {\n      setOpen(true);\n    }\n  };\n\n  const handleMouseLeave = () => {\n    if (!is.boolean(open)) {\n      setOpen(false);\n    }\n  };\n\n  return _jsxs(StyledTooltip, {\n    \"aria-label\": text,\n    \"data-component-name\": \"Tooltip\",\n    onMouseEnter: handleMouseEnter,\n    onMouseLeave: handleMouseLeave,\n    role: \"tooltip\",\n    children: [children, isOpen && _jsx(TooltipBody, { ...props,\n      bg: bg,\n      color: color\n    })]\n  });\n}\nTooltip.defaultProps = {\n  align: 'middle',\n  bold: false,\n  position: 'bottom',\n  shade: 'dark',\n  size: 'mid',\n  variant: 'gray'\n};","map":{"version":3,"mappings":"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","names":["isValidElement","useEffect","useRef","useState","innerText","css","useTheme","styled","is","fadeIn","getColorVariant","getTheme","px","baseStyles","getStyledOptions","Text","arrowDistance","arrowSize","arrowSpacing","StyledTooltip","StyledArrow","span","props","align","bg","position","styles","distance","offset","arrowTranslate","top","right","left","bottom","includes","transform","StyledBody","color","size","wrap","radius","spacing","marginTop","marginRight","marginLeft","marginBottom","padding","xxs","xs","sm","width","StyledContent","TooltipBody","bold","content","style","_jsxs","children","_jsx","Tooltip","open","shade","variant","isActive","isOpen","setOpen","variants","theme","text","current","handleMouseEnter","boolean","handleMouseLeave","onMouseEnter","onMouseLeave","role","defaultProps"],"sources":["/My_WORK/graduate_React/frontend/node_modules/@gilbarbara/components/src/Tooltip.tsx"],"sourcesContent":["import { CSSProperties, isValidElement, ReactNode, useEffect, useRef, useState } from 'react';\nimport innerText from 'react-innertext';\nimport { css, useTheme } from '@emotion/react';\nimport styled, { CSSObject } from '@emotion/styled';\nimport is from 'is-lite';\n\nimport { fadeIn } from './modules/animations';\nimport { getColorVariant, getTheme, px } from './modules/helpers';\nimport { baseStyles, getStyledOptions } from './modules/system';\nimport { Text } from './Text';\nimport { Sizes, WithChildren, WithColor, WithOpen, WithTextOptions, WithTextSize } from './types';\n\ninterface SharedProps {\n  /** @default middle */\n  align: 'start' | 'middle' | 'end';\n  /** @default bottom */\n  position: 'bottom' | 'left' | 'right' | 'top';\n  /** Content wrapping */\n  wrap?: Sizes;\n}\n\ninterface ColorProps {\n  bg: string;\n  color: string;\n}\n\nexport interface TooltipProps\n  extends Partial<SharedProps>,\n    WithChildren,\n    WithColor,\n    WithOpen,\n    WithTextOptions {\n  content: ReactNode;\n  style?: CSSProperties;\n}\n\nconst arrowDistance = -3;\nconst arrowSize = 10;\nconst arrowSpacing = arrowSize + 2;\n\nconst StyledTooltip = styled('span', getStyledOptions())`\n  ${baseStyles};\n  display: inline-flex;\n  line-height: 1;\n  position: relative;\n`;\n\nconst StyledArrow = styled.span<SharedProps & ColorProps>(props => {\n  const { align, bg, position } = props;\n\n  const styles: CSSObject = {};\n  const distance = '10px';\n  const offset = '-7px';\n  let arrowTranslate = '';\n\n  switch (position) {\n    case 'bottom': {\n      styles.top = offset;\n      arrowTranslate = 'translate(-2px, 2px)';\n\n      break;\n    }\n    case 'left': {\n      styles.right = offset;\n      arrowTranslate = 'translate(-2px, -2px)';\n\n      break;\n    }\n    case 'right': {\n      styles.left = offset;\n      arrowTranslate = 'translate(2px, 2px)';\n\n      break;\n    }\n    case 'top': {\n      styles.bottom = offset;\n      arrowTranslate = 'translate(2px, -2px)';\n\n      break;\n    }\n    // No default\n  }\n\n  if (['bottom', 'top'].includes(position)) {\n    if (align === 'start') {\n      styles.left = distance;\n    } else if (align === 'middle') {\n      styles.left = '50%';\n      styles.transform = 'translateX(-50%)';\n    } else {\n      styles.right = distance;\n    }\n  } else if (['left', 'right'].includes(position)) {\n    if (align === 'start') {\n      styles.top = distance;\n    } else if (align === 'middle') {\n      styles.top = '50%';\n      styles.transform = 'translateY(-50%)';\n    } else {\n      styles.bottom = distance;\n    }\n  }\n\n  return css`\n    display: block;\n    height: ${px(arrowSize)};\n    position: absolute;\n    width: ${px(arrowSize)};\n    z-index: 5;\n    ${styles};\n\n    &:before {\n      background-color: ${bg};\n      border-radius: 1px;\n      content: '';\n      display: block;\n      height: ${px(arrowSize)};\n      position: absolute;\n      transform: rotate(-45deg) ${arrowTranslate};\n      width: ${px(arrowSize)};\n    }\n  `;\n});\n\nconst StyledBody = styled(\n  'span',\n  getStyledOptions(),\n)<SharedProps & ColorProps & WithTextSize>(props => {\n  const { align, bg, color, position, size, wrap } = props;\n  const { radius, spacing } = getTheme(props);\n\n  const styles: CSSObject = {};\n\n  if (align === 'start') {\n    if (['left', 'right'].includes(position)) {\n      styles.top = px(arrowDistance);\n    } else {\n      styles.left = px(arrowDistance);\n    }\n  } else if (align === 'middle') {\n    if (['left', 'right'].includes(position)) {\n      styles.top = '50%';\n      styles.transform = 'translateY(-50%)';\n    } else {\n      styles.left = '50%';\n      styles.transform = 'translateX(-50%)';\n    }\n  } else if (['left', 'right'].includes(position)) {\n    styles.bottom = px(arrowDistance);\n  } else {\n    styles.right = px(arrowDistance);\n  }\n\n  switch (position) {\n    case 'bottom': {\n      styles.marginTop = arrowSpacing;\n      styles.top = '100%';\n\n      break;\n    }\n    case 'left': {\n      styles.right = '100%';\n      styles.marginRight = arrowSpacing;\n\n      break;\n    }\n    case 'right': {\n      styles.left = '100%';\n      styles.marginLeft = arrowSpacing;\n\n      break;\n    }\n    case 'top': {\n      styles.bottom = '100%';\n      styles.marginBottom = arrowSpacing;\n\n      break;\n    }\n  }\n\n  switch (size) {\n    case 'small':\n    case 'mid': {\n      styles.padding = `${spacing.xxs} ${spacing.xs}`;\n      break;\n    }\n    default: {\n      styles.padding = `${spacing.xs} ${spacing.sm}`;\n      break;\n    }\n  }\n\n  let width;\n\n  switch (wrap) {\n    case 'sm': {\n      width = '100px';\n      break;\n    }\n    case 'md': {\n      width = '200px';\n      break;\n    }\n    case 'lg': {\n      width = '320px';\n      break;\n    }\n  }\n\n  return css`\n    animation: ${fadeIn} 0.2s forwards;\n    background-color: ${bg};\n    border-radius: ${radius.xxs};\n    color: ${color};\n    position: absolute;\n    text-align: center;\n    white-space: ${wrap ? 'initial' : 'nowrap'};\n    width: ${width};\n    ${styles};\n  `;\n});\n\nconst StyledContent = styled(Text)`\n  position: relative;\n  z-index: 10;\n`;\n\nfunction TooltipBody(props: Omit<TooltipProps, 'children' | 'open'> & ColorProps) {\n  const {\n    align = 'middle',\n    bg,\n    bold,\n    color,\n    content,\n    position = 'right',\n    size = 'mid',\n    style,\n    wrap,\n  } = props;\n\n  return (\n    <StyledBody\n      align={align}\n      bg={bg}\n      color={color}\n      data-component-name=\"TooltipBody\"\n      position={position}\n      size={size}\n      style={style}\n      wrap={wrap}\n    >\n      {isValidElement(content) ? (\n        content\n      ) : (\n        <StyledContent bold={bold} data-component-name=\"TooltipContent\" size={size}>\n          {content}\n        </StyledContent>\n      )}\n      <StyledArrow\n        align={align}\n        bg={bg}\n        color={color}\n        data-component-name=\"TooltipArrow\"\n        position={position}\n      />\n    </StyledBody>\n  );\n}\n\nexport function Tooltip(props: TooltipProps): JSX.Element {\n  const { children, content, open, shade, variant = 'gray' } = props;\n  const isActive = useRef(false);\n  const [isOpen, setOpen] = useState(open || false);\n\n  const { variants } = getTheme({ theme: useTheme() });\n\n  const text = innerText(content);\n\n  const { bg, color } = getColorVariant(variant, shade, variants);\n\n  useEffect(() => {\n    isActive.current = true;\n\n    return () => {\n      isActive.current = false;\n    };\n  }, []);\n\n  const handleMouseEnter = () => {\n    if (!is.boolean(open)) {\n      setOpen(true);\n    }\n  };\n\n  const handleMouseLeave = () => {\n    if (!is.boolean(open)) {\n      setOpen(false);\n    }\n  };\n\n  return (\n    <StyledTooltip\n      aria-label={text}\n      data-component-name=\"Tooltip\"\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      role=\"tooltip\"\n    >\n      {children}\n      {isOpen && <TooltipBody {...props} bg={bg} color={color} />}\n    </StyledTooltip>\n  );\n}\n\nTooltip.defaultProps = {\n  align: 'middle',\n  bold: false,\n  position: 'bottom',\n  shade: 'dark',\n  size: 'mid',\n  variant: 'gray',\n};\n"]},"metadata":{},"sourceType":"module"}