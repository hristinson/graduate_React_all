{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport { css, useTheme } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport { Icon } from './Icon';\nimport { getTheme } from './modules/helpers';\nimport { baseStyles, borderStyles, getStyledOptions, isDarkMode, marginStyles, paddingStyles, radiusStyles } from './modules/system';\nimport { Text } from './Text';\n\nfunction getOptions(type, colors, darkMode) {\n  const options = {\n    success: {\n      color: colors.green,\n      icon: 'check-o'\n    },\n    warning: {\n      color: darkMode ? colors.orange : colors.yellow,\n      icon: 'danger'\n    },\n    error: {\n      color: colors.red,\n      icon: 'close-o'\n    },\n    info: {\n      color: colors.blue,\n      icon: 'info'\n    },\n    neutral: {\n      color: darkMode ? '#000' : '#fff',\n      icon: 'data'\n    }\n  };\n  return options[type];\n}\n\nexport const StyledAlert = styled('div', getStyledOptions('type'))(props => {\n  const {\n    invert\n  } = props;\n  const {\n    grayDark,\n    lightColor,\n    spacing,\n    white\n  } = getTheme(props);\n  let backgroundColor = isDarkMode(props) ? lightColor : grayDark;\n  let color = isDarkMode(props) ? grayDark : white;\n\n  if (invert) {\n    backgroundColor = isDarkMode(props) ? grayDark : lightColor;\n    color = isDarkMode(props) ? white : grayDark;\n  }\n\n  return css`\n    ${baseStyles(props)};\n    align-items: center;\n    background-color: ${backgroundColor};\n    color: ${color};\n    display: flex;\n    overflow: hidden;\n    position: relative;\n    max-width: 380px;\n    width: 100%;\n    ${borderStyles(props)};\n    ${marginStyles(props)};\n    ${paddingStyles(props)};\n    ${radiusStyles(props)};\n\n    [data-component-name='Text'] {\n      margin-left: ${spacing.xs};\n    }\n  `;\n});\nexport const Alert = forwardRef((props, ref) => {\n  const {\n    children,\n    icon,\n    invert,\n    type\n  } = props;\n  const {\n    colors,\n    darkMode\n  } = getTheme({\n    theme: useTheme()\n  });\n  const selected = getOptions(type, colors, !!darkMode || !!invert);\n  return _jsxs(StyledAlert, {\n    ref: ref,\n    \"data-component-name\": \"Alert\",\n    ...props,\n    children: [_jsx(Icon, {\n      color: selected.color,\n      name: icon || selected.icon,\n      size: 20\n    }), _jsx(Text, {\n      size: \"mid\",\n      children: children\n    })]\n  });\n});\nAlert.defaultProps = {\n  invert: false,\n  padding: 'md',\n  radius: 'xs',\n  type: 'success'\n};","map":{"version":3,"mappings":"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","names":["forwardRef","css","useTheme","styled","Icon","getTheme","baseStyles","borderStyles","getStyledOptions","isDarkMode","marginStyles","paddingStyles","radiusStyles","Text","getOptions","type","colors","darkMode","options","success","color","green","icon","warning","orange","yellow","error","red","info","blue","neutral","StyledAlert","props","invert","grayDark","lightColor","spacing","white","backgroundColor","xs","Alert","ref","children","theme","selected","_jsxs","_jsx","name","size","defaultProps","padding","radius"],"sources":["/My_WORK/graduate_React/frontend/node_modules/@gilbarbara/components/src/Alert.tsx"],"sourcesContent":["import { forwardRef } from 'react';\nimport { css, useTheme } from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport { Icon } from './Icon';\nimport { getTheme } from './modules/helpers';\nimport {\n  baseStyles,\n  borderStyles,\n  getStyledOptions,\n  isDarkMode,\n  marginStyles,\n  paddingStyles,\n  radiusStyles,\n} from './modules/system';\nimport { Text } from './Text';\nimport {\n  ComponentProps,\n  Icons,\n  StyledProps,\n  Theme,\n  WithBorder,\n  WithChildren,\n  WithInvert,\n  WithMargin,\n  WithPadding,\n  WithRadius,\n} from './types';\n\nexport interface AlertKnownProps\n  extends StyledProps,\n    WithBorder,\n    WithChildren,\n    WithInvert,\n    WithMargin,\n    WithPadding,\n    WithRadius {\n  icon?: Icons;\n  /** @default success */\n  type: 'success' | 'warning' | 'error' | 'info' | 'neutral';\n}\n\nexport type AlertProps = ComponentProps<HTMLDivElement, AlertKnownProps>;\n\nfunction getOptions(type: AlertProps['type'], colors: Theme['colors'], darkMode: boolean) {\n  const options = {\n    success: {\n      color: colors.green,\n      icon: 'check-o',\n    },\n    warning: {\n      color: darkMode ? colors.orange : colors.yellow,\n      icon: 'danger',\n    },\n    error: {\n      color: colors.red,\n      icon: 'close-o',\n    },\n    info: {\n      color: colors.blue,\n      icon: 'info',\n    },\n    neutral: {\n      color: darkMode ? '#000' : '#fff',\n      icon: 'data',\n    },\n  } as const;\n\n  return options[type];\n}\n\nexport const StyledAlert = styled(\n  'div',\n  getStyledOptions('type'),\n)<AlertProps>(props => {\n  const { invert } = props;\n  const { grayDark, lightColor, spacing, white } = getTheme(props);\n  let backgroundColor = isDarkMode(props) ? lightColor : grayDark;\n  let color = isDarkMode(props) ? grayDark : white;\n\n  if (invert) {\n    backgroundColor = isDarkMode(props) ? grayDark : lightColor;\n    color = isDarkMode(props) ? white : grayDark;\n  }\n\n  return css`\n    ${baseStyles(props)};\n    align-items: center;\n    background-color: ${backgroundColor};\n    color: ${color};\n    display: flex;\n    overflow: hidden;\n    position: relative;\n    max-width: 380px;\n    width: 100%;\n    ${borderStyles(props)};\n    ${marginStyles(props)};\n    ${paddingStyles(props)};\n    ${radiusStyles(props)};\n\n    [data-component-name='Text'] {\n      margin-left: ${spacing.xs};\n    }\n  `;\n});\n\nexport const Alert = forwardRef<HTMLDivElement, AlertProps>((props, ref) => {\n  const { children, icon, invert, type } = props;\n  const { colors, darkMode } = getTheme({ theme: useTheme() });\n\n  const selected = getOptions(type, colors, !!darkMode || !!invert);\n\n  return (\n    <StyledAlert ref={ref} data-component-name=\"Alert\" {...props}>\n      <Icon color={selected.color} name={icon || selected.icon} size={20} />\n      <Text size=\"mid\">{children}</Text>\n    </StyledAlert>\n  );\n});\n\nAlert.defaultProps = {\n  invert: false,\n  padding: 'md',\n  radius: 'xs',\n  type: 'success',\n};\n"]},"metadata":{},"sourceType":"module"}