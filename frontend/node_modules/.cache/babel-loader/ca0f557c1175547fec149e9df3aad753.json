{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport SVG from 'react-inlinesvg';\nimport innerText from 'react-innertext';\nimport { css, keyframes } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport is from 'is-lite';\nimport { rotate } from './modules/animations';\nimport { getColorVariant, getTheme, px } from './modules/helpers';\nimport { iconsCustom } from './modules/options';\nimport { baseStyles, getStyledOptions, marginStyles } from './modules/system';\nconst loadBar = keyframes`\n  0%, 100% { transform: translateX(0); width: 4px; }\n  25%, 75% { transform: translateX(0); width: 24px; }\n  50% { transform: translateX(20px); width: 4px }\n`;\nconst loadBarDocument = keyframes`\n  0%, 10% { transform: translateX(-100%) }\n  50%, 60% { transform: translateX(0) }\n`;\nconst loadBarSound = keyframes`\n  10% {transform: scaleY(0.2) }\n  30% {transform: scaleY(0.8) }\n  60% {transform: scaleY(0.7) }\n  80% {transform: scaleY(0.2) }\n  100% {transform: scaleY(1) }\n`;\nexport const StyledIcon = styled('span', getStyledOptions())(props => {\n  const {\n    color,\n    name = '',\n    shade,\n    size,\n    spin,\n    variant\n  } = props;\n  const {\n    variants\n  } = getTheme(props);\n  let iconColor = color || 'inherit';\n\n  if (!color && variant) {\n    const {\n      bg\n    } = getColorVariant(variant, shade, variants);\n    iconColor = bg;\n  }\n\n  return css`\n    ${baseStyles(props)};\n    color: ${iconColor};\n    display: inline-flex;\n    line-height: 1;\n    height: ${px(size)};\n    width: ${px(size)};\n    ${marginStyles(props)};\n\n    > * {\n      ${(!!spin || name.startsWith('spinner')) && css`\n        animation: ${rotate} 1s infinite linear;\n      `};\n    }\n\n    ${['loadbar', 'loadbar-alt'].includes(name) && css`\n      rect:last-of-type {\n        animation: ${loadBar} 2s infinite linear;\n      }\n    `};\n\n    ${name === 'loadbar-doc' && css`\n      g > rect {\n        animation: ${loadBarDocument} 1s linear infinite alternate;\n      }\n    `};\n\n    ${name === 'loadbar-sound' && css`\n      g > rect {\n        animation: ${loadBarSound} 1s linear infinite alternate;\n        transform: scaleY(0);\n        transform-origin: bottom;\n\n        &:nth-of-type(2) {\n          animation-delay: 0.2s;\n        }\n\n        &:nth-of-type(3) {\n          animation-delay: 0.4s;\n        }\n      }\n    `};\n  `;\n});\nexport const Icon = forwardRef((props, ref) => {\n  const {\n    name,\n    size = 16,\n    title,\n    url,\n    ...rest\n  } = props;\n  let iconURL = '';\n\n  if (name) {\n    const urlPrefix = iconsCustom.some(d => d.name === name) ? 'https://files.gilbarbara.dev/icons/' : 'https://cdn.jsdelivr.net/npm/css.gg/icons/svg/';\n    iconURL = `${urlPrefix}${name}.svg`;\n  } else if (url) {\n    iconURL = url;\n  }\n\n  let titleString = name;\n\n  if (!is.undefined(title)) {\n    titleString = is.string(title) ? title : innerText(title);\n  }\n\n  return _jsx(StyledIcon, {\n    ref: ref,\n    \"data-component-name\": \"Icon\",\n    name: name,\n    size: size,\n    ...rest,\n    children: _jsx(SVG, {\n      height: size,\n      src: iconURL,\n      title: titleString,\n      width: size\n    })\n  });\n});\nIcon.defaultProps = {\n  size: 16,\n  spin: false\n};","map":{"version":3,"mappings":"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","names":["forwardRef","SVG","innerText","css","keyframes","styled","is","rotate","getColorVariant","getTheme","px","iconsCustom","baseStyles","getStyledOptions","marginStyles","loadBar","loadBarDocument","loadBarSound","StyledIcon","props","color","name","shade","size","spin","variant","variants","iconColor","bg","startsWith","includes","Icon","ref","title","url","rest","iconURL","urlPrefix","some","d","titleString","undefined","string","_jsx","children","height","src","width","defaultProps"],"sources":["/My_WORK/graduate_React/frontend/node_modules/@gilbarbara/components/src/Icon.tsx"],"sourcesContent":["import { CSSProperties, forwardRef, ReactNode } from 'react';\nimport SVG from 'react-inlinesvg';\nimport innerText from 'react-innertext';\nimport { css, keyframes } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport is from 'is-lite';\nimport { RequireExactlyOne, SetRequired } from 'type-fest';\n\nimport { rotate } from './modules/animations';\nimport { getColorVariant, getTheme, px } from './modules/helpers';\nimport { iconsCustom } from './modules/options';\nimport { baseStyles, getStyledOptions, marginStyles } from './modules/system';\nimport { Icons, StyledProps, WithColor, WithMargin } from './types';\n\nexport interface IconKnownProps extends StyledProps, WithColor, WithMargin {\n  color?: string;\n  name: Icons;\n  /** @default 16 */\n  size?: number;\n  spin?: boolean;\n  style?: CSSProperties;\n  title?: ReactNode;\n  url: string;\n}\n\nexport type IconProps = RequireExactlyOne<IconKnownProps, 'name' | 'url'>;\n\nconst loadBar = keyframes`\n  0%, 100% { transform: translateX(0); width: 4px; }\n  25%, 75% { transform: translateX(0); width: 24px; }\n  50% { transform: translateX(20px); width: 4px }\n`;\n\nconst loadBarDocument = keyframes`\n  0%, 10% { transform: translateX(-100%) }\n  50%, 60% { transform: translateX(0) }\n`;\n\nconst loadBarSound = keyframes`\n  10% {transform: scaleY(0.2) }\n  30% {transform: scaleY(0.8) }\n  60% {transform: scaleY(0.7) }\n  80% {transform: scaleY(0.2) }\n  100% {transform: scaleY(1) }\n`;\n\nexport const StyledIcon = styled(\n  'span',\n  getStyledOptions(),\n)<SetRequired<Omit<IconProps, 'url'>, 'size'>>(props => {\n  const { color, name = '', shade, size, spin, variant } = props;\n  const { variants } = getTheme(props);\n  let iconColor = color || 'inherit';\n\n  if (!color && variant) {\n    const { bg } = getColorVariant(variant, shade, variants);\n\n    iconColor = bg;\n  }\n\n  return css`\n    ${baseStyles(props)};\n    color: ${iconColor};\n    display: inline-flex;\n    line-height: 1;\n    height: ${px(size)};\n    width: ${px(size)};\n    ${marginStyles(props)};\n\n    > * {\n      ${(!!spin || (name as string).startsWith('spinner')) &&\n      css`\n        animation: ${rotate} 1s infinite linear;\n      `};\n    }\n\n    ${['loadbar', 'loadbar-alt'].includes(name as string) &&\n    css`\n      rect:last-of-type {\n        animation: ${loadBar} 2s infinite linear;\n      }\n    `};\n\n    ${name === 'loadbar-doc' &&\n    css`\n      g > rect {\n        animation: ${loadBarDocument} 1s linear infinite alternate;\n      }\n    `};\n\n    ${name === 'loadbar-sound' &&\n    css`\n      g > rect {\n        animation: ${loadBarSound} 1s linear infinite alternate;\n        transform: scaleY(0);\n        transform-origin: bottom;\n\n        &:nth-of-type(2) {\n          animation-delay: 0.2s;\n        }\n\n        &:nth-of-type(3) {\n          animation-delay: 0.4s;\n        }\n      }\n    `};\n  `;\n});\n\nexport const Icon = forwardRef<HTMLSpanElement, IconProps>((props, ref) => {\n  const { name, size = 16, title, url, ...rest } = props;\n  let iconURL = '';\n\n  if (name) {\n    const urlPrefix = iconsCustom.some(d => d.name === name)\n      ? 'https://files.gilbarbara.dev/icons/'\n      : 'https://cdn.jsdelivr.net/npm/css.gg/icons/svg/';\n\n    iconURL = `${urlPrefix}${name}.svg`;\n  } else if (url) {\n    iconURL = url;\n  }\n\n  let titleString = name as string;\n\n  if (!is.undefined(title)) {\n    titleString = is.string(title) ? title : innerText(title);\n  }\n\n  return (\n    <StyledIcon ref={ref} data-component-name=\"Icon\" name={name} size={size} {...rest}>\n      <SVG height={size} src={iconURL} title={titleString} width={size} />\n    </StyledIcon>\n  );\n});\n\nIcon.defaultProps = {\n  size: 16,\n  spin: false,\n};\n"]},"metadata":{},"sourceType":"module"}