{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { css, keyframes } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport { getColorVariant, getTheme, px } from '../modules/helpers';\nimport { getStyledOptions, isDarkMode } from '../modules/system';\n\nconst grow = _ref => {\n  let {\n    size = 32\n  } = _ref;\n  return keyframes`\n  0% {\n    height: 0;\n    width: 0;\n  }\n\n  30% {\n    border-width: ${px(size && size / 2.5)};\n    opacity: 1;\n  }\n\n  100% {\n    border-width: 0;\n    height: ${px(size)};\n    opacity: 0;\n    width: ${px(size)};\n  }\n`;\n};\n\nconst StyledLoaderGrow = styled('div', getStyledOptions())(props => {\n  const {\n    block,\n    color,\n    shade,\n    size = 32,\n    variant\n  } = props;\n  const {\n    darkColor,\n    lightColor,\n    spacing,\n    variants\n  } = getTheme(props);\n  const darkMode = isDarkMode(props);\n  let variantColor = darkMode ? lightColor : darkColor;\n\n  if (variant) {\n    variantColor = getColorVariant(variant, shade, variants).bg;\n  }\n\n  return css`\n    display: ${block ? 'flex' : 'inline-flex'};\n    height: ${px(size)};\n    margin: ${block ? spacing.lg : 0} auto;\n    position: relative;\n    width: ${px(size)};\n\n    > div {\n      animation: ${grow(props)} 1.15s infinite cubic-bezier(0.2, 0.6, 0.36, 1);\n      border: 0 solid ${color || variantColor};\n      border-radius: 50%;\n      height: 0;\n      left: 50%;\n      position: absolute;\n      top: 50%;\n      transform: translate(-50%, -50%);\n      width: 0;\n    }\n  `;\n});\nexport default function LoaderGrow(props) {\n  return _jsx(StyledLoaderGrow, {\n    \"data-component-name\": \"LoaderGrow\",\n    ...props,\n    children: _jsx(\"div\", {})\n  });\n}","map":{"version":3,"mappings":";AAAA,SAASA,GAAT,EAAcC,SAAd,QAA+B,gBAA/B;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAEA,SAASC,eAAT,EAA0BC,QAA1B,EAAoCC,EAApC,QAA8C,oBAA9C;AACA,SAASC,gBAAT,EAA2BC,UAA3B,QAA6C,mBAA7C;;AAGA,MAAMC,IAAI,GAAG;EAAA,IAAC;IAAEC,IAAI,GAAG;EAAT,CAAD;EAAA,OAAgCR,SAAS;;;;;;;oBAOlCI,EAAE,CAACI,IAAI,IAAIA,IAAI,GAAG,GAAhB,CAAoB;;;;;;cAM5BJ,EAAE,CAACI,IAAD,CAAM;;aAETJ,EAAE,CAACI,IAAD,CAAM;;CAfR;AAAA,CAAb;;AAmBA,MAAMC,gBAAgB,GAAGR,MAAM,CAC7B,KAD6B,EAE7BI,gBAAgB,EAFa,CAAN,CAGVK,KAAK,IAAG;EACrB,MAAM;IAAEC,KAAF;IAASC,KAAT;IAAgBC,KAAhB;IAAuBL,IAAI,GAAG,EAA9B;IAAkCM;EAAlC,IAA8CJ,KAApD;EACA,MAAM;IAAEK,SAAF;IAAaC,UAAb;IAAyBC,OAAzB;IAAkCC;EAAlC,IAA+Cf,QAAQ,CAACO,KAAD,CAA7D;EACA,MAAMS,QAAQ,GAAGb,UAAU,CAACI,KAAD,CAA3B;EAEA,IAAIU,YAAY,GAAGD,QAAQ,GAAGH,UAAH,GAAgBD,SAA3C;;EAEA,IAAID,OAAJ,EAAa;IACXM,YAAY,GAAGlB,eAAe,CAACY,OAAD,EAAUD,KAAV,EAAiBK,QAAjB,CAAf,CAA0CG,EAAzD;EACD;;EAED,OAAOtB,GAAG;eACGY,KAAK,GAAG,MAAH,GAAY,aAAa;cAC/BP,EAAE,CAACI,IAAD,CAAM;cACRG,KAAK,GAAGM,OAAO,CAACK,EAAX,GAAgB,CAAC;;aAEvBlB,EAAE,CAACI,IAAD,CAAM;;;mBAGFD,IAAI,CAACG,KAAD,CAAO;wBACNE,KAAK,IAAIQ,YAAY;;;;;;;;;GAT3C;AAmBD,CAjCwB,CAAzB;AAmCA,eAAc,SAAUG,UAAV,CAAqBb,KAArB,EAAuC;EACnD,OACEc,KAACf,gBAAD,EAAiB;IAAA,uBAAqB,YAArB;IAAiC,GAAKC,KAAtC;IAA2Ce,UAC1DD;EADe,CAAjB,CADF;AAKD","names":["css","keyframes","styled","getColorVariant","getTheme","px","getStyledOptions","isDarkMode","grow","size","StyledLoaderGrow","props","block","color","shade","variant","darkColor","lightColor","spacing","variants","darkMode","variantColor","bg","lg","LoaderGrow","_jsx","children"],"sources":["/My_WORK/graduate_React/frontend/node_modules/@gilbarbara/components/src/Loader/Grow.tsx"],"sourcesContent":["import { css, keyframes } from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport { getColorVariant, getTheme, px } from '../modules/helpers';\nimport { getStyledOptions, isDarkMode } from '../modules/system';\nimport { LoaderProps } from '../types';\n\nconst grow = ({ size = 32 }: LoaderProps) => keyframes`\n  0% {\n    height: 0;\n    width: 0;\n  }\n\n  30% {\n    border-width: ${px(size && size / 2.5)};\n    opacity: 1;\n  }\n\n  100% {\n    border-width: 0;\n    height: ${px(size)};\n    opacity: 0;\n    width: ${px(size)};\n  }\n`;\n\nconst StyledLoaderGrow = styled(\n  'div',\n  getStyledOptions(),\n)<LoaderProps>(props => {\n  const { block, color, shade, size = 32, variant } = props;\n  const { darkColor, lightColor, spacing, variants } = getTheme(props);\n  const darkMode = isDarkMode(props);\n\n  let variantColor = darkMode ? lightColor : darkColor;\n\n  if (variant) {\n    variantColor = getColorVariant(variant, shade, variants).bg;\n  }\n\n  return css`\n    display: ${block ? 'flex' : 'inline-flex'};\n    height: ${px(size)};\n    margin: ${block ? spacing.lg : 0} auto;\n    position: relative;\n    width: ${px(size)};\n\n    > div {\n      animation: ${grow(props)} 1.15s infinite cubic-bezier(0.2, 0.6, 0.36, 1);\n      border: 0 solid ${color || variantColor};\n      border-radius: 50%;\n      height: 0;\n      left: 50%;\n      position: absolute;\n      top: 50%;\n      transform: translate(-50%, -50%);\n      width: 0;\n    }\n  `;\n});\n\nexport default function LoaderGrow(props: LoaderProps) {\n  return (\n    <StyledLoaderGrow data-component-name=\"LoaderGrow\" {...props}>\n      <div />\n    </StyledLoaderGrow>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}