{"ast":null,"code":"import hex2rgb from './hex2rgb';\nimport { invariant, isString, messages, round } from './modules/utils';\nimport parseCSS from './parse-css';\n/**\n * Get the brightness difference between 2 colors.\n */\n\nexport default function brightnessDifference(left, right) {\n  invariant(isString(left), messages.left);\n  invariant(isString(right), messages.right);\n  const RGBLeft = hex2rgb(parseCSS(left));\n  const RGBRight = hex2rgb(parseCSS(right));\n  const rightY = (RGBRight.r * 299 + RGBRight.g * 587 + RGBRight.b * 114) / 1000;\n  const leftY = (RGBLeft.r * 299 + RGBLeft.g * 587 + RGBLeft.b * 114) / 1000;\n  return round(Math.abs(rightY - leftY), 4);\n}","map":{"version":3,"mappings":"AAAA,OAAOA,OAAP,MAAoB,WAApB;AACA,SAASC,SAAT,EAAoBC,QAApB,EAA8BC,QAA9B,EAAwCC,KAAxC,QAAqD,iBAArD;AACA,OAAOC,QAAP,MAAqB,aAArB;AAEA;;;;AAGA,eAAc,SAAUC,oBAAV,CAA+BC,IAA/B,EAA6CC,KAA7C,EAA0D;EACtEP,SAAS,CAACC,QAAQ,CAACK,IAAD,CAAT,EAAiBJ,QAAQ,CAACI,IAA1B,CAAT;EACAN,SAAS,CAACC,QAAQ,CAACM,KAAD,CAAT,EAAkBL,QAAQ,CAACK,KAA3B,CAAT;EAEA,MAAMC,OAAO,GAAGT,OAAO,CAACK,QAAQ,CAACE,IAAD,CAAT,CAAvB;EACA,MAAMG,QAAQ,GAAGV,OAAO,CAACK,QAAQ,CAACG,KAAD,CAAT,CAAxB;EAEA,MAAMG,MAAM,GAAG,CAACD,QAAQ,CAACE,CAAT,GAAa,GAAb,GAAmBF,QAAQ,CAACG,CAAT,GAAa,GAAhC,GAAsCH,QAAQ,CAACI,CAAT,GAAa,GAApD,IAA2D,IAA1E;EACA,MAAMC,KAAK,GAAG,CAACN,OAAO,CAACG,CAAR,GAAY,GAAZ,GAAkBH,OAAO,CAACI,CAAR,GAAY,GAA9B,GAAoCJ,OAAO,CAACK,CAAR,GAAY,GAAjD,IAAwD,IAAtE;EAEA,OAAOV,KAAK,CAACY,IAAI,CAACC,GAAL,CAASN,MAAM,GAAGI,KAAlB,CAAD,EAA2B,CAA3B,CAAZ;AACD","names":["hex2rgb","invariant","isString","messages","round","parseCSS","brightnessDifference","left","right","RGBLeft","RGBRight","rightY","r","g","b","leftY","Math","abs"],"sources":["/My_WORK/graduate_React/frontend/node_modules/colorizr/src/brightness-difference.ts"],"sourcesContent":["import hex2rgb from './hex2rgb';\nimport { invariant, isString, messages, round } from './modules/utils';\nimport parseCSS from './parse-css';\n\n/**\n * Get the brightness difference between 2 colors.\n */\nexport default function brightnessDifference(left: string, right: string): number {\n  invariant(isString(left), messages.left);\n  invariant(isString(right), messages.right);\n\n  const RGBLeft = hex2rgb(parseCSS(left));\n  const RGBRight = hex2rgb(parseCSS(right));\n\n  const rightY = (RGBRight.r * 299 + RGBRight.g * 587 + RGBRight.b * 114) / 1000;\n  const leftY = (RGBLeft.r * 299 + RGBLeft.g * 587 + RGBLeft.b * 114) / 1000;\n\n  return round(Math.abs(rightY - leftY), 4);\n}\n"]},"metadata":{},"sourceType":"module"}