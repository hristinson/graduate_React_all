{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback } from 'react';\nimport { formatMoney, formatPhoneBR } from '@gilbarbara/helpers';\nimport { getInputParameters } from './utils';\nimport { Input } from '../Input';\nimport { InputColor } from '../InputColor';\nimport { InputFile } from '../InputFile';\nimport { clearNumber } from '../modules/helpers';\n\nfunction FieldInput(props) {\n  const {\n    currentValue,\n    formatter,\n    id,\n    isDirty,\n    name,\n    onBlur,\n    onChange,\n    onFocus,\n    registration,\n    setStatus,\n    skipValidation,\n    type\n  } = props;\n  const handleBlur = useCallback(event => {\n    setStatus({\n      isActive: false,\n      isDirty\n    });\n    registration.onBlur(event);\n\n    if (onBlur) {\n      onBlur(event);\n    }\n  }, [isDirty, onBlur, registration, setStatus]);\n  const handleFocus = useCallback(event => {\n    setStatus({\n      isActive: true\n    });\n\n    if (onFocus) {\n      onFocus(event);\n    }\n  }, [onFocus, setStatus]);\n  const handleChange = useCallback(event => {\n    if (formatter === 'phoneBR') {\n      event.target.value = clearNumber(event.target.value).slice(0, 11);\n    } else if (formatter) {\n      event.target.value = clearNumber(event.target.value);\n    }\n\n    registration.onChange(event);\n\n    if (onChange) {\n      onChange(event);\n    }\n  }, [formatter, onChange, registration]);\n  const input = { ...getInputParameters(props, 'currentValue', 'inline', 'isDirty', 'registration', 'setStatus'),\n    id: id || name,\n    onBlur: handleBlur,\n    onChange: handleChange,\n    onFocus: handleFocus\n  };\n  let content;\n\n  switch (type) {\n    case 'color':\n      {\n        content = _jsx(InputColor, { ...registration,\n          ...input,\n          value: currentValue\n        });\n        break;\n      }\n\n    case 'file':\n      {\n        content = _jsx(InputFile, { ...registration,\n          ...input,\n          value: currentValue?.length ? currentValue[0].name : ''\n        });\n        break;\n      }\n\n    case 'hidden':\n      {\n        content = _jsx(\"input\", { ...registration,\n          ...input,\n          type: \"hidden\"\n        });\n        break;\n      }\n\n    default:\n      {\n        const parameters = {};\n\n        if (currentValue) {\n          if (formatter === 'money') {\n            parameters.value = formatMoney(currentValue);\n          } else if (formatter === 'phoneBR') {\n            parameters.value = formatPhoneBR(`${currentValue}`);\n          }\n        }\n\n        content = _jsx(Input, { ...registration,\n          ...input,\n          ...parameters,\n          suffixSpacing: !skipValidation,\n          type: type\n        });\n        break;\n      }\n  }\n\n  return content;\n}\n\nexport default FieldInput;","map":{"version":3,"mappings":"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","names":["useCallback","formatMoney","formatPhoneBR","getInputParameters","Input","InputColor","InputFile","clearNumber","FieldInput","props","currentValue","formatter","id","isDirty","name","onBlur","onChange","onFocus","registration","setStatus","skipValidation","type","handleBlur","event","isActive","handleFocus","handleChange","target","value","slice","input","content","_jsx","length","parameters","suffixSpacing"],"sources":["/My_WORK/graduate_React/frontend/node_modules/@gilbarbara/components/src/Field/Input.tsx"],"sourcesContent":["import { ChangeEvent, FocusEvent, useCallback } from 'react';\nimport { UseFormRegisterReturn } from 'react-hook-form';\nimport { formatMoney, formatPhoneBR } from '@gilbarbara/helpers';\nimport { AnyObject } from '@gilbarbara/types';\n\nimport { FieldInputProps } from './types';\nimport { getInputParameters } from './utils';\n\nimport { Input } from '../Input';\nimport { InputColor } from '../InputColor';\nimport { InputFile } from '../InputFile';\nimport { clearNumber } from '../modules/helpers';\n\ninterface Props extends FieldInputProps {\n  currentValue: any;\n  isDirty: boolean;\n  registration: UseFormRegisterReturn;\n  setStatus: (status: { isActive?: boolean; isDirty?: boolean }) => void;\n}\n\nfunction FieldInput(props: Props): JSX.Element {\n  const {\n    currentValue,\n    formatter,\n    id,\n    isDirty,\n    name,\n    onBlur,\n    onChange,\n    onFocus,\n    registration,\n    setStatus,\n    skipValidation,\n    type,\n  } = props;\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => {\n      setStatus({ isActive: false, isDirty });\n\n      registration.onBlur(event);\n\n      if (onBlur) {\n        onBlur(event);\n      }\n    },\n    [isDirty, onBlur, registration, setStatus],\n  );\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => {\n      setStatus({ isActive: true });\n\n      if (onFocus) {\n        onFocus(event);\n      }\n    },\n    [onFocus, setStatus],\n  );\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (formatter === 'phoneBR') {\n        event.target.value = clearNumber(event.target.value).slice(0, 11);\n      } else if (formatter) {\n        event.target.value = clearNumber(event.target.value);\n      }\n\n      registration.onChange(event);\n\n      if (onChange) {\n        onChange(event);\n      }\n    },\n    [formatter, onChange, registration],\n  );\n\n  const input = {\n    ...getInputParameters(props, 'currentValue', 'inline', 'isDirty', 'registration', 'setStatus'),\n    id: id || name,\n    onBlur: handleBlur,\n    onChange: handleChange,\n    onFocus: handleFocus,\n  };\n\n  let content;\n\n  switch (type) {\n    case 'color': {\n      content = <InputColor {...registration} {...input} value={currentValue} />;\n      break;\n    }\n    case 'file': {\n      content = (\n        <InputFile\n          {...registration}\n          {...input}\n          value={currentValue?.length ? currentValue[0].name : ''}\n        />\n      );\n      break;\n    }\n    case 'hidden': {\n      content = <input {...registration} {...input} type=\"hidden\" />;\n      break;\n    }\n    default: {\n      const parameters: AnyObject<string> = {};\n\n      if (currentValue) {\n        if (formatter === 'money') {\n          parameters.value = formatMoney(currentValue);\n        } else if (formatter === 'phoneBR') {\n          parameters.value = formatPhoneBR(`${currentValue}`);\n        }\n      }\n\n      content = (\n        <Input\n          {...registration}\n          {...input}\n          {...parameters}\n          suffixSpacing={!skipValidation}\n          type={type}\n        />\n      );\n      break;\n    }\n  }\n\n  return content;\n}\n\nexport default FieldInput;\n"]},"metadata":{},"sourceType":"module"}