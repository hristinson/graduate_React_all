{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { cleanupNumericString } from './strings';\n/**\n * Format boolean into a Yes/No string\n */\n\nexport function formatBoolean(input) {\n  return input ? 'Yes' : 'No';\n}\n/**\n * Format string into a CPF\n */\n\nexport function formatCPF(value) {\n  var clearValue = cleanupNumericString(value);\n\n  if (clearValue.length >= 10) {\n    return \"\".concat(clearValue.slice(0, 3), \".\").concat(clearValue.slice(3, 6), \".\").concat(clearValue.slice(6, 9), \"-\").concat(clearValue.slice(9, 11));\n  } else if (clearValue.length >= 7) {\n    return \"\".concat(clearValue.slice(0, 3), \".\").concat(clearValue.slice(3, 6), \".\").concat(clearValue.slice(6, 9));\n  } else if (clearValue.length >= 4) {\n    return \"\".concat(clearValue.slice(0, 3), \".\").concat(clearValue.slice(3, 6));\n  }\n\n  return clearValue;\n}\n/**\n * Format date ISO string using locale\n */\n\nexport function formatDateLocale(input, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _a = options.locale,\n      locale = _a === void 0 ? 'en-GB' : _a,\n      _b = options.showTime,\n      showTime = _b === void 0 ? false : _b;\n  var formatOptions = {\n    year: '2-digit',\n    month: '2-digit',\n    day: '2-digit'\n  };\n\n  if (showTime) {\n    formatOptions.hour = '2-digit';\n    formatOptions.minute = '2-digit';\n  }\n\n  return new Date(input).toLocaleDateString(locale, formatOptions);\n}\n/**\n * Format number into money string\n */\n\nexport function formatMoney(input, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _a = options.decimalChar,\n      decimalChar = _a === void 0 ? '.' : _a,\n      _b = options.showCents,\n      showCents = _b === void 0 ? false : _b,\n      _c = options.symbol,\n      symbol = _c === void 0 ? '$' : _c,\n      _d = options.thousandsChar,\n      thousandsChar = _d === void 0 ? ',' : _d;\n  var isNegative = input < 0;\n  var value = Math.abs(input);\n\n  var _e = __read(value.toFixed(2).split('.'), 2),\n      amount = _e[0],\n      cents = _e[1];\n\n  var padStart = amount.length > 3 ? amount.length % 3 : 0;\n  var initial = amount.slice(0, padStart);\n  var remain = amount.slice(padStart).replace(/(\\d{3})(?=\\d)/g, \"$1\".concat(thousandsChar));\n  var formatted = \"\".concat(initial ? \"\".concat(initial).concat(thousandsChar) : '').concat(remain);\n\n  if (cents !== '00' || showCents) {\n    formatted += \"\".concat(decimalChar).concat(cents);\n  }\n\n  return \"\".concat(isNegative ? '-' : '').concat(symbol).concat(formatted);\n}\n/**\n * Format string into a brazilian phone\n */\n\nexport function formatPhoneBR(input) {\n  var phone = input.replace(/\\D/g, '');\n\n  if (phone.length === 8) {\n    return phone.replace(/^(\\d{4})(\\d{4}).*/, '$1-$2');\n  }\n\n  if (phone.length === 9) {\n    return phone.replace(/^(\\d{5})(\\d{4}).*/, '$1-$2');\n  }\n\n  if (phone.length === 10 || phone.length === 11) {\n    return phone.replace(/^(\\d{2})(\\d{4,5})(\\d{4}).*/, '($1) $2-$3');\n  }\n\n  return phone;\n}\n/**\n * Format string into a zip code\n */\n\nexport function formatPostalCodeBR(value) {\n  var clearValue = cleanupNumericString(value);\n\n  if (clearValue.length >= 6) {\n    return \"\".concat(clearValue.slice(0, 5), \"-\").concat(clearValue.slice(5, 8));\n  }\n\n  return clearValue;\n}","map":{"version":3,"mappings":"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","names":["cleanupNumericString","formatBoolean","input","formatCPF","value","clearValue","length","slice","concat","formatDateLocale","options","_a","_b","showTime","formatOptions","year","month","day","hour","minute","Date","toLocaleDateString","locale","formatMoney","showCents","_c","symbol","_d","thousandsChar","isNegative","Math","abs","toFixed","split","amount","cents","padStart","initial","remain","replace","formatted","decimalChar","formatPhoneBR","phone","formatPostalCodeBR"],"sources":["/My_WORK/graduate_React/frontend/node_modules/@gilbarbara/helpers/src/formatters.ts"],"sourcesContent":["import { cleanupNumericString } from './strings';\nimport { FormatDateLocaleOptions, FormatMoneyOptions } from './types';\n\n/**\n * Format boolean into a Yes/No string\n */\nexport function formatBoolean(input: boolean) {\n  return input ? 'Yes' : 'No';\n}\n\n/**\n * Format string into a CPF\n */\nexport function formatCPF(value: string) {\n  const clearValue = cleanupNumericString(value);\n\n  if (clearValue.length >= 10) {\n    return `${clearValue.slice(0, 3)}.${clearValue.slice(3, 6)}.${clearValue.slice(\n      6,\n      9,\n    )}-${clearValue.slice(9, 11)}`;\n  } else if (clearValue.length >= 7) {\n    return `${clearValue.slice(0, 3)}.${clearValue.slice(3, 6)}.${clearValue.slice(6, 9)}`;\n  } else if (clearValue.length >= 4) {\n    return `${clearValue.slice(0, 3)}.${clearValue.slice(3, 6)}`;\n  }\n\n  return clearValue;\n}\n\n/**\n * Format date ISO string using locale\n */\nexport function formatDateLocale(input: string, options: FormatDateLocaleOptions = {}) {\n  const { locale = 'en-GB', showTime = false } = options;\n\n  const formatOptions: Intl.DateTimeFormatOptions = {\n    year: '2-digit',\n    month: '2-digit',\n    day: '2-digit',\n  };\n\n  if (showTime) {\n    formatOptions.hour = '2-digit';\n    formatOptions.minute = '2-digit';\n  }\n\n  return new Date(input).toLocaleDateString(locale, formatOptions);\n}\n\n/**\n * Format number into money string\n */\nexport function formatMoney(input: number, options: FormatMoneyOptions = {}) {\n  const { decimalChar = '.', showCents = false, symbol = '$', thousandsChar = ',' } = options;\n\n  const isNegative = input < 0;\n  const value = Math.abs(input);\n  const [amount, cents] = value.toFixed(2).split('.');\n  const padStart = amount.length > 3 ? amount.length % 3 : 0;\n  const initial = amount.slice(0, padStart);\n  const remain = amount.slice(padStart).replace(/(\\d{3})(?=\\d)/g, `$1${thousandsChar}`);\n\n  let formatted = `${initial ? `${initial}${thousandsChar}` : ''}${remain}`;\n\n  if (cents !== '00' || showCents) {\n    formatted += `${decimalChar}${cents}`;\n  }\n\n  return `${isNegative ? '-' : ''}${symbol}${formatted}`;\n}\n\n/**\n * Format string into a brazilian phone\n */\nexport function formatPhoneBR(input: string) {\n  const phone = input.replace(/\\D/g, '');\n\n  if (phone.length === 8) {\n    return phone.replace(/^(\\d{4})(\\d{4}).*/, '$1-$2');\n  }\n\n  if (phone.length === 9) {\n    return phone.replace(/^(\\d{5})(\\d{4}).*/, '$1-$2');\n  }\n\n  if (phone.length === 10 || phone.length === 11) {\n    return phone.replace(/^(\\d{2})(\\d{4,5})(\\d{4}).*/, '($1) $2-$3');\n  }\n\n  return phone;\n}\n\n/**\n * Format string into a zip code\n */\nexport function formatPostalCodeBR(value: string) {\n  const clearValue = cleanupNumericString(value);\n\n  if (clearValue.length >= 6) {\n    return `${clearValue.slice(0, 5)}-${clearValue.slice(5, 8)}`;\n  }\n\n  return clearValue;\n}\n"]},"metadata":{},"sourceType":"module"}