{"ast":null,"code":"export function isValidCPF(value) {\n  if (!value) {\n    return false;\n  }\n\n  var newValue = value.replace(/[.-]/g, '');\n  var sum = 0;\n  var rest;\n\n  if (/^(\\d)\\1+$/.test(newValue)) {\n    return false;\n  }\n\n  for (var index = 1; index <= 9; index++) {\n    sum += parseInt(newValue.substring(index - 1, index), 10) * (11 - index);\n  }\n\n  rest = sum * 10 % 11;\n\n  if (rest === 10 || rest === 11) {\n    rest = 0;\n  }\n\n  if (rest !== parseInt(newValue.substring(9, 10), 10)) {\n    return false;\n  }\n\n  sum = 0;\n\n  for (var index = 1; index <= 10; index++) {\n    sum += parseInt(newValue.substring(index - 1, index), 10) * (12 - index);\n  }\n\n  rest = sum * 10 % 11;\n\n  if (rest === 10 || rest === 11) {\n    rest = 0;\n  }\n\n  return rest === parseInt(newValue.substring(10, 11), 10);\n}\n/**\n * Check if email is valid\n */\n\nexport function isValidEmail(value) {\n  return /^[\\w%+.-]+@[\\d.a-z-]+\\.[a-z]{2,}$/i.test(value);\n}\n/**\n * Validate password length and required characters\n * @throws\n */\n\nexport function validatePassword(password, options) {\n  var _a = options || {},\n      _b = _a.maxLength,\n      maxLength = _b === void 0 ? 64 : _b,\n      _c = _a.maxLengthMessage,\n      maxLengthMessage = _c === void 0 ? 'Password must be a maximum of 64 characters' : _c,\n      _d = _a.minLength,\n      minLength = _d === void 0 ? 6 : _d,\n      _e = _a.minLengthMessage,\n      minLengthMessage = _e === void 0 ? 'Password must be at least 6 characters long' : _e,\n      _f = _a.regex,\n      regex = _f === void 0 ? /^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[!#$%&*?@^]).*$/ : _f,\n      _g = _a.requiredCharactersMessage,\n      requiredCharactersMessage = _g === void 0 ? 'Password must have at least 1 number, 1 lowercase, 1 uppercase and 1 special character' : _g;\n\n  if (password.length < minLength) {\n    throw new Error(minLengthMessage);\n  }\n\n  if (password.length > maxLength) {\n    throw new Error(maxLengthMessage);\n  }\n\n  if (!regex.test(password)) {\n    throw new Error(requiredCharactersMessage);\n  }\n\n  return true;\n}","map":{"version":3,"mappings":"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","names":["isValidCPF","value","newValue","replace","sum","rest","test","index","parseInt","substring","isValidEmail","validatePassword","password","options","_b","maxLength","_c","maxLengthMessage","_d","minLength","_e","minLengthMessage","_f","regex","_g","requiredCharactersMessage","length","Error"],"sources":["/My_WORK/graduate_React/frontend/node_modules/@gilbarbara/helpers/src/validators.ts"],"sourcesContent":["/**\n * Check if CPF is valid\n */\nimport { ValidatePasswordOptions } from './types';\n\nexport function isValidCPF(value: string) {\n  if (!value) {\n    return false;\n  }\n\n  const newValue = value.replace(/[.-]/g, '');\n  let sum = 0;\n  let rest: number;\n\n  if (/^(\\d)\\1+$/.test(newValue)) {\n    return false;\n  }\n\n  for (let index = 1; index <= 9; index++) {\n    sum += parseInt(newValue.substring(index - 1, index), 10) * (11 - index);\n  }\n\n  rest = (sum * 10) % 11;\n\n  if (rest === 10 || rest === 11) {\n    rest = 0;\n  }\n\n  if (rest !== parseInt(newValue.substring(9, 10), 10)) {\n    return false;\n  }\n\n  sum = 0;\n\n  for (let index = 1; index <= 10; index++) {\n    sum += parseInt(newValue.substring(index - 1, index), 10) * (12 - index);\n  }\n\n  rest = (sum * 10) % 11;\n\n  if (rest === 10 || rest === 11) {\n    rest = 0;\n  }\n\n  return rest === parseInt(newValue.substring(10, 11), 10);\n}\n\n/**\n * Check if email is valid\n */\nexport function isValidEmail(value: string) {\n  return /^[\\w%+.-]+@[\\d.a-z-]+\\.[a-z]{2,}$/i.test(value);\n}\n\n/**\n * Validate password length and required characters\n * @throws\n */\nexport function validatePassword(password: string, options?: ValidatePasswordOptions) {\n  const {\n    maxLength = 64,\n    maxLengthMessage = 'Password must be a maximum of 64 characters',\n    minLength = 6,\n    minLengthMessage = 'Password must be at least 6 characters long',\n    regex = /^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[!#$%&*?@^]).*$/,\n    requiredCharactersMessage = 'Password must have at least 1 number, 1 lowercase, 1 uppercase and 1 special character',\n  } = options || {};\n\n  if (password.length < minLength) {\n    throw new Error(minLengthMessage);\n  }\n\n  if (password.length > maxLength) {\n    throw new Error(maxLengthMessage);\n  }\n\n  if (!regex.test(password)) {\n    throw new Error(requiredCharactersMessage);\n  }\n\n  return true;\n}\n"]},"metadata":{},"sourceType":"module"}