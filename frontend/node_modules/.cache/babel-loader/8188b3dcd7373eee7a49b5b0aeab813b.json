{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback } from 'react';\nimport { getInputParameters } from './utils';\nimport { Textarea } from '../Textarea';\n\nfunction FieldTextarea(props) {\n  const {\n    id,\n    isDirty,\n    name,\n    onBlur,\n    onChange,\n    onFocus,\n    registration,\n    setStatus,\n    skipValidation\n  } = props;\n  const handleBlur = useCallback(event => {\n    setStatus({\n      isActive: false,\n      isDirty\n    });\n    registration.onBlur(event);\n\n    if (onBlur) {\n      onBlur(event);\n    }\n  }, [isDirty, onBlur, registration, setStatus]);\n  const handleFocus = useCallback(event => {\n    setStatus({\n      isActive: true\n    });\n\n    if (onFocus) {\n      onFocus(event);\n    }\n  }, [onFocus, setStatus]);\n  const handleChange = useCallback(event => {\n    registration.onChange(event);\n\n    if (onChange) {\n      onChange(event);\n    }\n  }, [onChange, registration]);\n  const input = { ...getInputParameters(props, 'isDirty', 'registration', 'setStatus'),\n    id: id || name,\n    onBlur: handleBlur,\n    onChange: handleChange,\n    onFocus: handleFocus\n  };\n  return _jsx(Textarea, { ...registration,\n    ...input,\n    suffixSpacing: !skipValidation\n  });\n}\n\nexport default FieldTextarea;","map":{"version":3,"mappings":";AAAA,SAAkCA,WAAlC,QAAqD,OAArD;AAIA,SAASC,kBAAT,QAAmC,SAAnC;AAEA,SAASC,QAAT,QAAyB,aAAzB;;AAQA,SAASC,aAAT,CAAuBC,KAAvB,EAAmC;EACjC,MAAM;IAAEC,EAAF;IAAMC,OAAN;IAAeC,IAAf;IAAqBC,MAArB;IAA6BC,QAA7B;IAAuCC,OAAvC;IAAgDC,YAAhD;IAA8DC,SAA9D;IAAyEC;EAAzE,IACJT,KADF;EAEA,MAAMU,UAAU,GAAGd,WAAW,CAC3Be,KAAD,IAA2C;IACzCH,SAAS,CAAC;MAAEI,QAAQ,EAAE,KAAZ;MAAmBV;IAAnB,CAAD,CAAT;IAEAK,YAAY,CAACH,MAAb,CAAoBO,KAApB;;IAEA,IAAIP,MAAJ,EAAY;MACVA,MAAM,CAACO,KAAD,CAAN;IACD;EACF,CAT2B,EAU5B,CAACT,OAAD,EAAUE,MAAV,EAAkBG,YAAlB,EAAgCC,SAAhC,CAV4B,CAA9B;EAaA,MAAMK,WAAW,GAAGjB,WAAW,CAC5Be,KAAD,IAA2C;IACzCH,SAAS,CAAC;MAAEI,QAAQ,EAAE;IAAZ,CAAD,CAAT;;IAEA,IAAIN,OAAJ,EAAa;MACXA,OAAO,CAACK,KAAD,CAAP;IACD;EACF,CAP4B,EAQ7B,CAACL,OAAD,EAAUE,SAAV,CAR6B,CAA/B;EAWA,MAAMM,YAAY,GAAGlB,WAAW,CAC7Be,KAAD,IAA4C;IAC1CJ,YAAY,CAACF,QAAb,CAAsBM,KAAtB;;IAEA,IAAIN,QAAJ,EAAc;MACZA,QAAQ,CAACM,KAAD,CAAR;IACD;EACF,CAP6B,EAQ9B,CAACN,QAAD,EAAWE,YAAX,CAR8B,CAAhC;EAWA,MAAMQ,KAAK,GAAG,EACZ,GAAGlB,kBAAkB,CAACG,KAAD,EAAQ,SAAR,EAAmB,cAAnB,EAAmC,WAAnC,CADT;IAEZC,EAAE,EAAEA,EAAE,IAAIE,IAFE;IAGZC,MAAM,EAAEM,UAHI;IAIZL,QAAQ,EAAES,YAJE;IAKZR,OAAO,EAAEO;EALG,CAAd;EAQA,OAAOG,KAAClB,QAAD,EAAS,KAAKS,YAAL;IAAiB,GAAMQ,KAAvB;IAA8BE,aAAa,EAAE,CAACR;EAA9C,CAAT,CAAP;AACD;;AAED,eAAeV,aAAf","names":["useCallback","getInputParameters","Textarea","FieldTextarea","props","id","isDirty","name","onBlur","onChange","onFocus","registration","setStatus","skipValidation","handleBlur","event","isActive","handleFocus","handleChange","input","_jsx","suffixSpacing"],"sources":["/My_WORK/graduate_React/frontend/node_modules/@gilbarbara/components/src/Field/Textarea.tsx"],"sourcesContent":["import { ChangeEvent, FocusEvent, useCallback } from 'react';\nimport { UseFormRegisterReturn } from 'react-hook-form';\n\nimport { FieldTextareaProps } from './types';\nimport { getInputParameters } from './utils';\n\nimport { Textarea } from '../Textarea';\n\ninterface Props extends FieldTextareaProps {\n  isDirty: boolean;\n  registration: UseFormRegisterReturn;\n  setStatus: (status: { isActive?: boolean; isDirty?: boolean }) => void;\n}\n\nfunction FieldTextarea(props: Props): JSX.Element {\n  const { id, isDirty, name, onBlur, onChange, onFocus, registration, setStatus, skipValidation } =\n    props;\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLTextAreaElement>) => {\n      setStatus({ isActive: false, isDirty });\n\n      registration.onBlur(event);\n\n      if (onBlur) {\n        onBlur(event);\n      }\n    },\n    [isDirty, onBlur, registration, setStatus],\n  );\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLTextAreaElement>) => {\n      setStatus({ isActive: true });\n\n      if (onFocus) {\n        onFocus(event);\n      }\n    },\n    [onFocus, setStatus],\n  );\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLTextAreaElement>) => {\n      registration.onChange(event);\n\n      if (onChange) {\n        onChange(event);\n      }\n    },\n    [onChange, registration],\n  );\n\n  const input = {\n    ...getInputParameters(props, 'isDirty', 'registration', 'setStatus'),\n    id: id || name,\n    onBlur: handleBlur,\n    onChange: handleChange,\n    onFocus: handleFocus,\n  };\n\n  return <Textarea {...registration} {...input} suffixSpacing={!skipValidation} />;\n}\n\nexport default FieldTextarea;\n"]},"metadata":{},"sourceType":"module"}