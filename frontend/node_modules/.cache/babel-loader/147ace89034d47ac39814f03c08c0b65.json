{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback } from 'react';\nimport is from 'is-lite';\nimport { getInputParameters } from './utils';\nimport { Dropdown } from '../Dropdown';\n\nfunction FieldDropdown(props) {\n  const {\n    currentValue,\n    dropdownProps = {},\n    items = [],\n    name,\n    onChange,\n    setValue\n  } = props;\n  const handleChangeDropdown = useCallback(data => {\n    const {\n      multi\n    } = dropdownProps;\n    const setValueOptions = {\n      shouldDirty: true,\n      shouldValidate: true\n    };\n\n    if (multi) {\n      const values = data.map(d => d.value);\n      setValue(name, values, setValueOptions);\n\n      if (onChange && (!currentValue || currentValue !== values)) {\n        onChange(data);\n      }\n    } else {\n      const [selected] = data;\n      /* istanbul ignore else */\n\n      if (selected) {\n        setValue(name, selected.value, setValueOptions);\n\n        if (onChange && (!currentValue || currentValue !== selected.value)) {\n          onChange(data);\n        }\n      } else {\n        setValue(name, undefined, setValueOptions);\n      }\n    }\n  }, [dropdownProps, setValue, name, onChange, currentValue]);\n  const parameters = getInputParameters(props, 'currentValue', 'registration', 'setValue');\n  return _jsx(Dropdown, {\n    items: items,\n    values: items.filter(d => is.array(currentValue) ? currentValue.includes(d.value) : d.value === currentValue),\n    width: \"100%\",\n    ...parameters,\n    ...dropdownProps,\n    onChange: handleChangeDropdown\n  });\n}\n\nexport default FieldDropdown;","map":{"version":3,"mappings":";AAAA,SAASA,WAAT,QAA4B,OAA5B;AAEA,OAAOC,EAAP,MAAe,SAAf;AAGA,SAASC,kBAAT,QAAmC,SAAnC;AAEA,SAASC,QAAT,QAAyB,aAAzB;;AASA,SAASC,aAAT,CAAuBC,KAAvB,EAAmC;EACjC,MAAM;IAAEC,YAAF;IAAgBC,aAAa,GAAG,EAAhC;IAAoCC,KAAK,GAAG,EAA5C;IAAgDC,IAAhD;IAAsDC,QAAtD;IAAgEC;EAAhE,IAA6EN,KAAnF;EAEA,MAAMO,oBAAoB,GAAGZ,WAAW,CACrCa,IAAD,IAA2B;IACzB,MAAM;MAAEC;IAAF,IAAYP,aAAlB;IACA,MAAMQ,eAAe,GAAG;MAAEC,WAAW,EAAE,IAAf;MAAqBC,cAAc,EAAE;IAArC,CAAxB;;IAEA,IAAIH,KAAJ,EAAW;MACT,MAAMI,MAAM,GAAGL,IAAI,CAACM,GAAL,CAASC,CAAC,IAAIA,CAAC,CAACC,KAAhB,CAAf;MAEAV,QAAQ,CAACF,IAAD,EAAOS,MAAP,EAAeH,eAAf,CAAR;;MAEA,IAAIL,QAAQ,KAAK,CAACJ,YAAD,IAAiBA,YAAY,KAAKY,MAAvC,CAAZ,EAA4D;QAC1DR,QAAQ,CAACG,IAAD,CAAR;MACD;IACF,CARD,MAQO;MACL,MAAM,CAACS,QAAD,IAAaT,IAAnB;MAEA;;MACA,IAAIS,QAAJ,EAAc;QACZX,QAAQ,CAACF,IAAD,EAAOa,QAAQ,CAACD,KAAhB,EAAuBN,eAAvB,CAAR;;QAEA,IAAIL,QAAQ,KAAK,CAACJ,YAAD,IAAiBA,YAAY,KAAKgB,QAAQ,CAACD,KAAhD,CAAZ,EAAoE;UAClEX,QAAQ,CAACG,IAAD,CAAR;QACD;MACF,CAND,MAMO;QACLF,QAAQ,CAACF,IAAD,EAAOc,SAAP,EAAkBR,eAAlB,CAAR;MACD;IACF;EACF,CA3BqC,EA4BtC,CAACR,aAAD,EAAgBI,QAAhB,EAA0BF,IAA1B,EAAgCC,QAAhC,EAA0CJ,YAA1C,CA5BsC,CAAxC;EA+BA,MAAMkB,UAAU,GAAGtB,kBAAkB,CAACG,KAAD,EAAQ,cAAR,EAAwB,cAAxB,EAAwC,UAAxC,CAArC;EAEA,OACEoB,KAACtB,QAAD,EAAS;IACPK,KAAK,EAAEA,KADA;IAEPU,MAAM,EAAEV,KAAK,CAACkB,MAAN,CAAcN,CAAD,IACnBnB,EAAE,CAAC0B,KAAH,CAASrB,YAAT,IAAyBA,YAAY,CAACsB,QAAb,CAAsBR,CAAC,CAACC,KAAxB,CAAzB,GAA0DD,CAAC,CAACC,KAAF,KAAYf,YADhE,CAFD;IAKPuB,KAAK,EAAC,MALC;IAKK,GACRL,UANG;IAMO,GACVjB,aAPG;IAQPG,QAAQ,EAAEE;EARH,CAAT,CADF;AAYD;;AAED,eAAeR,aAAf","names":["useCallback","is","getInputParameters","Dropdown","FieldDropdown","props","currentValue","dropdownProps","items","name","onChange","setValue","handleChangeDropdown","data","multi","setValueOptions","shouldDirty","shouldValidate","values","map","d","value","selected","undefined","parameters","_jsx","filter","array","includes","width"],"sources":["/My_WORK/graduate_React/frontend/node_modules/@gilbarbara/components/src/Field/Dropdown.tsx"],"sourcesContent":["import { useCallback } from 'react';\nimport { FieldValues, SetFieldValue, UseFormRegisterReturn } from 'react-hook-form';\nimport is from 'is-lite';\n\nimport { FieldDropdownProps } from './types';\nimport { getInputParameters } from './utils';\n\nimport { Dropdown } from '../Dropdown';\nimport { DropdownOption } from '../types';\n\ninterface Props extends FieldDropdownProps {\n  currentValue: any;\n  registration: UseFormRegisterReturn;\n  setValue: SetFieldValue<FieldValues>;\n}\n\nfunction FieldDropdown(props: Props): JSX.Element {\n  const { currentValue, dropdownProps = {}, items = [], name, onChange, setValue } = props;\n\n  const handleChangeDropdown = useCallback(\n    (data: DropdownOption[]) => {\n      const { multi } = dropdownProps;\n      const setValueOptions = { shouldDirty: true, shouldValidate: true };\n\n      if (multi) {\n        const values = data.map(d => d.value);\n\n        setValue(name, values, setValueOptions);\n\n        if (onChange && (!currentValue || currentValue !== values)) {\n          onChange(data);\n        }\n      } else {\n        const [selected] = data;\n\n        /* istanbul ignore else */\n        if (selected) {\n          setValue(name, selected.value, setValueOptions);\n\n          if (onChange && (!currentValue || currentValue !== selected.value)) {\n            onChange(data);\n          }\n        } else {\n          setValue(name, undefined, setValueOptions);\n        }\n      }\n    },\n    [dropdownProps, setValue, name, onChange, currentValue],\n  );\n\n  const parameters = getInputParameters(props, 'currentValue', 'registration', 'setValue');\n\n  return (\n    <Dropdown\n      items={items}\n      values={items.filter((d: DropdownOption) =>\n        is.array(currentValue) ? currentValue.includes(d.value) : d.value === currentValue,\n      )}\n      width=\"100%\"\n      {...parameters}\n      {...dropdownProps}\n      onChange={handleChangeDropdown}\n    />\n  );\n}\n\nexport default FieldDropdown;\n"]},"metadata":{},"sourceType":"module"}