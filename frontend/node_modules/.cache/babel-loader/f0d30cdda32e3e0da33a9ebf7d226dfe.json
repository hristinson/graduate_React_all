{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport { css } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport { Icon } from './Icon';\nimport { getColorVariant, getTheme, px } from './modules/helpers';\nimport { appearanceStyles, backgroundStyles, baseStyles, getStyledOptions, paddingStyles } from './modules/system';\nexport const StyledButton = styled('button', getStyledOptions())(props => {\n  const {\n    block,\n    busy,\n    shade,\n    shape,\n    size = 'md',\n    variant = 'primary',\n    wide\n  } = props;\n  const {\n    button,\n    grayLighter,\n    grayMid,\n    radius,\n    spacing,\n    variants\n  } = getTheme(props);\n  const {\n    borderRadius,\n    fontSize,\n    fontWeight,\n    height,\n    lineHeight,\n    padding\n  } = button;\n  let buttonPadding = `${padding[size][0]} ${wide ? px(parseInt(padding[size][1], 10) * 2) : padding[size][1]}`;\n  let selectedRadius = borderRadius[size];\n\n  if (shape) {\n    buttonPadding = spacing.xxs;\n\n    switch (shape) {\n      case 'square':\n        {\n          selectedRadius = `0`;\n          break;\n        }\n\n      case 'circle':\n        {\n          selectedRadius = radius.round;\n          break;\n        }\n    }\n  }\n\n  return css`\n    ${appearanceStyles};\n    ${baseStyles(props)};\n    align-items: center;\n    border-radius: ${selectedRadius};\n    box-shadow: none;\n    cursor: pointer;\n    display: inline-flex;\n    font-size: ${fontSize[size]};\n    font-weight: ${fontWeight};\n    min-height: ${height[size]};\n    min-width: ${height[size]};\n    justify-content: center;\n    line-height: ${lineHeight[size]};\n    overflow: hidden;\n    padding: ${buttonPadding};\n    position: relative;\n    transition: background-color 0.6s, border-color 0.6s;\n    width: ${block ? '100%' : 'auto'};\n    ${backgroundStyles(props)};\n    ${paddingStyles(props)}\n\n    &:disabled {\n      background-color: ${grayLighter};\n      border-color: ${grayLighter};\n      color: ${grayMid};\n      pointer-events: none;\n    }\n\n    &:focus {\n      outline-color: ${getColorVariant(variant, shade, variants).bg};\n    }\n\n    ${!!busy && css`\n      pointer-events: none;\n    `};\n  `;\n});\nexport const Button = forwardRef((props, ref) => {\n  const {\n    busy,\n    children,\n    shape,\n    size = 'md'\n  } = props;\n  const {\n    button: {\n      fontSize\n    }\n  } = getTheme(props);\n  const content = {\n    children,\n    icon: !!busy && _jsx(Icon, {\n      ml: \"sm\",\n      name: \"spinner\",\n      size: parseInt(fontSize[size], 10) + 4,\n      spin: true\n    })\n  };\n\n  if (shape && busy) {\n    content.children = _jsx(Icon, {\n      name: \"spinner\",\n      size: parseInt(fontSize[size], 10) + 4,\n      spin: true\n    });\n    content.icon = '';\n  }\n\n  return _jsxs(StyledButton, {\n    ref: ref,\n    \"data-component-name\": \"Button\",\n    ...props,\n    children: [content.children, content.icon]\n  });\n});\nButton.defaultProps = {\n  block: false,\n  busy: false,\n  disabled: false,\n  invert: false,\n  shade: 'mid',\n  size: 'md',\n  transparent: false,\n  type: 'button',\n  variant: 'primary',\n  wide: false\n};","map":{"version":3,"mappings":"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","names":["forwardRef","css","styled","Icon","getColorVariant","getTheme","px","appearanceStyles","backgroundStyles","baseStyles","getStyledOptions","paddingStyles","StyledButton","props","block","busy","shade","shape","size","variant","wide","button","grayLighter","grayMid","radius","spacing","variants","borderRadius","fontSize","fontWeight","height","lineHeight","padding","buttonPadding","parseInt","selectedRadius","xxs","round","bg","Button","ref","children","content","icon","_jsx","ml","name","spin","_jsxs","defaultProps","disabled","invert","transparent","type"],"sources":["/My_WORK/graduate_React/frontend/node_modules/@gilbarbara/components/src/Button.tsx"],"sourcesContent":["import { forwardRef } from 'react';\nimport { css } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport { AnyObject } from '@gilbarbara/types';\n\nimport { Icon } from './Icon';\nimport { getColorVariant, getTheme, px } from './modules/helpers';\nimport {\n  appearanceStyles,\n  backgroundStyles,\n  baseStyles,\n  getStyledOptions,\n  paddingStyles,\n} from './modules/system';\nimport {\n  ButtonTypes,\n  ComponentProps,\n  StyledProps,\n  WithBlock,\n  WithBusy,\n  WithChildren,\n  WithColor,\n  WithComponentSize,\n  WithInvert,\n  WithPadding,\n  WithTransparent,\n} from './types';\n\nexport interface ButtonKnownProps\n  extends StyledProps,\n    WithBlock,\n    WithBusy,\n    WithChildren,\n    WithColor,\n    WithComponentSize,\n    WithInvert,\n    WithPadding,\n    WithTransparent {\n  /**\n   * A shaped button with equal padding on all sides\n   */\n  shape?: 'circle' | 'round' | 'square';\n  /**\n   * The button type\n   * @default button\n   */\n  type?: ButtonTypes;\n  /**\n   * Double the horizontal padding\n   * @default false\n   */\n  wide?: boolean;\n}\n\nexport type ButtonProps = ComponentProps<HTMLButtonElement, ButtonKnownProps>;\n\nexport const StyledButton = styled(\n  'button',\n  getStyledOptions(),\n)<ButtonProps>(props => {\n  const { block, busy, shade, shape, size = 'md', variant = 'primary', wide } = props;\n  const { button, grayLighter, grayMid, radius, spacing, variants } = getTheme(props);\n  const { borderRadius, fontSize, fontWeight, height, lineHeight, padding } = button;\n  let buttonPadding = `${padding[size][0]} ${\n    wide ? px(parseInt(padding[size][1], 10) * 2) : padding[size][1]\n  }`;\n  let selectedRadius = borderRadius[size];\n\n  if (shape) {\n    buttonPadding = spacing.xxs;\n\n    switch (shape) {\n      case 'square': {\n        selectedRadius = `0`;\n        break;\n      }\n      case 'circle': {\n        selectedRadius = radius.round;\n        break;\n      }\n    }\n  }\n\n  return css`\n    ${appearanceStyles};\n    ${baseStyles(props)};\n    align-items: center;\n    border-radius: ${selectedRadius};\n    box-shadow: none;\n    cursor: pointer;\n    display: inline-flex;\n    font-size: ${fontSize[size]};\n    font-weight: ${fontWeight};\n    min-height: ${height[size]};\n    min-width: ${height[size]};\n    justify-content: center;\n    line-height: ${lineHeight[size]};\n    overflow: hidden;\n    padding: ${buttonPadding};\n    position: relative;\n    transition: background-color 0.6s, border-color 0.6s;\n    width: ${block ? '100%' : 'auto'};\n    ${backgroundStyles(props)};\n    ${paddingStyles(props)}\n\n    &:disabled {\n      background-color: ${grayLighter};\n      border-color: ${grayLighter};\n      color: ${grayMid};\n      pointer-events: none;\n    }\n\n    &:focus {\n      outline-color: ${getColorVariant(variant, shade, variants).bg};\n    }\n\n    ${!!busy &&\n    css`\n      pointer-events: none;\n    `};\n  `;\n});\n\nexport const Button = forwardRef<HTMLButtonElement, ButtonProps>((props, ref) => {\n  const { busy, children, shape, size = 'md' } = props;\n  const {\n    button: { fontSize },\n  } = getTheme(props);\n\n  const content: AnyObject = {\n    children,\n    icon: !!busy && <Icon ml=\"sm\" name=\"spinner\" size={parseInt(fontSize[size], 10) + 4} spin />,\n  };\n\n  if (shape && busy) {\n    content.children = <Icon name=\"spinner\" size={parseInt(fontSize[size], 10) + 4} spin />;\n    content.icon = '';\n  }\n\n  return (\n    <StyledButton ref={ref} data-component-name=\"Button\" {...props}>\n      {content.children}\n      {content.icon}\n    </StyledButton>\n  );\n});\n\nButton.defaultProps = {\n  block: false,\n  busy: false,\n  disabled: false,\n  invert: false,\n  shade: 'mid',\n  size: 'md',\n  transparent: false,\n  type: 'button',\n  variant: 'primary',\n  wide: false,\n};\n"]},"metadata":{},"sourceType":"module"}