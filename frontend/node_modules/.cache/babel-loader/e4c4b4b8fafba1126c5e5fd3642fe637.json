{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef, useState } from 'react';\nimport { css, useTheme } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport is from 'is-lite';\nimport { Box } from './Box';\nimport { getTheme, px } from './modules/helpers';\nimport { getStyledOptions } from './modules/system';\nimport { Text } from './Text';\nconst StyledColorGroup = styled('div', getStyledOptions())(props => {\n  const {\n    height,\n    width\n  } = props;\n  const innerHeight = (is.string(height) ? parseInt(height, 10) : height) + 16;\n  const innerWidth = (is.string(width) ? parseInt(width, 10) : width) + 16;\n  return css`\n    align-items: center;\n    display: flex;\n\n    [data-component-name='Text'] {\n      min-width: 75px;\n    }\n\n    input {\n      appearance: none;\n      -moz-appearance: none;\n      -webkit-appearance: none;\n      background: none;\n      border: 0;\n      cursor: pointer;\n      height: ${px(innerHeight)};\n      margin: -8px;\n      padding: 0;\n      width: ${px(innerWidth)};\n    }\n  `;\n});\nexport const InputColor = forwardRef((props, ref) => {\n  const {\n    spacing\n  } = getTheme({\n    theme: useTheme()\n  });\n  const {\n    height = spacing.xl,\n    name,\n    onChange,\n    value,\n    width = spacing.xl,\n    ...rest\n  } = props;\n  const [localValue, setLocalValue] = useState('');\n\n  const handleChange = event => {\n    setLocalValue(event.target.value);\n\n    if (onChange) {\n      onChange(event);\n    }\n  };\n\n  return _jsxs(StyledColorGroup, {\n    \"data-component-name\": \"InputColor\",\n    height: height,\n    width: width,\n    children: [_jsx(Box, {\n      height: height,\n      mr: \"xs\",\n      overflow: \"hidden\",\n      width: width,\n      children: _jsx(\"input\", {\n        ref: ref,\n        id: name,\n        name: name,\n        onChange: handleChange,\n        type: \"color\",\n        ...rest\n      })\n    }), _jsx(Text, {\n      children: value || localValue\n    })]\n  });\n});\nInputColor.defaultProps = {\n  disabled: false,\n  height: '32px',\n  readOnly: false,\n  width: '32px'\n};","map":{"version":3,"mappings":";AAAA,SAAsBA,UAAtB,EAAkCC,QAAlC,QAAkD,OAAlD;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAEA,OAAOC,EAAP,MAAe,SAAf;AAEA,SAASC,GAAT,QAAoB,OAApB;AACA,SAASC,QAAT,EAAmBC,EAAnB,QAA6B,mBAA7B;AACA,SAASC,gBAAT,QAAiC,kBAAjC;AACA,SAASC,IAAT,QAAqB,QAArB;AAcA,MAAMC,gBAAgB,GAAGP,MAAM,CAC7B,KAD6B,EAE7BK,gBAAgB,EAFa,CAAN,CAG8BG,KAAK,IAAG;EAC7D,MAAM;IAAEC,MAAF;IAAUC;EAAV,IAAoBF,KAA1B;EAEA,MAAMG,WAAW,GAAG,CAACV,EAAE,CAACW,MAAH,CAAUH,MAAV,IAAoBI,QAAQ,CAACJ,MAAD,EAAS,EAAT,CAA5B,GAA2CA,MAA5C,IAAsD,EAA1E;EACA,MAAMK,UAAU,GAAG,CAACb,EAAE,CAACW,MAAH,CAAUF,KAAV,IAAmBG,QAAQ,CAACH,KAAD,EAAQ,EAAR,CAA3B,GAAyCA,KAA1C,IAAmD,EAAtE;EAEA,OAAOZ,GAAG;;;;;;;;;;;;;;;gBAeIM,EAAE,CAACO,WAAD,CAAa;;;eAGhBP,EAAE,CAACU,UAAD,CAAY;;GAlB3B;AAqBD,CA9BwB,CAAzB;AAgCA,OAAO,MAAMC,UAAU,GAAGnB,UAAU,CAAoC,CAACY,KAAD,EAAQQ,GAAR,KAAe;EACrF,MAAM;IAAEC;EAAF,IAAcd,QAAQ,CAAC;IAAEe,KAAK,EAAEnB,QAAQ;EAAjB,CAAD,CAA5B;EACA,MAAM;IAAEU,MAAM,GAAGQ,OAAO,CAACE,EAAnB;IAAuBC,IAAvB;IAA6BC,QAA7B;IAAuCC,KAAvC;IAA8CZ,KAAK,GAAGO,OAAO,CAACE,EAA9D;IAAkE,GAAGI;EAArE,IAA8Ef,KAApF;EACA,MAAM,CAACgB,UAAD,EAAaC,aAAb,IAA8B5B,QAAQ,CAAC,EAAD,CAA5C;;EAEA,MAAM6B,YAAY,GAAIC,KAAD,IAAyC;IAC5DF,aAAa,CAACE,KAAK,CAACC,MAAN,CAAaN,KAAd,CAAb;;IAEA,IAAID,QAAJ,EAAc;MACZA,QAAQ,CAACM,KAAD,CAAR;IACD;EACF,CAND;;EAQA,OACEE,MAACtB,gBAAD,EAAiB;IAAA,uBAAqB,YAArB;IAAkCE,MAAM,EAAEA,MAA1C;IAAkDC,KAAK,EAAEA,KAAzD;IAA8DoB,WAC7EC,KAAC7B,GAAD,EAAI;MAACO,MAAM,EAAEA,MAAT;MAAiBuB,EAAE,EAAC,IAApB;MAAyBC,QAAQ,EAAC,QAAlC;MAA2CvB,KAAK,EAAEA,KAAlD;MAAuDoB,UACzDC;QAAOf,GAAG,EAAEA,GAAZ;QAAiBkB,EAAE,EAAEd,IAArB;QAA2BA,IAAI,EAAEA,IAAjC;QAAuCC,QAAQ,EAAEK,YAAjD;QAA+DS,IAAI,EAAC,OAApE;QAA2E,GAAKZ;MAAhF;IADE,CAAJ,CAD6E,EAI7EQ,KAACzB,IAAD,EAAK;MAAAwB,UAAER,KAAK,IAAIE;IAAX,CAAL,CAJ6E;EAA9D,CAAjB,CADF;AAQD,CArBmC,CAA7B;AAuBPT,UAAU,CAACqB,YAAX,GAA0B;EACxBC,QAAQ,EAAE,KADc;EAExB5B,MAAM,EAAE,MAFgB;EAGxB6B,QAAQ,EAAE,KAHc;EAIxB5B,KAAK,EAAE;AAJiB,CAA1B","names":["forwardRef","useState","css","useTheme","styled","is","Box","getTheme","px","getStyledOptions","Text","StyledColorGroup","props","height","width","innerHeight","string","parseInt","innerWidth","InputColor","ref","spacing","theme","xl","name","onChange","value","rest","localValue","setLocalValue","handleChange","event","target","_jsxs","children","_jsx","mr","overflow","id","type","defaultProps","disabled","readOnly"],"sources":["/My_WORK/graduate_React/frontend/node_modules/@gilbarbara/components/src/InputColor.tsx"],"sourcesContent":["import { ChangeEvent, forwardRef, useState } from 'react';\nimport { css, useTheme } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport { StringOrNumber } from '@gilbarbara/types';\nimport is from 'is-lite';\n\nimport { Box } from './Box';\nimport { getTheme, px } from './modules/helpers';\nimport { getStyledOptions } from './modules/system';\nimport { Text } from './Text';\nimport { ComponentProps, StyledProps, WithFormElements } from './types';\n\nexport interface InputColorKnownProps extends StyledProps, WithFormElements {\n  height?: StringOrNumber;\n  value?: string;\n}\n\nexport type InputColorProps = ComponentProps<\n  HTMLInputElement,\n  InputColorKnownProps,\n  'name' | 'type' | 'width'\n>;\n\nconst StyledColorGroup = styled(\n  'div',\n  getStyledOptions(),\n)<Required<Pick<InputColorProps, 'height' | 'width'>>>(props => {\n  const { height, width } = props;\n\n  const innerHeight = (is.string(height) ? parseInt(height, 10) : height) + 16;\n  const innerWidth = (is.string(width) ? parseInt(width, 10) : width) + 16;\n\n  return css`\n    align-items: center;\n    display: flex;\n\n    [data-component-name='Text'] {\n      min-width: 75px;\n    }\n\n    input {\n      appearance: none;\n      -moz-appearance: none;\n      -webkit-appearance: none;\n      background: none;\n      border: 0;\n      cursor: pointer;\n      height: ${px(innerHeight)};\n      margin: -8px;\n      padding: 0;\n      width: ${px(innerWidth)};\n    }\n  `;\n});\n\nexport const InputColor = forwardRef<HTMLInputElement, InputColorProps>((props, ref) => {\n  const { spacing } = getTheme({ theme: useTheme() });\n  const { height = spacing.xl, name, onChange, value, width = spacing.xl, ...rest } = props;\n  const [localValue, setLocalValue] = useState('');\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setLocalValue(event.target.value);\n\n    if (onChange) {\n      onChange(event);\n    }\n  };\n\n  return (\n    <StyledColorGroup data-component-name=\"InputColor\" height={height} width={width}>\n      <Box height={height} mr=\"xs\" overflow=\"hidden\" width={width}>\n        <input ref={ref} id={name} name={name} onChange={handleChange} type=\"color\" {...rest} />\n      </Box>\n      <Text>{value || localValue}</Text>\n    </StyledColorGroup>\n  );\n});\n\nInputColor.defaultProps = {\n  disabled: false,\n  height: '32px',\n  readOnly: false,\n  width: '32px',\n};\n"]},"metadata":{},"sourceType":"module"}