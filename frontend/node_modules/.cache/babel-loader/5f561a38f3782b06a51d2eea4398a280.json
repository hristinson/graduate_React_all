{"ast":null,"code":"import { constrain, invariant, isNumber, isString, messages } from './utils';\nimport hex2hsl from '../hex2hsl';\nimport parseCSS from '../parse-css';\nimport { shift } from '../shift';\n/**\n * Update color properties\n */\n\nexport default function updater(type, sign) {\n  return (input, amount) => {\n    invariant(isString(input), messages.inputString);\n    invariant(isNumber(amount), messages.amount);\n    const hex = parseCSS(input);\n    const hsl = hex2hsl(hex);\n    return shift(hex, {\n      [type]: constrain(hsl[type], amount, [0, 100], sign)\n    });\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,EAAoBC,SAApB,EAA+BC,QAA/B,EAAyCC,QAAzC,EAAmDC,QAAnD,QAAmE,SAAnE;AAEA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,QAAP,MAAqB,cAArB;AACA,SAASC,KAAT,QAAsB,UAAtB;AAEA;;;;AAGA,eAAc,SAAUC,OAAV,CAAkBC,IAAlB,EAAyCC,IAAzC,EAAwD;EACpE,OAAO,CAACC,KAAD,EAAgBC,MAAhB,KAAkC;IACvCX,SAAS,CAACE,QAAQ,CAACQ,KAAD,CAAT,EAAkBP,QAAQ,CAACS,WAA3B,CAAT;IACAZ,SAAS,CAACC,QAAQ,CAACU,MAAD,CAAT,EAAmBR,QAAQ,CAACQ,MAA5B,CAAT;IAEA,MAAME,GAAG,GAAGR,QAAQ,CAACK,KAAD,CAApB;IACA,MAAMI,GAAG,GAAGV,OAAO,CAACS,GAAD,CAAnB;IAEA,OAAOP,KAAK,CAACO,GAAD,EAAM;MAChB,CAACL,IAAD,GAAQT,SAAS,CAACe,GAAG,CAACN,IAAD,CAAJ,EAAYG,MAAZ,EAAoB,CAAC,CAAD,EAAI,GAAJ,CAApB,EAA8BF,IAA9B;IADD,CAAN,CAAZ;EAGD,CAVD;AAWD","names":["constrain","invariant","isNumber","isString","messages","hex2hsl","parseCSS","shift","updater","type","sign","input","amount","inputString","hex","hsl"],"sources":["/My_WORK/graduate_React/frontend/node_modules/colorizr/src/modules/updater.ts"],"sourcesContent":["import { constrain, invariant, isNumber, isString, messages } from './utils';\n\nimport hex2hsl from '../hex2hsl';\nimport parseCSS from '../parse-css';\nimport { shift } from '../shift';\n\n/**\n * Update color properties\n */\nexport default function updater(type: 'h' | 's' | 'l', sign: '+' | '-') {\n  return (input: string, amount: number) => {\n    invariant(isString(input), messages.inputString);\n    invariant(isNumber(amount), messages.amount);\n\n    const hex = parseCSS(input);\n    const hsl = hex2hsl(hex);\n\n    return shift(hex, {\n      [type]: constrain(hsl[type], amount, [0, 100], sign),\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}