{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useSetState } from 'react-use';\nimport { css } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport { formatDateLocale, omit } from '@gilbarbara/helpers';\nimport is from 'is-lite';\nimport { DatePickerRange } from './Range';\nimport { DatePicker } from './Single';\nimport { defaultProps, getNumberOfMonths } from './utils';\nimport { Box } from '../Box';\nimport { ClickOutside } from '../ClickOutside';\nimport { Icon } from '../Icon';\nimport { getColorVariant, getTheme, px } from '../modules/helpers';\nimport { getStyledOptions, isDarkMode } from '../modules/system';\nimport { Text } from '../Text';\nconst StyledButton = styled('div', getStyledOptions())(props => {\n  const {\n    borderless,\n    isFilled,\n    large,\n    variant = 'primary',\n    width\n  } = props;\n  const {\n    darkColor,\n    grayDark,\n    grayDarker,\n    grayMid,\n    inputHeight,\n    lightColor,\n    radius,\n    spacing,\n    variants,\n    white\n  } = getTheme(props);\n  const darkMode = isDarkMode(props);\n  const {\n    bg\n  } = getColorVariant(variant, 'mid', variants);\n  let borderColor = darkMode ? grayDark : grayMid;\n  let textColor = grayMid;\n\n  if (isFilled) {\n    borderColor = bg;\n    textColor = darkMode ? lightColor : darkColor;\n  }\n\n  const styles = borderless ? css`\n        border: 0 !important;\n        border-bottom: 1px solid ${borderColor} !important;\n        border-radius: 0 !important;\n        padding: ${spacing.xxs} 0 !important;\n      ` : css`\n        border: 1px solid ${borderColor};\n        border-radius: ${radius.xs};\n        padding: 0 ${spacing.md} !important;\n      `;\n  return css`\n    align-items: center;\n    background-color: ${darkMode ? grayDarker : white};\n    color: ${textColor};\n    cursor: pointer;\n    display: flex;\n    justify-content: space-between;\n    min-height: ${large ? inputHeight.large : inputHeight.normal};\n    min-width: 240px;\n    width: ${width ? px(width) : 'auto'};\n    ${styles};\n  `;\n});\nconst StyledContent = styled('div', getStyledOptions())(props => {\n  const {\n    isActive,\n    position,\n    wide\n  } = props;\n  const {\n    grayDarker,\n    radius,\n    shadow,\n    spacing,\n    white\n  } = getTheme(props);\n  const darkMode = isDarkMode(props);\n  let left = position === 'left' ? 0 : 'auto';\n  let translateX = '';\n\n  if (position === 'center') {\n    left = '50%';\n    translateX = ' translateX(-50%)';\n  }\n\n  return css`\n    background-color: ${darkMode ? grayDarker : white};\n    border-radius: ${radius.xxs};\n    box-shadow: ${shadow.mid};\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    left: ${left};\n    margin-top: ${spacing.xs};\n    min-width: ${px(wide ? 600 : 300)};\n    overflow-y: auto;\n    padding: ${spacing.md};\n    position: absolute;\n    right: ${position === 'right' ? 0 : 'auto'};\n    top: 100%;\n    transform-origin: top;\n    transform: ${`scaleY(0)${translateX}`};\n    transition: transform 0.3s;\n    z-index: 100;\n\n    ${isActive && css`\n      transform: ${`scaleY(1)${translateX}`};\n    `}\n  `;\n});\nexport function DatePickerInput(props) {\n  const {\n    borderless,\n    large,\n    onSelect,\n    open,\n    placeholder,\n    position = 'right',\n    separator = ' — ',\n    showRange = false,\n    showRangeApply,\n    width,\n    ...rest\n  } = props;\n  const [{\n    isActive,\n    isFilled,\n    selected\n  }, setState] = useSetState({\n    isActive: open || false,\n    isFilled: false,\n    selected: showRange ? [undefined, undefined] : ''\n  });\n\n  const toggle = () => {\n    if (is.boolean(open)) {\n      return;\n    }\n\n    setState(s => ({\n      isActive: !s.isActive\n    }));\n  };\n\n  const handleApply = isoDate => {\n    if (onSelect) {\n      onSelect(isoDate);\n    }\n\n    toggle();\n  };\n\n  const handleSelect = isoDate => {\n    setState({\n      isFilled: is.array(isoDate) ? isoDate.some(Boolean) : !!isoDate,\n      selected: isoDate\n    });\n\n    if (onSelect && !showRangeApply) {\n      onSelect(isoDate);\n    }\n\n    if (!showRangeApply && (is.array(isoDate) && isoDate.every(Boolean) || !is.array(isoDate) && isoDate)) {\n      toggle();\n    }\n  };\n\n  const picker = showRange ? _jsx(DatePickerRange, { ...rest,\n    onApply: handleApply,\n    onSelect: handleSelect,\n    showApply: showRangeApply\n  }) : _jsx(DatePicker, { ...rest,\n    onSelect: handleSelect\n  });\n  let title = showRange ? 'Select a date range' : 'Select a date';\n\n  if (placeholder) {\n    title = placeholder;\n  }\n\n  if (is.array(selected) && selected.some(Boolean)) {\n    const dates = selected.reduce((acc, d, index) => {\n      acc.push(d ? formatDateLocale(d) : '???');\n\n      if (index === 0) {\n        acc.push(separator);\n      }\n\n      return acc;\n    }, []);\n    title = _jsx(Text, {\n      children: dates.map(d => d)\n    });\n  } else if (!is.array(selected) && selected) {\n    title = formatDateLocale(selected);\n  }\n\n  const numberOfMonths = getNumberOfMonths(rest.fromDate, rest.toDate);\n  return _jsx(Box, {\n    \"data-component-name\": \"DatePickerInput\",\n    position: \"relative\",\n    children: _jsxs(ClickOutside, {\n      active: isActive,\n      onClick: toggle,\n      children: [_jsxs(StyledButton, {\n        \"data-component-name\": \"DatePickerInputButton\",\n        isFilled: isFilled,\n        onClick: toggle,\n        ...omit(props, 'onSelect'),\n        children: [title, _jsx(Icon, {\n          name: \"calendar\"\n        })]\n      }), _jsx(StyledContent, {\n        \"data-component-name\": \"DatePickerInputContent\",\n        isActive: isActive,\n        position: position,\n        wide: showRange && numberOfMonths > 1,\n        children: picker\n      })]\n    })\n  });\n}\nDatePickerInput.defaultProps = { ...defaultProps,\n  borderless: false,\n  formatLocale: 'en-US',\n  large: false,\n  position: 'right',\n  separator: ' — ',\n  showRange: false,\n  showRangeApply: false,\n  variant: 'primary',\n  width: 'auto'\n};","map":{"version":3,"mappings":"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","names":["useSetState","css","styled","formatDateLocale","omit","is","DatePickerRange","DatePicker","defaultProps","getNumberOfMonths","Box","ClickOutside","Icon","getColorVariant","getTheme","px","getStyledOptions","isDarkMode","Text","StyledButton","props","borderless","isFilled","large","variant","width","darkColor","grayDark","grayDarker","grayMid","inputHeight","lightColor","radius","spacing","variants","white","darkMode","bg","borderColor","textColor","styles","xxs","xs","md","normal","StyledContent","isActive","position","wide","shadow","left","translateX","mid","DatePickerInput","onSelect","open","placeholder","separator","showRange","showRangeApply","rest","selected","setState","undefined","toggle","boolean","s","handleApply","isoDate","handleSelect","array","some","Boolean","every","picker","_jsx","onApply","showApply","title","dates","reduce","acc","d","index","push","children","map","numberOfMonths","fromDate","toDate","_jsxs","active","onClick","name","formatLocale"],"sources":["/My_WORK/graduate_React/frontend/node_modules/@gilbarbara/components/src/DatePicker/Input.tsx"],"sourcesContent":["import { ReactNode } from 'react';\nimport { useSetState } from 'react-use';\nimport { css } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport { formatDateLocale, omit } from '@gilbarbara/helpers';\nimport { StringOrNumber } from '@gilbarbara/types';\nimport is from 'is-lite';\n\nimport { DatePickerRange } from './Range';\nimport { DatePicker } from './Single';\nimport {\n  DatePickerBaseProps,\n  DatePickerClickHandler,\n  DatePickerRangeClickHandler,\n  DatePickerRangeParameter,\n  DatePickerSingleClickHandler,\n} from './types';\nimport { defaultProps, getNumberOfMonths } from './utils';\n\nimport { Box } from '../Box';\nimport { ClickOutside } from '../ClickOutside';\nimport { Icon } from '../Icon';\nimport { getColorVariant, getTheme, px } from '../modules/helpers';\nimport { getStyledOptions, isDarkMode } from '../modules/system';\nimport { Text } from '../Text';\nimport { Alignment, WithBorderless, WithOpen } from '../types';\n\nexport interface DatePickerInputProps\n  extends WithBorderless,\n    WithOpen,\n    DatePickerBaseProps<DatePickerClickHandler> {\n  /**  @default en-US */\n  formatLocale?: string;\n  large?: boolean;\n  placeholder?: string;\n  /** @default right */\n  position?: Alignment;\n  separator?: string;\n  showRange?: boolean;\n  showRangeApply?: boolean;\n  width?: StringOrNumber;\n}\n\ninterface State {\n  isActive: boolean;\n  isFilled: boolean;\n  selected: DatePickerRangeParameter | string;\n}\n\nconst StyledButton = styled(\n  'div',\n  getStyledOptions(),\n)<\n  Pick<DatePickerInputProps, 'large' | 'borderless' | 'theme' | 'variant' | 'width'> & {\n    isFilled: boolean;\n  }\n>(props => {\n  const { borderless, isFilled, large, variant = 'primary', width } = props;\n  const {\n    darkColor,\n    grayDark,\n    grayDarker,\n    grayMid,\n    inputHeight,\n    lightColor,\n    radius,\n    spacing,\n    variants,\n    white,\n  } = getTheme(props);\n  const darkMode = isDarkMode(props);\n\n  const { bg } = getColorVariant(variant, 'mid', variants);\n  let borderColor = darkMode ? grayDark : grayMid;\n  let textColor = grayMid;\n\n  if (isFilled) {\n    borderColor = bg;\n    textColor = darkMode ? lightColor : darkColor;\n  }\n\n  const styles = borderless\n    ? css`\n        border: 0 !important;\n        border-bottom: 1px solid ${borderColor} !important;\n        border-radius: 0 !important;\n        padding: ${spacing.xxs} 0 !important;\n      `\n    : css`\n        border: 1px solid ${borderColor};\n        border-radius: ${radius.xs};\n        padding: 0 ${spacing.md} !important;\n      `;\n\n  return css`\n    align-items: center;\n    background-color: ${darkMode ? grayDarker : white};\n    color: ${textColor};\n    cursor: pointer;\n    display: flex;\n    justify-content: space-between;\n    min-height: ${large ? inputHeight.large : inputHeight.normal};\n    min-width: 240px;\n    width: ${width ? px(width) : 'auto'};\n    ${styles};\n  `;\n});\n\nconst StyledContent = styled(\n  'div',\n  getStyledOptions(),\n)<{ isActive: boolean; position: Alignment; wide: boolean }>(props => {\n  const { isActive, position, wide } = props;\n  const { grayDarker, radius, shadow, spacing, white } = getTheme(props);\n  const darkMode = isDarkMode(props);\n  let left = position === 'left' ? 0 : 'auto';\n  let translateX = '';\n\n  if (position === 'center') {\n    left = '50%';\n    translateX = ' translateX(-50%)';\n  }\n\n  return css`\n    background-color: ${darkMode ? grayDarker : white};\n    border-radius: ${radius.xxs};\n    box-shadow: ${shadow.mid};\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    left: ${left};\n    margin-top: ${spacing.xs};\n    min-width: ${px(wide ? 600 : 300)};\n    overflow-y: auto;\n    padding: ${spacing.md};\n    position: absolute;\n    right: ${position === 'right' ? 0 : 'auto'};\n    top: 100%;\n    transform-origin: top;\n    transform: ${`scaleY(0)${translateX}`};\n    transition: transform 0.3s;\n    z-index: 100;\n\n    ${isActive &&\n    css`\n      transform: ${`scaleY(1)${translateX}`};\n    `}\n  `;\n});\n\nexport function DatePickerInput(props: DatePickerInputProps): JSX.Element {\n  const {\n    borderless,\n    large,\n    onSelect,\n    open,\n    placeholder,\n    position = 'right',\n    separator = ' — ',\n    showRange = false,\n    showRangeApply,\n    width,\n    ...rest\n  } = props;\n  const [{ isActive, isFilled, selected }, setState] = useSetState<State>({\n    isActive: open || false,\n    isFilled: false,\n    selected: showRange ? [undefined, undefined] : '',\n  });\n\n  const toggle = () => {\n    if (is.boolean(open)) {\n      return;\n    }\n\n    setState(s => ({ isActive: !s.isActive }));\n  };\n\n  const handleApply = (isoDate: DatePickerRangeParameter) => {\n    if (onSelect) {\n      onSelect(isoDate);\n    }\n\n    toggle();\n  };\n\n  const handleSelect = (isoDate: DatePickerRangeParameter | string) => {\n    setState({\n      isFilled: is.array(isoDate) ? isoDate.some(Boolean) : !!isoDate,\n      selected: isoDate,\n    });\n\n    if (onSelect && !showRangeApply) {\n      onSelect(isoDate);\n    }\n\n    if (\n      !showRangeApply &&\n      ((is.array(isoDate) && isoDate.every(Boolean)) || (!is.array(isoDate) && isoDate))\n    ) {\n      toggle();\n    }\n  };\n\n  const picker = showRange ? (\n    <DatePickerRange\n      {...rest}\n      onApply={handleApply}\n      onSelect={handleSelect as DatePickerRangeClickHandler}\n      showApply={showRangeApply}\n    />\n  ) : (\n    <DatePicker {...rest} onSelect={handleSelect as DatePickerSingleClickHandler} />\n  );\n\n  let title: ReactNode = showRange ? 'Select a date range' : 'Select a date';\n\n  if (placeholder) {\n    title = placeholder;\n  }\n\n  if (is.array(selected) && selected.some(Boolean)) {\n    const dates = selected.reduce((acc, d, index) => {\n      acc.push(d ? formatDateLocale(d) : '???');\n\n      if (index === 0) {\n        acc.push(separator);\n      }\n\n      return acc;\n    }, [] as string[]);\n\n    title = <Text>{dates.map(d => d)}</Text>;\n  } else if (!is.array(selected) && selected) {\n    title = formatDateLocale(selected);\n  }\n\n  const numberOfMonths = getNumberOfMonths(rest.fromDate, rest.toDate);\n\n  return (\n    <Box data-component-name=\"DatePickerInput\" position=\"relative\">\n      <ClickOutside active={isActive} onClick={toggle}>\n        <StyledButton\n          data-component-name=\"DatePickerInputButton\"\n          isFilled={isFilled}\n          onClick={toggle}\n          {...omit(props, 'onSelect')}\n        >\n          {title}\n          <Icon name=\"calendar\" />\n        </StyledButton>\n        <StyledContent\n          data-component-name=\"DatePickerInputContent\"\n          isActive={isActive}\n          position={position}\n          wide={showRange && numberOfMonths > 1}\n        >\n          {picker}\n        </StyledContent>\n      </ClickOutside>\n    </Box>\n  );\n}\n\nDatePickerInput.defaultProps = {\n  ...defaultProps,\n  borderless: false,\n  formatLocale: 'en-US',\n  large: false,\n  position: 'right',\n  separator: ' — ',\n  showRange: false,\n  showRangeApply: false,\n  variant: 'primary',\n  width: 'auto',\n};\n"]},"metadata":{},"sourceType":"module"}