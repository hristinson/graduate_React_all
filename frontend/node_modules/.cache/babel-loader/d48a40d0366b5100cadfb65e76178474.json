{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { DayPicker } from 'react-day-picker';\nimport { useTheme } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport { formatDateLocale, omit } from '@gilbarbara/helpers';\nimport { defaultProps, getFooter, getNumberOfMonths, getRange, getStyles } from './utils';\nimport { BoxCenter } from '../Box';\nimport { Button } from '../Button';\nimport { getTheme } from '../modules/helpers';\nimport { getStyledOptions } from '../modules/system';\nimport { Paragraph } from '../Paragraph';\nimport { Spacer } from '../Spacer';\nimport { Text } from '../Text';\nconst StyledDatePicker = styled('div', getStyledOptions('onApply'))(props => {\n  return getStyles(props);\n});\nexport function DatePickerRange(props) {\n  const {\n    currentMonthLabel,\n    formatLocale,\n    fromDate,\n    onApply,\n    onSelect,\n    showApply,\n    toDate,\n    variant,\n    ...rest\n  } = props;\n  const [month, setMonth] = useState(undefined);\n  const [range, setRange] = useState(undefined);\n  const {\n    radius,\n    spacing\n  } = getTheme({\n    theme: useTheme()\n  });\n\n  const handleClickSelect = selectedRange => {\n    setRange(selectedRange);\n\n    if (onSelect) {\n      onSelect([selectedRange?.from?.toISOString() || undefined, selectedRange?.to?.toISOString() || undefined]);\n    }\n  };\n\n  const handleClickApply = () => {\n    if (onApply) {\n      onApply([range?.from?.toISOString() || undefined, range?.to?.toISOString() || undefined]);\n    }\n  };\n\n  const handleClickReset = () => {\n    setRange({\n      from: undefined,\n      to: undefined\n    });\n\n    if (onSelect) {\n      onSelect([undefined, undefined]);\n    }\n  };\n\n  const {\n    from,\n    to\n  } = range || {};\n  const modifiers = {\n    from: from || false,\n    to: to || false\n  };\n  const content = {\n    header: _jsx(Paragraph, {\n      children: \"Select the initial date\"\n    })\n  };\n\n  if (showApply) {\n    content.footer = getFooter(setMonth, currentMonthLabel, _jsxs(Spacer, {\n      children: [_jsx(Button, {\n        disabled: !from,\n        invert: true,\n        onClick: handleClickReset,\n        size: \"sm\",\n        variant: variant,\n        children: \"Reset\"\n      }), _jsx(Button, {\n        disabled: !to,\n        onClick: handleClickApply,\n        size: \"sm\",\n        variant: variant,\n        children: \"Apply\"\n      })]\n    }));\n  } else {\n    content.footer = getFooter(setMonth, currentMonthLabel);\n    content.reset = _jsx(Button, {\n      invert: true,\n      onClick: handleClickReset,\n      size: \"sm\",\n      style: {\n        borderRadius: radius.xs,\n        minHeight: 24,\n        padding: `${spacing.xxs} ${spacing.xs}`\n      },\n      variant: variant,\n      children: \"Reset\"\n    });\n  }\n\n  if (from && to) {\n    content.header = _jsxs(Spacer, {\n      distribution: \"center\",\n      children: [_jsxs(Text, {\n        children: [\"From \", formatDateLocale(from.toISOString(), {\n          locale: formatLocale\n        }), \" to\", ' ', formatDateLocale(to.toISOString(), {\n          locale: formatLocale\n        })]\n      }), content.reset]\n    });\n  } else if (from) {\n    content.header = _jsx(Paragraph, {\n      children: \"Select the final date\"\n    });\n  }\n\n  return _jsxs(StyledDatePicker, {\n    \"data-component-name\": \"DatePickerRange\",\n    variant: variant,\n    ...omit(props, 'hidden', 'onSelect'),\n    children: [_jsx(BoxCenter, {\n      mb: \"md\",\n      minHeight: 30,\n      children: content.header\n    }), _jsx(DayPicker, {\n      mode: \"range\",\n      modifiers: modifiers,\n      month: month,\n      numberOfMonths: getNumberOfMonths(fromDate, toDate),\n      onMonthChange: setMonth,\n      onSelect: handleClickSelect,\n      selected: range,\n      ...getRange(fromDate, toDate),\n      ...rest\n    }), content.footer]\n  });\n}\nDatePickerRange.defaultProps = { ...defaultProps,\n  formatLocale: 'en-US',\n  showApply: false\n};","map":{"version":3,"mappings":"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","names":["useState","DayPicker","useTheme","styled","formatDateLocale","omit","defaultProps","getFooter","getNumberOfMonths","getRange","getStyles","BoxCenter","Button","getTheme","getStyledOptions","Paragraph","Spacer","Text","StyledDatePicker","props","DatePickerRange","currentMonthLabel","formatLocale","fromDate","onApply","onSelect","showApply","toDate","variant","rest","month","setMonth","undefined","range","setRange","radius","spacing","theme","handleClickSelect","selectedRange","from","toISOString","to","handleClickApply","handleClickReset","modifiers","content","header","_jsx","children","footer","_jsxs","disabled","invert","onClick","size","reset","style","borderRadius","xs","minHeight","padding","xxs","distribution","locale","mb","mode","numberOfMonths","onMonthChange","selected"],"sources":["/My_WORK/graduate_React/frontend/node_modules/@gilbarbara/components/src/DatePicker/Range.tsx"],"sourcesContent":["import { ReactNode, useState } from 'react';\nimport {\n  DateRange,\n  DayPicker,\n  DayPickerRangeProps,\n  SelectRangeEventHandler,\n} from 'react-day-picker';\nimport { useTheme } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport { formatDateLocale, omit } from '@gilbarbara/helpers';\nimport { AnyObject } from '@gilbarbara/types';\n\nimport {\n  DatePickerLayoutProps,\n  DatePickerProps,\n  DatePickerRangeClickHandler,\n  DatePickerRangeParameter,\n} from './types';\nimport { defaultProps, getFooter, getNumberOfMonths, getRange, getStyles } from './utils';\n\nimport { BoxCenter } from '../Box';\nimport { Button } from '../Button';\nimport { getTheme } from '../modules/helpers';\nimport { getStyledOptions } from '../modules/system';\nimport { Paragraph } from '../Paragraph';\nimport { Spacer } from '../Spacer';\nimport { Text } from '../Text';\n\nexport interface DatePickerRangerProps\n  extends DatePickerProps<DatePickerRangeClickHandler, 'range'>,\n    DatePickerLayoutProps {\n  /**\n   * @default en-US\n   */\n  formatLocale?: string;\n  /**\n   * For internal use with DatePickerInput\n   * @private\n   * */\n  onApply?: (selected: DatePickerRangeParameter) => void;\n  /**\n   * For internal use with DatePickerInput\n   * @private\n   * */\n  showApply?: boolean;\n}\n\nconst StyledDatePicker = styled(\n  'div',\n  getStyledOptions('onApply'),\n)<DatePickerRangerProps>(props => {\n  return getStyles(props);\n});\n\nexport function DatePickerRange(props: DatePickerRangerProps): JSX.Element {\n  const {\n    currentMonthLabel,\n    formatLocale,\n    fromDate,\n    onApply,\n    onSelect,\n    showApply,\n    toDate,\n    variant,\n    ...rest\n  } = props;\n  const [month, setMonth] = useState<Date | undefined>(undefined);\n  const [range, setRange] = useState<DateRange | undefined>(undefined);\n  const { radius, spacing } = getTheme({ theme: useTheme() });\n\n  const handleClickSelect: SelectRangeEventHandler = selectedRange => {\n    setRange(selectedRange);\n\n    if (onSelect) {\n      onSelect([\n        selectedRange?.from?.toISOString() || undefined,\n        selectedRange?.to?.toISOString() || undefined,\n      ]);\n    }\n  };\n\n  const handleClickApply = () => {\n    if (onApply) {\n      onApply([range?.from?.toISOString() || undefined, range?.to?.toISOString() || undefined]);\n    }\n  };\n\n  const handleClickReset = () => {\n    setRange({ from: undefined, to: undefined });\n\n    if (onSelect) {\n      onSelect([undefined, undefined]);\n    }\n  };\n\n  const { from, to } = range || {};\n\n  const modifiers = { from: from || false, to: to || false };\n  const content: AnyObject<ReactNode> = {\n    header: <Paragraph>Select the initial date</Paragraph>,\n  };\n\n  if (showApply) {\n    content.footer = getFooter(\n      setMonth,\n      currentMonthLabel,\n      <Spacer>\n        <Button disabled={!from} invert onClick={handleClickReset} size=\"sm\" variant={variant}>\n          Reset\n        </Button>\n        <Button disabled={!to} onClick={handleClickApply} size=\"sm\" variant={variant}>\n          Apply\n        </Button>\n      </Spacer>,\n    );\n  } else {\n    content.footer = getFooter(setMonth, currentMonthLabel);\n    content.reset = (\n      <Button\n        invert\n        onClick={handleClickReset}\n        size=\"sm\"\n        style={{\n          borderRadius: radius.xs,\n          minHeight: 24,\n          padding: `${spacing.xxs} ${spacing.xs}`,\n        }}\n        variant={variant}\n      >\n        Reset\n      </Button>\n    );\n  }\n\n  if (from && to) {\n    content.header = (\n      <Spacer distribution=\"center\">\n        <Text>\n          From {formatDateLocale(from.toISOString(), { locale: formatLocale })} to{' '}\n          {formatDateLocale(to.toISOString(), { locale: formatLocale })}\n        </Text>\n        {content.reset}\n      </Spacer>\n    );\n  } else if (from) {\n    content.header = <Paragraph>Select the final date</Paragraph>;\n  }\n\n  return (\n    <StyledDatePicker\n      data-component-name=\"DatePickerRange\"\n      variant={variant}\n      {...omit(props, 'hidden', 'onSelect')}\n    >\n      <BoxCenter mb=\"md\" minHeight={30}>\n        {content.header}\n      </BoxCenter>\n      <DayPicker\n        mode=\"range\"\n        modifiers={modifiers}\n        month={month}\n        numberOfMonths={getNumberOfMonths(fromDate, toDate)}\n        onMonthChange={setMonth}\n        onSelect={handleClickSelect}\n        selected={range}\n        {...getRange<DayPickerRangeProps>(fromDate, toDate)}\n        {...rest}\n      />\n      {content.footer}\n    </StyledDatePicker>\n  );\n}\n\nDatePickerRange.defaultProps = {\n  ...defaultProps,\n  formatLocale: 'en-US',\n  showApply: false,\n};\n"]},"metadata":{},"sourceType":"module"}