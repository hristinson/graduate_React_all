{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useRef, useState } from 'react';\nimport { css, useTheme } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport { Icon } from './Icon';\nimport { animateIcon, fadeInOut } from './modules/animations';\nimport copy from './modules/copy-text-to-clipboard';\nimport { getTheme } from './modules/helpers';\nimport { baseStyles, getStyledOptions, marginStyles } from './modules/system';\nimport { Tooltip } from './Tooltip';\nconst StyledCopyToClipboard = styled('span', getStyledOptions())(props => {\n  return css`\n    ${baseStyles(props)};\n    cursor: pointer;\n    display: inline-flex;\n    line-height: 1;\n    position: relative;\n    ${marginStyles(props)};\n  `;\n});\nconst StyledIcon = styled(Icon)`\n  transition: transform 0.6s;\n\n  &.will-animate {\n    animation: ${fadeInOut} 0.6s ease-out 1 forwards;\n  }\n\n  &.is-animating {\n    transform: scale(4);\n  }\n`;\nexport function CopyToClipboard(props) {\n  const {\n    disableAnimation = false,\n    icon = 'copy',\n    onCopy,\n    size = 16,\n    text,\n    tooltipCopiedText = 'Copied!',\n    tooltipText = 'Copy',\n    ...rest\n  } = props;\n  const [content, setContent] = useState(tooltipText);\n  const isActive = useRef(false);\n  const theme = getTheme({\n    theme: useTheme()\n  });\n  useEffect(() => {\n    isActive.current = true;\n    return () => {\n      isActive.current = false;\n    };\n  }, []);\n\n  const handleClick = event => {\n    if (!disableAnimation) {\n      animateIcon(event.currentTarget, 'primary', theme);\n    }\n\n    copy(text);\n    setContent(tooltipCopiedText);\n    setTimeout(() => {\n      if (isActive.current) {\n        setContent(tooltipText);\n      }\n    }, 2000);\n  };\n\n  return _jsx(StyledCopyToClipboard, {\n    \"data-component-name\": \"CopyToClipboard\",\n    onClick: handleClick,\n    ...rest,\n    children: _jsx(Tooltip, {\n      content: content,\n      position: \"right\",\n      size: \"small\",\n      children: _jsx(StyledIcon, {\n        name: icon,\n        size: size,\n        title: null\n      })\n    })\n  });\n}\nCopyToClipboard.defaultProps = {\n  disableAnimation: false,\n  icon: 'copy',\n  size: 16,\n  tooltipCopiedText: 'Copied!',\n  tooltipText: 'Copy'\n};","map":{"version":3,"mappings":";AAAA,SAAqBA,SAArB,EAAgCC,MAAhC,EAAwCC,QAAxC,QAAwD,OAAxD;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAEA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,WAAT,EAAsBC,SAAtB,QAAuC,sBAAvC;AACA,OAAOC,IAAP,MAAiB,kCAAjB;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,SAASC,UAAT,EAAqBC,gBAArB,EAAuCC,YAAvC,QAA2D,kBAA3D;AACA,SAASC,OAAT,QAAwB,WAAxB;AAiBA,MAAMC,qBAAqB,GAAGV,MAAM,CAClC,MADkC,EAElCO,gBAAgB,EAFkB,CAAN,CAGQI,KAAK,IAAG;EAC5C,OAAOb,GAAG;MACNQ,UAAU,CAACK,KAAD,CAAO;;;;;MAKjBH,YAAY,CAACG,KAAD,CAAO;GANvB;AAQD,CAZ6B,CAA9B;AAcA,MAAMC,UAAU,GAAGZ,MAAM,CAACC,IAAD,CAAM;;;;iBAIdE,SAAS;;;;;;CAJ1B;AAYA,OAAM,SAAUU,eAAV,CAA0BF,KAA1B,EAAqD;EACzD,MAAM;IACJG,gBAAgB,GAAG,KADf;IAEJC,IAAI,GAAG,MAFH;IAGJC,MAHI;IAIJC,IAAI,GAAG,EAJH;IAKJC,IALI;IAMJC,iBAAiB,GAAG,SANhB;IAOJC,WAAW,GAAG,MAPV;IAQJ,GAAGC;EARC,IASFV,KATJ;EAUA,MAAM,CAACW,OAAD,EAAUC,UAAV,IAAwB1B,QAAQ,CAACuB,WAAD,CAAtC;EACA,MAAMI,QAAQ,GAAG5B,MAAM,CAAC,KAAD,CAAvB;EACA,MAAM6B,KAAK,GAAGpB,QAAQ,CAAC;IAAEoB,KAAK,EAAE1B,QAAQ;EAAjB,CAAD,CAAtB;EAEAJ,SAAS,CAAC,MAAK;IACb6B,QAAQ,CAACE,OAAT,GAAmB,IAAnB;IAEA,OAAO,MAAK;MACVF,QAAQ,CAACE,OAAT,GAAmB,KAAnB;IACD,CAFD;EAGD,CANQ,EAMN,EANM,CAAT;;EAQA,MAAMC,WAAW,GAAIC,KAAD,IAAuC;IACzD,IAAI,CAACd,gBAAL,EAAuB;MACrBZ,WAAW,CAAC0B,KAAK,CAACC,aAAP,EAAsB,SAAtB,EAAiCJ,KAAjC,CAAX;IACD;;IAEDrB,IAAI,CAACc,IAAD,CAAJ;IAEAK,UAAU,CAACJ,iBAAD,CAAV;IAEAW,UAAU,CAAC,MAAK;MACd,IAAIN,QAAQ,CAACE,OAAb,EAAsB;QACpBH,UAAU,CAACH,WAAD,CAAV;MACD;IACF,CAJS,EAIP,IAJO,CAAV;EAKD,CAdD;;EAgBA,OACEW,KAACrB,qBAAD,EAAsB;IAAA,uBAAqB,iBAArB;IAAuCsB,OAAO,EAAEL,WAAhD;IAA2D,GAAMN,IAAjE;IAAqEY,UACzFF,KAACtB,OAAD,EAAQ;MAACa,OAAO,EAAEA,OAAV;MAAmBY,QAAQ,EAAC,OAA5B;MAAoCjB,IAAI,EAAC,OAAzC;MAAgDgB,UACtDF,KAACnB,UAAD,EAAW;QAACuB,IAAI,EAAEpB,IAAP;QAAaE,IAAI,EAAEA,IAAnB;QAAyBmB,KAAK,EAAE;MAAhC,CAAX;IADM,CAAR;EADoB,CAAtB,CADF;AAOD;AAEDvB,eAAe,CAACwB,YAAhB,GAA+B;EAC7BvB,gBAAgB,EAAE,KADW;EAE7BC,IAAI,EAAE,MAFuB;EAG7BE,IAAI,EAAE,EAHuB;EAI7BE,iBAAiB,EAAE,SAJU;EAK7BC,WAAW,EAAE;AALgB,CAA/B","names":["useEffect","useRef","useState","css","useTheme","styled","Icon","animateIcon","fadeInOut","copy","getTheme","baseStyles","getStyledOptions","marginStyles","Tooltip","StyledCopyToClipboard","props","StyledIcon","CopyToClipboard","disableAnimation","icon","onCopy","size","text","tooltipCopiedText","tooltipText","rest","content","setContent","isActive","theme","current","handleClick","event","currentTarget","setTimeout","_jsx","onClick","children","position","name","title","defaultProps"],"sources":["/My_WORK/graduate_React/frontend/node_modules/@gilbarbara/components/src/CopyToClipboard.tsx"],"sourcesContent":["import { MouseEvent, useEffect, useRef, useState } from 'react';\nimport { css, useTheme } from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport { Icon } from './Icon';\nimport { animateIcon, fadeInOut } from './modules/animations';\nimport copy from './modules/copy-text-to-clipboard';\nimport { getTheme } from './modules/helpers';\nimport { baseStyles, getStyledOptions, marginStyles } from './modules/system';\nimport { Tooltip } from './Tooltip';\nimport { Icons, WithMargin } from './types';\n\nexport interface CopyToClipboardProps extends WithMargin {\n  disableAnimation?: boolean;\n  /** @default copy */\n  icon?: Icons;\n  onCopy?: (text: string) => void;\n  /** @default 16 */\n  size?: number;\n  text: string;\n  /** @default Copied */\n  tooltipCopiedText?: string;\n  /** @default Copy */\n  tooltipText?: string;\n}\n\nconst StyledCopyToClipboard = styled(\n  'span',\n  getStyledOptions(),\n)<Omit<CopyToClipboardProps, 'text'>>(props => {\n  return css`\n    ${baseStyles(props)};\n    cursor: pointer;\n    display: inline-flex;\n    line-height: 1;\n    position: relative;\n    ${marginStyles(props)};\n  `;\n});\n\nconst StyledIcon = styled(Icon)`\n  transition: transform 0.6s;\n\n  &.will-animate {\n    animation: ${fadeInOut} 0.6s ease-out 1 forwards;\n  }\n\n  &.is-animating {\n    transform: scale(4);\n  }\n`;\n\nexport function CopyToClipboard(props: CopyToClipboardProps) {\n  const {\n    disableAnimation = false,\n    icon = 'copy',\n    onCopy,\n    size = 16,\n    text,\n    tooltipCopiedText = 'Copied!',\n    tooltipText = 'Copy',\n    ...rest\n  } = props;\n  const [content, setContent] = useState(tooltipText);\n  const isActive = useRef(false);\n  const theme = getTheme({ theme: useTheme() });\n\n  useEffect(() => {\n    isActive.current = true;\n\n    return () => {\n      isActive.current = false;\n    };\n  }, []);\n\n  const handleClick = (event: MouseEvent<HTMLSpanElement>) => {\n    if (!disableAnimation) {\n      animateIcon(event.currentTarget, 'primary', theme);\n    }\n\n    copy(text);\n\n    setContent(tooltipCopiedText);\n\n    setTimeout(() => {\n      if (isActive.current) {\n        setContent(tooltipText);\n      }\n    }, 2000);\n  };\n\n  return (\n    <StyledCopyToClipboard data-component-name=\"CopyToClipboard\" onClick={handleClick} {...rest}>\n      <Tooltip content={content} position=\"right\" size=\"small\">\n        <StyledIcon name={icon} size={size} title={null} />\n      </Tooltip>\n    </StyledCopyToClipboard>\n  );\n}\n\nCopyToClipboard.defaultProps = {\n  disableAnimation: false,\n  icon: 'copy',\n  size: 16,\n  tooltipCopiedText: 'Copied!',\n  tooltipText: 'Copy',\n};\n"]},"metadata":{},"sourceType":"module"}