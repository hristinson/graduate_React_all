{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { FormProvider, useForm } from 'react-hook-form';\n/**\n A wrapper for the `react-hook-form` FormProvider for use with the **Field** component.\n\n It will execute the `children` with the `formMethods` from the `useForm` hook as props. You can use it inline or with a functional component.\n\n ```tsx\n import { Box, Button, Field, Form, FormProps, FormSubmitHandler } from '@gilbarbara/components';\n\n interface FormData {\n   name: string;\n }\n\n function EditFormFn({ formMethods }: FormProps<FormData>) {\n   const { formState: { isDirty }, handleSubmit, } = formMethods;\n\n   const handleFormSubmit: SubmitHandler<FormData> = formData => {\n     console.log(formData);\n   };\n\n   return (\n     <Box as=\"form\" method=\"POST\" onSubmit={handleSubmit(handleFormSubmit)}>\n       <Field label=\"Name\" name=\"name\" placeholder=\"Your name\" required type=\"text\" />\n\n       <Button disabled={!isDirty} type=\"submit\">\n         Send\n       </Button>\n     </Box>\n   );\n }\n\n export default function EditForm() {\n   return <Form defaultValues={{ name: 'Test User' }}>{EditFormFn}</Form>;\n }\n ```\n */\n\nexport function Form(_ref) {\n  let {\n    children,\n    ...props\n  } = _ref;\n  const formMethods = useForm({\n    mode: 'onChange',\n    ...props\n  });\n  return _jsx(FormProvider, {\n    \"data-component-name\": \"Form\",\n    ...formMethods,\n    children: children({\n      formMethods\n    })\n  });\n}","map":{"version":3,"mappings":";AAAA,SAAsBA,YAAtB,EAAoCC,OAApC,QAAgF,iBAAhF;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,OAAM,SAAUC,IAAV,OAGK;EAAA,IAH2C;IACpDC,QADoD;IAEpD,GAAGC;EAFiD,CAG3C;EACT,MAAMC,WAAW,GAAGJ,OAAO,CAAI;IAC7BK,IAAI,EAAE,UADuB;IAE7B,GAAGF;EAF0B,CAAJ,CAA3B;EAKA,OACEG,KAACP,YAAD,EAAa;IAAA,uBAAqB,MAArB;IAA2B,GAAKK,WAAhC;IAA2CF,UACrDA,QAAQ,CAAC;MAAEE;IAAF,CAAD;EADE,CAAb,CADF;AAKD","names":["FormProvider","useForm","Form","children","props","formMethods","mode","_jsx"],"sources":["/My_WORK/graduate_React/frontend/node_modules/@gilbarbara/components/src/Form.tsx"],"sourcesContent":["import { FieldValues, FormProvider, useForm, UseFormProps, UseFormReturn } from 'react-hook-form';\nimport { AnyObject } from '@gilbarbara/types';\n\nexport interface FormProps<T extends FieldValues = FieldValues> {\n  formMethods: UseFormReturn<T>;\n}\n\ninterface Props<T extends FieldValues> extends UseFormProps<T> {\n  children: (props: FormProps<T>) => JSX.Element;\n}\n\n/**\n A wrapper for the `react-hook-form` FormProvider for use with the **Field** component.\n\n It will execute the `children` with the `formMethods` from the `useForm` hook as props. You can use it inline or with a functional component.\n\n ```tsx\n import { Box, Button, Field, Form, FormProps, FormSubmitHandler } from '@gilbarbara/components';\n\n interface FormData {\n   name: string;\n }\n\n function EditFormFn({ formMethods }: FormProps<FormData>) {\n   const { formState: { isDirty }, handleSubmit, } = formMethods;\n\n   const handleFormSubmit: SubmitHandler<FormData> = formData => {\n     console.log(formData);\n   };\n\n   return (\n     <Box as=\"form\" method=\"POST\" onSubmit={handleSubmit(handleFormSubmit)}>\n       <Field label=\"Name\" name=\"name\" placeholder=\"Your name\" required type=\"text\" />\n\n       <Button disabled={!isDirty} type=\"submit\">\n         Send\n       </Button>\n     </Box>\n   );\n }\n\n export default function EditForm() {\n   return <Form defaultValues={{ name: 'Test User' }}>{EditFormFn}</Form>;\n }\n ```\n */\nexport function Form<T extends AnyObject = AnyObject>({\n  children,\n  ...props\n}: Props<T>): JSX.Element {\n  const formMethods = useForm<T>({\n    mode: 'onChange',\n    ...props,\n  });\n\n  return (\n    <FormProvider data-component-name=\"Form\" {...formMethods}>\n      {children({ formMethods })}\n    </FormProvider>\n  );\n}\n\nexport { SubmitHandler as FormSubmitHandler } from 'react-hook-form';\n"]},"metadata":{},"sourceType":"module"}