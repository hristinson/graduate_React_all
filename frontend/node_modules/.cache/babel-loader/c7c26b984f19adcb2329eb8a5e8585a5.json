{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport { css } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport { px } from './modules/helpers';\nimport { backgroundStyles, baseStyles, borderStyles, displayStyles, flexItemStyles, getStyledOptions, layoutStyles, marginStyles, paddingStyles, positioningStyles, radiusStyles, shadowStyles } from './modules/system';\nexport const StyledGrid = styled('div', getStyledOptions())(props => {\n  const {\n    alignContent,\n    alignItems,\n    autoColumns,\n    autoFlow,\n    autoRows,\n    columnGap,\n    gap,\n    grid,\n    justifyContent,\n    justifyItems,\n    placeContent,\n    placeItems,\n    rowGap,\n    template,\n    templateAreas,\n    templateColumns,\n    templateRows\n  } = props;\n  return css`\n    align-content: ${alignContent};\n    align-items: ${alignItems};\n    column-gap: ${columnGap && px(columnGap)};\n    gap: ${gap && px(gap)};\n    grid-auto-columns: ${autoColumns};\n    grid-auto-flow: ${autoFlow};\n    grid-auto-rows: ${autoRows};\n    grid-template-areas: ${templateAreas};\n    grid-template-columns: ${templateColumns};\n    grid-template-rows: ${templateRows};\n    grid-template: ${template};\n    grid: ${grid};\n    justify-content: ${justifyContent};\n    justify-items: ${justifyItems};\n    place-content: ${placeContent};\n    place-items: ${placeItems};\n    row-gap: ${rowGap && px(rowGap)};\n\n    ${baseStyles(props)};\n    ${backgroundStyles(props, false)};\n    ${borderStyles(props)};\n    ${displayStyles(props)};\n    ${flexItemStyles(props)};\n    ${layoutStyles(props)};\n    ${marginStyles(props)};\n    ${paddingStyles(props)};\n    ${positioningStyles(props)};\n    ${radiusStyles(props)};\n    ${shadowStyles(props)};\n  `;\n});\nexport const Grid = forwardRef((props, ref) => _jsx(StyledGrid, {\n  ref: ref,\n  \"data-component-name\": \"Grid\",\n  ...props\n}));\nGrid.defaultProps = {\n  display: 'grid'\n};","map":{"version":3,"mappings":";AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,GAAT,QAAoB,gBAApB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAIA,SAASC,EAAT,QAAmB,mBAAnB;AACA,SACEC,gBADF,EAEEC,UAFF,EAGEC,YAHF,EAIEC,aAJF,EAKEC,cALF,EAMEC,gBANF,EAOEC,YAPF,EAQEC,YARF,EASEC,aATF,EAUEC,iBAVF,EAWEC,YAXF,EAYEC,YAZF,QAaO,kBAbP;AA+DA,OAAO,MAAMC,UAAU,GAAGd,MAAM,CAC9B,KAD8B,EAE9BO,gBAAgB,EAFc,CAAN,CAGbQ,KAAK,IAAG;EACnB,MAAM;IACJC,YADI;IAEJC,UAFI;IAGJC,WAHI;IAIJC,QAJI;IAKJC,QALI;IAMJC,SANI;IAOJC,GAPI;IAQJC,IARI;IASJC,cATI;IAUJC,YAVI;IAWJC,YAXI;IAYJC,UAZI;IAaJC,MAbI;IAcJC,QAdI;IAeJC,aAfI;IAgBJC,eAhBI;IAiBJC;EAjBI,IAkBFjB,KAlBJ;EAoBA,OAAOhB,GAAG;qBACSiB,YAAY;mBACdC,UAAU;kBACXI,SAAS,IAAIpB,EAAE,CAACoB,SAAD,CAAW;WACjCC,GAAG,IAAIrB,EAAE,CAACqB,GAAD,CAAK;yBACAJ,WAAW;sBACdC,QAAQ;sBACRC,QAAQ;2BACHU,aAAa;6BACXC,eAAe;0BAClBC,YAAY;qBACjBH,QAAQ;YACjBN,IAAI;uBACOC,cAAc;qBAChBC,YAAY;qBACZC,YAAY;mBACdC,UAAU;eACdC,MAAM,IAAI3B,EAAE,CAAC2B,MAAD,CAAQ;;MAE7BzB,UAAU,CAACY,KAAD,CAAO;MACjBb,gBAAgB,CAACa,KAAD,EAAQ,KAAR,CAAc;MAC9BX,YAAY,CAACW,KAAD,CAAO;MACnBV,aAAa,CAACU,KAAD,CAAO;MACpBT,cAAc,CAACS,KAAD,CAAO;MACrBP,YAAY,CAACO,KAAD,CAAO;MACnBN,YAAY,CAACM,KAAD,CAAO;MACnBL,aAAa,CAACK,KAAD,CAAO;MACpBJ,iBAAiB,CAACI,KAAD,CAAO;MACxBH,YAAY,CAACG,KAAD,CAAO;MACnBF,YAAY,CAACE,KAAD,CAAO;GA7BvB;AA+BD,CAvDyB,CAAnB;AAyDP,OAAO,MAAMkB,IAAI,GAAGnC,UAAU,CAA4B,CAACiB,KAAD,EAAQmB,GAAR,KACxDC,KAACrB,UAAD,EAAW;EAACoB,GAAG,EAAEA,GAAN;EAAS,uBAAsB,MAA/B;EAAqC,GAAKnB;AAA1C,CAAX,CAD4B,CAAvB;AAIPkB,IAAI,CAACG,YAAL,GAAoB;EAClBC,OAAO,EAAE;AADS,CAApB","names":["forwardRef","css","styled","px","backgroundStyles","baseStyles","borderStyles","displayStyles","flexItemStyles","getStyledOptions","layoutStyles","marginStyles","paddingStyles","positioningStyles","radiusStyles","shadowStyles","StyledGrid","props","alignContent","alignItems","autoColumns","autoFlow","autoRows","columnGap","gap","grid","justifyContent","justifyItems","placeContent","placeItems","rowGap","template","templateAreas","templateColumns","templateRows","Grid","ref","_jsx","defaultProps","display"],"sources":["/My_WORK/graduate_React/frontend/node_modules/@gilbarbara/components/src/Grid.tsx"],"sourcesContent":["import { forwardRef } from 'react';\nimport { css } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport { StringOrNumber } from '@gilbarbara/types';\nimport { StandardLonghandProperties, StandardShorthandProperties } from 'csstype';\n\nimport { px } from './modules/helpers';\nimport {\n  backgroundStyles,\n  baseStyles,\n  borderStyles,\n  displayStyles,\n  flexItemStyles,\n  getStyledOptions,\n  layoutStyles,\n  marginStyles,\n  paddingStyles,\n  positioningStyles,\n  radiusStyles,\n  shadowStyles,\n} from './modules/system';\nimport {\n  ComponentProps,\n  StyledProps,\n  WithBorder,\n  WithChildren,\n  WithColor,\n  WithFlexItem,\n  WithLayout,\n  WithMargin,\n  WithPadding,\n  WithPositioning,\n  WithRadius,\n  WithShadow,\n} from './types';\n\nexport interface GridKnownProps\n  extends StyledProps,\n    WithBorder,\n    WithChildren,\n    WithColor,\n    WithFlexItem,\n    WithLayout,\n    WithMargin,\n    WithPadding,\n    WithPositioning,\n    WithRadius,\n    WithShadow {\n  alignContent?: StandardLonghandProperties['alignContent'];\n  alignItems?: StandardLonghandProperties['alignItems'];\n  autoColumns?: StandardLonghandProperties['gridAutoColumns'];\n  autoFlow?: StandardLonghandProperties['gridAutoFlow'];\n  autoRows?: StandardLonghandProperties['gridAutoRows'];\n  columnGap?: StringOrNumber;\n  display?: 'grid' | 'inline-grid';\n  gap?: StringOrNumber;\n  grid?: StandardShorthandProperties['grid'];\n  justifyContent?: StandardLonghandProperties['justifyContent'];\n  justifyItems?: StandardLonghandProperties['justifyItems'];\n  placeContent?: StandardLonghandProperties['placeContent'];\n  placeItems?: StandardShorthandProperties['placeItems'];\n  rowGap?: StringOrNumber;\n  template?: StandardShorthandProperties['gridTemplate'];\n  templateAreas?: StandardLonghandProperties['gridTemplateAreas'];\n  templateColumns?: StandardLonghandProperties['gridTemplateColumns'];\n  templateRows?: StandardLonghandProperties['gridTemplateRows'];\n}\n\nexport type GridProps = ComponentProps<HTMLDivElement, GridKnownProps>;\n\nexport const StyledGrid = styled(\n  'div',\n  getStyledOptions(),\n)<GridProps>(props => {\n  const {\n    alignContent,\n    alignItems,\n    autoColumns,\n    autoFlow,\n    autoRows,\n    columnGap,\n    gap,\n    grid,\n    justifyContent,\n    justifyItems,\n    placeContent,\n    placeItems,\n    rowGap,\n    template,\n    templateAreas,\n    templateColumns,\n    templateRows,\n  } = props;\n\n  return css`\n    align-content: ${alignContent};\n    align-items: ${alignItems};\n    column-gap: ${columnGap && px(columnGap)};\n    gap: ${gap && px(gap)};\n    grid-auto-columns: ${autoColumns};\n    grid-auto-flow: ${autoFlow};\n    grid-auto-rows: ${autoRows};\n    grid-template-areas: ${templateAreas};\n    grid-template-columns: ${templateColumns};\n    grid-template-rows: ${templateRows};\n    grid-template: ${template};\n    grid: ${grid};\n    justify-content: ${justifyContent};\n    justify-items: ${justifyItems};\n    place-content: ${placeContent};\n    place-items: ${placeItems};\n    row-gap: ${rowGap && px(rowGap)};\n\n    ${baseStyles(props)};\n    ${backgroundStyles(props, false)};\n    ${borderStyles(props)};\n    ${displayStyles(props)};\n    ${flexItemStyles(props)};\n    ${layoutStyles(props)};\n    ${marginStyles(props)};\n    ${paddingStyles(props)};\n    ${positioningStyles(props)};\n    ${radiusStyles(props)};\n    ${shadowStyles(props)};\n  `;\n});\n\nexport const Grid = forwardRef<HTMLDivElement, GridProps>((props, ref) => (\n  <StyledGrid ref={ref} data-component-name=\"Grid\" {...props} />\n));\n\nGrid.defaultProps = {\n  display: 'grid',\n};\n"]},"metadata":{},"sourceType":"module"}