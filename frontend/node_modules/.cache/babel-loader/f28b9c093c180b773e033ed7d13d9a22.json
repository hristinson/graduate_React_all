{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport { css } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport is from 'is-lite';\nimport { getColorVariant, getTheme } from './modules/helpers';\nimport { baseStyles, borderStyles, flexItemStyles, getStyledOptions, layoutStyles, marginStyles, radiusStyles, shadowStyles } from './modules/system';\n\nfunction getSpacing(size, spacing) {\n  switch (size) {\n    case 'sm':\n      {\n        return [spacing.xs, spacing.sm];\n      }\n\n    case 'lg':\n      {\n        return [spacing.md, spacing.lg];\n      }\n\n    default:\n      {\n        return [spacing.sm, spacing.md];\n      }\n  }\n}\n\nexport const StyledList = styled('ul', getStyledOptions())(props => {\n  const {\n    border,\n    direction,\n    shade,\n    variant\n  } = props;\n  const borderProps = { ...props\n  };\n\n  if (border === true && (shade !== 'lighter' || variant !== 'gray')) {\n    borderProps.border = [{\n      side: 'all',\n      shade,\n      variant\n    }];\n  }\n\n  return css`\n    ${baseStyles(props)};\n    display: flex;\n    flex-direction: ${direction === 'horizontal' ? 'row' : 'column'};\n    list-style-position: inside;\n    list-style-type: none;\n    margin: 0;\n    overflow: hidden;\n    padding: 0;\n    ${borderStyles(borderProps)};\n    ${flexItemStyles(props)};\n    ${layoutStyles(props)};\n    ${marginStyles(props)};\n    ${radiusStyles(props)};\n    ${shadowStyles(props)};\n  `;\n});\nexport const StyledListItem = styled('li', getStyledOptions())(props => {\n  const {\n    black,\n    spacing,\n    variants,\n    white\n  } = getTheme(props);\n  const {\n    border,\n    direction,\n    itemShade,\n    itemVariant,\n    shade = 'lighter',\n    size,\n    split,\n    variant = 'gray'\n  } = props;\n  const [spacerMain, spacerCross] = getSpacing(size, spacing);\n  let bgColor = white;\n  let itemColor = black;\n  let {\n    bg: borderColor\n  } = getColorVariant(variant, shade, variants);\n\n  if (itemVariant) {\n    const {\n      bg,\n      color\n    } = getColorVariant(itemVariant, itemShade, variants);\n    bgColor = bg;\n    borderColor = bg;\n    itemColor = color;\n  }\n\n  return css`\n    background-color: ${bgColor};\n    color: ${itemColor};\n\n    ${direction === 'vertical' && css`\n      border-bottom: ${split ? `1px solid ${borderColor}` : undefined};\n      padding: ${spacerMain} ${border ? spacerCross : 0};\n\n      &:last-of-type {\n        border-bottom: none;\n      }\n    `};\n\n    ${direction === 'horizontal' && css`\n      border-right: ${split ? `1px solid ${borderColor}` : undefined};\n      padding: ${border ? spacerMain : 0} ${spacerCross};\n\n      &:last-of-type {\n        border-right: none;\n      }\n    `};\n  `;\n});\n\nfunction isListItem(item) {\n  return is.plainObject(item) && 'content' in item;\n}\n\nexport const List = forwardRef((props, ref) => {\n  const {\n    border = true,\n    direction = 'vertical',\n    items,\n    shade = 'lighter',\n    size = 'md',\n    split = true,\n    variant = 'gray'\n  } = props;\n\n  if (!items.length) {\n    return null;\n  }\n\n  return _jsx(StyledList, {\n    ref: ref,\n    \"data-component-name\": \"List\",\n    ...props,\n    children: items.map((item, index) => {\n      const key = `ListItem-${index}`;\n      let content;\n      let itemShade;\n      let itemVariant;\n\n      if (isListItem(item)) {\n        content = item.content;\n        itemShade = item.shade;\n        itemVariant = item.variant;\n      } else {\n        content = item;\n      }\n\n      return _jsx(StyledListItem, {\n        border: border,\n        direction: direction,\n        itemShade: itemShade,\n        itemVariant: itemVariant,\n        shade: shade,\n        size: size,\n        split: split,\n        variant: variant,\n        children: content\n      }, key);\n    })\n  });\n});\nList.defaultProps = {\n  border: true,\n  direction: 'vertical',\n  radius: 'xs',\n  shade: 'lighter',\n  shadow: false,\n  size: 'md',\n  split: true,\n  variant: 'gray'\n};","map":{"version":3,"mappings":"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","names":["forwardRef","css","styled","is","getColorVariant","getTheme","baseStyles","borderStyles","flexItemStyles","getStyledOptions","layoutStyles","marginStyles","radiusStyles","shadowStyles","getSpacing","size","spacing","xs","sm","md","lg","StyledList","props","border","direction","shade","variant","borderProps","side","StyledListItem","black","variants","white","itemShade","itemVariant","split","spacerMain","spacerCross","bgColor","itemColor","bg","borderColor","color","undefined","isListItem","item","plainObject","List","ref","items","length","_jsx","children","map","index","key","content","defaultProps","radius","shadow"],"sources":["/My_WORK/graduate_React/frontend/node_modules/@gilbarbara/components/src/List.tsx"],"sourcesContent":["import { forwardRef, ReactNode } from 'react';\nimport { css } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport is from 'is-lite';\n\nimport { getColorVariant, getTheme } from './modules/helpers';\nimport {\n  baseStyles,\n  borderStyles,\n  flexItemStyles,\n  getStyledOptions,\n  layoutStyles,\n  marginStyles,\n  radiusStyles,\n  shadowStyles,\n} from './modules/system';\nimport {\n  ComponentProps,\n  Direction,\n  ListItem,\n  Shades,\n  StyledProps,\n  Theme,\n  Variants,\n  WithBorder,\n  WithColor,\n  WithFlexItem,\n  WithLayout,\n  WithMargin,\n  WithRadius,\n  WithShadow,\n} from './types';\n\nexport interface ListKnownProps\n  extends StyledProps,\n    WithBorder,\n    WithColor,\n    WithFlexItem,\n    WithLayout,\n    WithMargin,\n    WithRadius,\n    WithShadow {\n  /** @default vertical */\n  direction?: Direction;\n  items: (ListItem | ReactNode)[];\n  /** @default md */\n  size?: 'sm' | 'md' | 'lg';\n  /** @default true */\n  split?: boolean;\n}\n\nexport type ListProps = ComponentProps<HTMLUListElement, ListKnownProps>;\n\nfunction getSpacing(size: Required<ListProps['size']>, spacing: Theme['spacing']) {\n  switch (size) {\n    case 'sm': {\n      return [spacing.xs, spacing.sm];\n    }\n    case 'lg': {\n      return [spacing.md, spacing.lg];\n    }\n    default: {\n      return [spacing.sm, spacing.md];\n    }\n  }\n}\n\nexport const StyledList = styled(\n  'ul',\n  getStyledOptions(),\n)<ListProps>(props => {\n  const { border, direction, shade, variant } = props;\n\n  const borderProps = { ...props };\n\n  if (border === true && (shade !== 'lighter' || variant !== 'gray')) {\n    borderProps.border = [{ side: 'all', shade, variant }];\n  }\n\n  return css`\n    ${baseStyles(props)};\n    display: flex;\n    flex-direction: ${direction === 'horizontal' ? 'row' : 'column'};\n    list-style-position: inside;\n    list-style-type: none;\n    margin: 0;\n    overflow: hidden;\n    padding: 0;\n    ${borderStyles(borderProps)};\n    ${flexItemStyles(props)};\n    ${layoutStyles(props)};\n    ${marginStyles(props)};\n    ${radiusStyles(props)};\n    ${shadowStyles(props)};\n  `;\n});\n\nexport const StyledListItem = styled(\n  'li',\n  getStyledOptions(),\n)<\n  Required<Pick<ListProps, 'border' | 'direction' | 'shade' | 'size' | 'split' | 'variant'>> & {\n    itemShade?: Shades;\n    itemVariant?: Variants;\n  }\n>(props => {\n  const { black, spacing, variants, white } = getTheme(props);\n  const {\n    border,\n    direction,\n    itemShade,\n    itemVariant,\n    shade = 'lighter',\n    size,\n    split,\n    variant = 'gray',\n  } = props;\n  const [spacerMain, spacerCross] = getSpacing(size, spacing);\n  let bgColor = white;\n  let itemColor = black;\n  let { bg: borderColor } = getColorVariant(variant, shade, variants);\n\n  if (itemVariant) {\n    const { bg, color } = getColorVariant(itemVariant, itemShade, variants);\n\n    bgColor = bg;\n    borderColor = bg;\n    itemColor = color;\n  }\n\n  return css`\n    background-color: ${bgColor};\n    color: ${itemColor};\n\n    ${direction === 'vertical' &&\n    css`\n      border-bottom: ${split ? `1px solid ${borderColor}` : undefined};\n      padding: ${spacerMain} ${border ? spacerCross : 0};\n\n      &:last-of-type {\n        border-bottom: none;\n      }\n    `};\n\n    ${direction === 'horizontal' &&\n    css`\n      border-right: ${split ? `1px solid ${borderColor}` : undefined};\n      padding: ${border ? spacerMain : 0} ${spacerCross};\n\n      &:last-of-type {\n        border-right: none;\n      }\n    `};\n  `;\n});\n\nfunction isListItem(item: unknown): item is ListItem {\n  return is.plainObject(item) && 'content' in item;\n}\n\nexport const List = forwardRef<HTMLUListElement, ListProps>((props, ref) => {\n  const {\n    border = true,\n    direction = 'vertical',\n    items,\n    shade = 'lighter',\n    size = 'md',\n    split = true,\n    variant = 'gray',\n  } = props;\n\n  if (!items.length) {\n    return null;\n  }\n\n  return (\n    <StyledList ref={ref} data-component-name=\"List\" {...props}>\n      {items.map((item, index) => {\n        const key = `ListItem-${index}`;\n        let content;\n        let itemShade: Shades | undefined;\n        let itemVariant: Variants | undefined;\n\n        if (isListItem(item)) {\n          content = (item as ListItem).content;\n          itemShade = item.shade;\n          itemVariant = item.variant;\n        } else {\n          content = item;\n        }\n\n        return (\n          <StyledListItem\n            key={key}\n            border={border}\n            direction={direction}\n            itemShade={itemShade}\n            itemVariant={itemVariant}\n            shade={shade}\n            size={size}\n            split={split}\n            variant={variant}\n          >\n            {content}\n          </StyledListItem>\n        );\n      })}\n    </StyledList>\n  );\n});\n\nList.defaultProps = {\n  border: true,\n  direction: 'vertical',\n  radius: 'xs',\n  shade: 'lighter',\n  shadow: false,\n  size: 'md',\n  split: true,\n  variant: 'gray',\n};\n"]},"metadata":{},"sourceType":"module"}