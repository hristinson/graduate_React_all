{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { css, useTheme } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport ReactDropdown from '@gilbarbara/react-dropdown';\nimport Content from './Content';\nimport Items from './Items';\nimport { getColorVariant, getTheme, px } from '../modules/helpers';\nimport { getStyledOptions, isDarkMode, marginStyles } from '../modules/system';\nexport const StyledDropdown = styled('div', getStyledOptions('placeholder', 'onSearch'))(props => {\n  const {\n    borderless,\n    isFilled,\n    multi,\n    shade,\n    variant = 'primary',\n    width\n  } = props;\n  const {\n    grayDark,\n    grayDarker,\n    grayMid,\n    radius,\n    spacing,\n    variants,\n    white\n  } = getTheme(props);\n  const {\n    bg\n  } = getColorVariant(variant, shade, variants);\n  const darkMode = isDarkMode(props);\n  let borderColor = darkMode ? grayDark : grayMid;\n\n  if (isFilled) {\n    borderColor = bg;\n  }\n\n  const styles = borderless ? css`\n        border: 0 !important;\n        border-bottom: 1px solid ${borderColor} !important;\n        border-radius: 0 !important;\n        padding: 0 !important;\n      ` : css`\n        background-color: ${darkMode ? grayDarker : white};\n        border: 1px solid ${borderColor};\n        border-radius: ${radius.xs};\n        padding-left: ${multi ? 0 : spacing.xs} !important;\n      `;\n  return css`\n    min-width: ${px(width || 260)};\n    width: ${px(width) || 'auto'};\n    ${marginStyles(props)};\n\n    .react-dropdown {\n      ${styles};\n\n      &:focus,\n      &:focus-within {\n        border-color: ${bg} !important;\n        box-shadow: ${borderless ? 'none' : `0 0 8px 1px ${bg}`} !important;\n\n        .react-dropdown-separator {\n          background-color: ${bg};\n        }\n      }\n\n      &[disabled] {\n        opacity: 1 !important;\n\n        .react-dropdown-content {\n          color: ${grayMid};\n        }\n      }\n\n      &-clear {\n        &:hover {\n          color: ${variants.red.mid.bg};\n        }\n      }\n\n      &-content {\n        align-items: center;\n        width: calc(100% - 16px);\n\n        span {\n          max-width: 100%;\n\n          + input {\n            margin-left: 5px;\n          }\n        }\n      }\n\n      &-menu {\n        border: 0 !important;\n        border-radius: ${radius.xs};\n        overflow: hidden;\n        width: 100% !important;\n        z-index: 100;\n\n        &:empty {\n          display: none;\n        }\n      }\n\n      &-loading {\n        padding: 0 ${spacing.xs};\n\n        &:after {\n          margin: 0;\n        }\n      }\n\n      &-separator {\n        background-color: ${borderColor};\n      }\n    }\n  `;\n});\n\nfunction getDropdownComponent(props) {\n  return function DropdownRenderer(renderer) {\n    return _jsx(Items, { ...renderer,\n      ...props\n    });\n  };\n}\n\nexport function Dropdown(props) {\n  const {\n    allowCreate,\n    closeMultiOnSelect,\n    inputOptions,\n    menuMaxHeight = 260,\n    items,\n    large,\n    onClear,\n    onChange,\n    open,\n    showClearButton,\n    values = [],\n    ...rest\n  } = props;\n  const [isFilled, setFilled] = useState(!!values.length);\n  const {\n    inputHeight,\n    variants\n  } = getTheme({\n    theme: useTheme()\n  });\n  const {\n    bg\n  } = getColorVariant(rest.variant || 'primary', rest.shade, variants);\n\n  const handleChange = value => {\n    setFilled(!!value.length);\n\n    if (onChange) {\n      onChange(value);\n    }\n  };\n\n  return _jsx(StyledDropdown, {\n    \"data-component-name\": \"Dropdown\",\n    isFilled: isFilled,\n    ...rest,\n    children: _jsx(ReactDropdown, {\n      closeOnSelect: closeMultiOnSelect,\n      contentComponent: Content,\n      create: allowCreate,\n      hiddenInput: inputOptions,\n      menuComponent: getDropdownComponent({\n        allowCreate,\n        ...rest\n      }),\n      onChange: handleChange,\n      onClearAll: onClear,\n      open: open,\n      options: items,\n      showClearButton: showClearButton,\n      styles: {\n        color: bg,\n        gap: 0,\n        minHeight: parseInt(large ? inputHeight.large : inputHeight.normal, 10),\n        menuMaxHeight,\n        width: rest.width\n      },\n      values: values,\n      ...rest\n    })\n  });\n}\nDropdown.defaultProps = {\n  allowCreate: false,\n  autoFocus: true,\n  borderless: false,\n  clearOnSelect: false,\n  closeOnScroll: false,\n  direction: 'ltr',\n  disabled: false,\n  height: 260,\n  keepSelectedInList: true,\n  labels: {\n    create: 'Create {search}',\n    noData: 'Nothing found'\n  },\n  large: false,\n  loading: false,\n  multi: false,\n  placeholder: 'Select an option',\n  searchBy: 'label',\n  searchable: true,\n  showClearButton: false,\n  showSeparator: false,\n  shade: 'mid',\n  variant: 'primary',\n  width: 260\n};","map":{"version":3,"mappings":"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","names":["useState","css","useTheme","styled","ReactDropdown","Content","Items","getColorVariant","getTheme","px","getStyledOptions","isDarkMode","marginStyles","StyledDropdown","props","borderless","isFilled","multi","shade","variant","width","grayDark","grayDarker","grayMid","radius","spacing","variants","white","bg","darkMode","borderColor","styles","xs","red","mid","getDropdownComponent","DropdownRenderer","renderer","_jsx","Dropdown","allowCreate","closeMultiOnSelect","inputOptions","menuMaxHeight","items","large","onClear","onChange","open","showClearButton","values","rest","setFilled","length","inputHeight","theme","handleChange","value","children","closeOnSelect","contentComponent","create","hiddenInput","menuComponent","onClearAll","options","color","gap","minHeight","parseInt","normal","defaultProps","autoFocus","clearOnSelect","closeOnScroll","direction","disabled","height","keepSelectedInList","labels","noData","loading","placeholder","searchBy","searchable","showSeparator"],"sources":["/My_WORK/graduate_React/frontend/node_modules/@gilbarbara/components/src/Dropdown/index.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { css, useTheme } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport ReactDropdown, { ComponentProps, Option } from '@gilbarbara/react-dropdown';\n\nimport Content from './Content';\nimport Items from './Items';\n\nimport { getColorVariant, getTheme, px } from '../modules/helpers';\nimport { getStyledOptions, isDarkMode, marginStyles } from '../modules/system';\nimport { DropdownProps } from '../types';\n\nexport const StyledDropdown = styled(\n  'div',\n  getStyledOptions('placeholder', 'onSearch'),\n)<\n  Omit<DropdownProps, 'items' | 'large' | 'onChange' | 'values'> & {\n    isFilled: boolean;\n  }\n>(props => {\n  const { borderless, isFilled, multi, shade, variant = 'primary', width } = props;\n  const { grayDark, grayDarker, grayMid, radius, spacing, variants, white } = getTheme(props);\n  const { bg } = getColorVariant(variant, shade, variants);\n\n  const darkMode = isDarkMode(props);\n  let borderColor = darkMode ? grayDark : grayMid;\n\n  if (isFilled) {\n    borderColor = bg;\n  }\n\n  const styles = borderless\n    ? css`\n        border: 0 !important;\n        border-bottom: 1px solid ${borderColor} !important;\n        border-radius: 0 !important;\n        padding: 0 !important;\n      `\n    : css`\n        background-color: ${darkMode ? grayDarker : white};\n        border: 1px solid ${borderColor};\n        border-radius: ${radius.xs};\n        padding-left: ${multi ? 0 : spacing.xs} !important;\n      `;\n\n  return css`\n    min-width: ${px(width || 260)};\n    width: ${px(width) || 'auto'};\n    ${marginStyles(props)};\n\n    .react-dropdown {\n      ${styles};\n\n      &:focus,\n      &:focus-within {\n        border-color: ${bg} !important;\n        box-shadow: ${borderless ? 'none' : `0 0 8px 1px ${bg}`} !important;\n\n        .react-dropdown-separator {\n          background-color: ${bg};\n        }\n      }\n\n      &[disabled] {\n        opacity: 1 !important;\n\n        .react-dropdown-content {\n          color: ${grayMid};\n        }\n      }\n\n      &-clear {\n        &:hover {\n          color: ${variants.red.mid.bg};\n        }\n      }\n\n      &-content {\n        align-items: center;\n        width: calc(100% - 16px);\n\n        span {\n          max-width: 100%;\n\n          + input {\n            margin-left: 5px;\n          }\n        }\n      }\n\n      &-menu {\n        border: 0 !important;\n        border-radius: ${radius.xs};\n        overflow: hidden;\n        width: 100% !important;\n        z-index: 100;\n\n        &:empty {\n          display: none;\n        }\n      }\n\n      &-loading {\n        padding: 0 ${spacing.xs};\n\n        &:after {\n          margin: 0;\n        }\n      }\n\n      &-separator {\n        background-color: ${borderColor};\n      }\n    }\n  `;\n});\n\nfunction getDropdownComponent(\n  props: Pick<DropdownProps, 'allowCreate' | 'onSearch' | 'shade' | 'variant'>,\n) {\n  return function DropdownRenderer(renderer: ComponentProps) {\n    return <Items {...renderer} {...props} />;\n  };\n}\n\nexport function Dropdown(props: DropdownProps) {\n  const {\n    allowCreate,\n    closeMultiOnSelect,\n    inputOptions,\n    menuMaxHeight = 260,\n    items,\n    large,\n    onClear,\n    onChange,\n    open,\n    showClearButton,\n    values = [],\n    ...rest\n  } = props;\n  const [isFilled, setFilled] = useState(!!values.length);\n\n  const { inputHeight, variants } = getTheme({ theme: useTheme() });\n  const { bg } = getColorVariant(rest.variant || 'primary', rest.shade, variants);\n\n  const handleChange = (value: Option[]) => {\n    setFilled(!!value.length);\n\n    if (onChange) {\n      onChange(value);\n    }\n  };\n\n  return (\n    <StyledDropdown data-component-name=\"Dropdown\" isFilled={isFilled} {...rest}>\n      <ReactDropdown\n        closeOnSelect={closeMultiOnSelect}\n        contentComponent={Content}\n        create={allowCreate}\n        hiddenInput={inputOptions}\n        menuComponent={getDropdownComponent({ allowCreate, ...rest })}\n        onChange={handleChange}\n        onClearAll={onClear}\n        open={open}\n        options={items}\n        showClearButton={showClearButton}\n        styles={{\n          color: bg,\n          gap: 0,\n          minHeight: parseInt(large ? inputHeight.large : inputHeight.normal, 10),\n          menuMaxHeight,\n          width: rest.width,\n        }}\n        values={values}\n        {...rest}\n      />\n    </StyledDropdown>\n  );\n}\n\nDropdown.defaultProps = {\n  allowCreate: false,\n  autoFocus: true,\n  borderless: false,\n  clearOnSelect: false,\n  closeOnScroll: false,\n  direction: 'ltr',\n  disabled: false,\n  height: 260,\n  keepSelectedInList: true,\n  labels: {\n    create: 'Create {search}',\n    noData: 'Nothing found',\n  },\n  large: false,\n  loading: false,\n  multi: false,\n  placeholder: 'Select an option',\n  searchBy: 'label',\n  searchable: true,\n  showClearButton: false,\n  showSeparator: false,\n  shade: 'mid',\n  variant: 'primary',\n  width: 260,\n};\n"]},"metadata":{},"sourceType":"module"}