{"ast":null,"code":"import hex2hsl from './hex2hsl';\nimport hsl2hex from './hsl2hex';\nimport { invariant, isPlainObject, isString, messages } from './modules/utils';\nimport parseCSS from './parse-css';\nimport rotate from './rotate';\nexport default function palette(input) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  invariant(isString(input), messages.inputString);\n  invariant(isPlainObject(options), messages.options);\n  const {\n    lightness,\n    saturation,\n    size = 6,\n    type\n  } = options;\n  const hsl = hex2hsl(parseCSS(input));\n  const output = [];\n\n  switch (type) {\n    case 'monochromatic':\n      {\n        const step = 80 / size;\n\n        for (let index = size; index > 0; index--) {\n          output.push(hsl2hex({ ...hsl,\n            l: step * index\n          }));\n        }\n\n        break;\n      }\n\n    default:\n      {\n        const step = 360 / size;\n        output.push(hsl2hex({ ...hsl,\n          l: lightness || hsl.l,\n          s: saturation || hsl.s\n        }));\n\n        for (let index = 1; index < size; index++) {\n          const color = rotate(input, hsl.h + step * index);\n          output.push(hsl2hex({ ...hex2hsl(color),\n            l: lightness || hsl.l,\n            s: saturation || hsl.s\n          }));\n        }\n\n        break;\n      }\n  }\n\n  return output;\n}","map":{"version":3,"mappings":"AAAA,OAAOA,OAAP,MAAoB,WAApB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,SAAT,EAAoBC,aAApB,EAAmCC,QAAnC,EAA6CC,QAA7C,QAA6D,iBAA7D;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAGA,eAAc,SAAUC,OAAV,CAAkBC,KAAlB,EAA6D;EAAA,IAA5BC,OAA4B,uEAAF,EAAE;EACzER,SAAS,CAACE,QAAQ,CAACK,KAAD,CAAT,EAAkBJ,QAAQ,CAACM,WAA3B,CAAT;EACAT,SAAS,CAACC,aAAa,CAACO,OAAD,CAAd,EAAyBL,QAAQ,CAACK,OAAlC,CAAT;EAEA,MAAM;IAAEE,SAAF;IAAaC,UAAb;IAAyBC,IAAI,GAAG,CAAhC;IAAmCC;EAAnC,IAA4CL,OAAlD;EACA,MAAMM,GAAG,GAAGhB,OAAO,CAACM,QAAQ,CAACG,KAAD,CAAT,CAAnB;EACA,MAAMQ,MAAM,GAAa,EAAzB;;EAEA,QAAQF,IAAR;IACE,KAAK,eAAL;MAAsB;QACpB,MAAMG,IAAI,GAAG,KAAKJ,IAAlB;;QAEA,KAAK,IAAIK,KAAK,GAAGL,IAAjB,EAAuBK,KAAK,GAAG,CAA/B,EAAkCA,KAAK,EAAvC,EAA2C;UACzCF,MAAM,CAACG,IAAP,CAAYnB,OAAO,CAAC,EAAE,GAAGe,GAAL;YAAUK,CAAC,EAAEH,IAAI,GAAGC;UAApB,CAAD,CAAnB;QACD;;QAED;MACD;;IACD;MAAS;QACP,MAAMD,IAAI,GAAG,MAAMJ,IAAnB;QAEAG,MAAM,CAACG,IAAP,CAAYnB,OAAO,CAAC,EAAE,GAAGe,GAAL;UAAUK,CAAC,EAAET,SAAS,IAAII,GAAG,CAACK,CAA9B;UAAiCC,CAAC,EAAET,UAAU,IAAIG,GAAG,CAACM;QAAtD,CAAD,CAAnB;;QAEA,KAAK,IAAIH,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGL,IAA5B,EAAkCK,KAAK,EAAvC,EAA2C;UACzC,MAAMI,KAAK,GAAGhB,MAAM,CAACE,KAAD,EAAQO,GAAG,CAACQ,CAAJ,GAAQN,IAAI,GAAGC,KAAvB,CAApB;UAEAF,MAAM,CAACG,IAAP,CAAYnB,OAAO,CAAC,EAAE,GAAGD,OAAO,CAACuB,KAAD,CAAZ;YAAqBF,CAAC,EAAET,SAAS,IAAII,GAAG,CAACK,CAAzC;YAA4CC,CAAC,EAAET,UAAU,IAAIG,GAAG,CAACM;UAAjE,CAAD,CAAnB;QACD;;QAED;MACD;EAtBH;;EAyBA,OAAOL,MAAP;AACD","names":["hex2hsl","hsl2hex","invariant","isPlainObject","isString","messages","parseCSS","rotate","palette","input","options","inputString","lightness","saturation","size","type","hsl","output","step","index","push","l","s","color","h"],"sources":["/My_WORK/graduate_React/frontend/node_modules/colorizr/src/palette.ts"],"sourcesContent":["import hex2hsl from './hex2hsl';\nimport hsl2hex from './hsl2hex';\nimport { invariant, isPlainObject, isString, messages } from './modules/utils';\nimport parseCSS from './parse-css';\nimport rotate from './rotate';\nimport { PaletteOptions } from './types';\n\nexport default function palette(input: string, options: PaletteOptions = {}): string[] {\n  invariant(isString(input), messages.inputString);\n  invariant(isPlainObject(options), messages.options);\n\n  const { lightness, saturation, size = 6, type } = options;\n  const hsl = hex2hsl(parseCSS(input));\n  const output: string[] = [];\n\n  switch (type) {\n    case 'monochromatic': {\n      const step = 80 / size;\n\n      for (let index = size; index > 0; index--) {\n        output.push(hsl2hex({ ...hsl, l: step * index }));\n      }\n\n      break;\n    }\n    default: {\n      const step = 360 / size;\n\n      output.push(hsl2hex({ ...hsl, l: lightness || hsl.l, s: saturation || hsl.s }));\n\n      for (let index = 1; index < size; index++) {\n        const color = rotate(input, hsl.h + step * index);\n\n        output.push(hsl2hex({ ...hex2hsl(color), l: lightness || hsl.l, s: saturation || hsl.s }));\n      }\n\n      break;\n    }\n  }\n\n  return output;\n}\n"]},"metadata":{},"sourceType":"module"}