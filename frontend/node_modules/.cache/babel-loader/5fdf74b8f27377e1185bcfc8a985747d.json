{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport { css } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport { backgroundStyles, baseStyles, borderStyles, flexBoxStyles, flexItemStyles, getStyledOptions, layoutStyles, marginStyles, paddingStyles, positioningStyles, radiusStyles, shadowStyles, textColorStyles } from './modules/system';\nexport const StyledBox = styled('div', getStyledOptions('fill'))(props => {\n  const {\n    flexBox\n  } = props;\n  return css`\n    display: ${flexBox ? 'flex' : undefined};\n    ${baseStyles(props)};\n    ${backgroundStyles(props, false)};\n    ${borderStyles(props)};\n    ${flexBoxStyles(props)};\n    ${flexItemStyles(props)};\n    ${layoutStyles(props)};\n    ${marginStyles(props)};\n    ${paddingStyles(props)};\n    ${positioningStyles(props)};\n    ${radiusStyles(props)};\n    ${shadowStyles(props)};\n    ${textColorStyles(props)};\n  `;\n});\n/**\n * A container that lays out its contents using \"block\" (default) or \"flex\" (with the display prop).\n */\n\nexport const Box = forwardRef((props, ref) => {\n  const {\n    children,\n    ...rest\n  } = props;\n  return _jsx(StyledBox, {\n    ref: ref,\n    \"data-component-name\": \"Box\",\n    ...rest,\n    children: children\n  });\n});\nBox.defaultProps = {\n  flexBox: false\n};\nexport const BoxCenter = forwardRef((props, ref) => _jsx(StyledBox, {\n  ref: ref,\n  \"data-component-name\": \"BoxCenter\",\n  ...props\n}));\nBoxCenter.defaultProps = {\n  align: 'center',\n  direction: 'column',\n  display: 'flex',\n  justify: 'center'\n};\nexport const BoxInline = forwardRef((props, ref) => _jsx(StyledBox, {\n  ref: ref,\n  as: \"span\",\n  \"data-component-name\": \"BoxInline\",\n  ...props\n}));\nBoxInline.defaultProps = {\n  align: 'center',\n  direction: 'row',\n  display: 'inline-flex'\n};","map":{"version":3,"mappings":";AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,GAAT,QAAoB,gBAApB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAEA,SACEC,gBADF,EAEEC,UAFF,EAGEC,YAHF,EAIEC,aAJF,EAKEC,cALF,EAMEC,gBANF,EAOEC,YAPF,EAQEC,YARF,EASEC,aATF,EAUEC,iBAVF,EAWEC,YAXF,EAYEC,YAZF,EAaEC,eAbF,QAcO,kBAdP;AAuDA,OAAO,MAAMC,SAAS,GAAGd,MAAM,CAC7B,KAD6B,EAE7BM,gBAAgB,CAAC,MAAD,CAFa,CAAN,CAGbS,KAAK,IAAG;EAClB,MAAM;IAAEC;EAAF,IAAcD,KAApB;EAEA,OAAOhB,GAAG;eACGiB,OAAO,GAAG,MAAH,GAAYC,SAAS;MACrCf,UAAU,CAACa,KAAD,CAAO;MACjBd,gBAAgB,CAACc,KAAD,EAAQ,KAAR,CAAc;MAC9BZ,YAAY,CAACY,KAAD,CAAO;MACnBX,aAAa,CAACW,KAAD,CAAO;MACpBV,cAAc,CAACU,KAAD,CAAO;MACrBR,YAAY,CAACQ,KAAD,CAAO;MACnBP,YAAY,CAACO,KAAD,CAAO;MACnBN,aAAa,CAACM,KAAD,CAAO;MACpBL,iBAAiB,CAACK,KAAD,CAAO;MACxBJ,YAAY,CAACI,KAAD,CAAO;MACnBH,YAAY,CAACG,KAAD,CAAO;MACnBF,eAAe,CAACE,KAAD,CAAO;GAb1B;AAeD,CArBwB,CAAlB;AAuBP;;;;AAGA,OAAO,MAAMG,GAAG,GAAGpB,UAAU,CAA2B,CAACiB,KAAD,EAAQI,GAAR,KAAe;EACrE,MAAM;IAAEC,QAAF;IAAY,GAAGC;EAAf,IAAwBN,KAA9B;EAEA,OACEO,KAACR,SAAD,EAAU;IAACK,GAAG,EAAEA,GAAN;IAAS,uBAAsB,KAA/B;IAAoC,GAAKE,IAAzC;IAA6CD,UACpDA;EADO,CAAV,CADF;AAKD,CAR4B,CAAtB;AAUPF,GAAG,CAACK,YAAJ,GAAmB;EACjBP,OAAO,EAAE;AADQ,CAAnB;AAIA,OAAO,MAAMQ,SAAS,GAAG1B,UAAU,CAA2B,CAACiB,KAAD,EAAQI,GAAR,KAC5DG,KAACR,SAAD,EAAU;EAACK,GAAG,EAAEA,GAAN;EAAS,uBAAsB,WAA/B;EAA0C,GAAKJ;AAA/C,CAAV,CADiC,CAA5B;AAIPS,SAAS,CAACD,YAAV,GAAyB;EACvBE,KAAK,EAAE,QADgB;EAEvBC,SAAS,EAAE,QAFY;EAGvBC,OAAO,EAAE,MAHc;EAIvBC,OAAO,EAAE;AAJc,CAAzB;AAOA,OAAO,MAAMC,SAAS,GAAG/B,UAAU,CAA2B,CAACiB,KAAD,EAAQI,GAAR,KAC5DG,KAACR,SAAD,EAAU;EAACK,GAAG,EAAEA,GAAN;EAAWW,EAAE,EAAC,MAAd;EAAoB,uBAAqB,WAAzC;EAAoD,GAAKf;AAAzD,CAAV,CADiC,CAA5B;AAIPc,SAAS,CAACN,YAAV,GAAyB;EACvBE,KAAK,EAAE,QADgB;EAEvBC,SAAS,EAAE,KAFY;EAGvBC,OAAO,EAAE;AAHc,CAAzB","names":["forwardRef","css","styled","backgroundStyles","baseStyles","borderStyles","flexBoxStyles","flexItemStyles","getStyledOptions","layoutStyles","marginStyles","paddingStyles","positioningStyles","radiusStyles","shadowStyles","textColorStyles","StyledBox","props","flexBox","undefined","Box","ref","children","rest","_jsx","defaultProps","BoxCenter","align","direction","display","justify","BoxInline","as"],"sources":["/My_WORK/graduate_React/frontend/node_modules/@gilbarbara/components/src/Box.tsx"],"sourcesContent":["import { forwardRef } from 'react';\nimport { css } from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {\n  backgroundStyles,\n  baseStyles,\n  borderStyles,\n  flexBoxStyles,\n  flexItemStyles,\n  getStyledOptions,\n  layoutStyles,\n  marginStyles,\n  paddingStyles,\n  positioningStyles,\n  radiusStyles,\n  shadowStyles,\n  textColorStyles,\n} from './modules/system';\nimport {\n  ComponentProps,\n  StyledProps,\n  WithBorder,\n  WithChildrenOptional,\n  WithColor,\n  WithFlexBox,\n  WithFlexItem,\n  WithLayout,\n  WithMargin,\n  WithPadding,\n  WithPositioning,\n  WithRadius,\n  WithShadow,\n  WithTextColor,\n} from './types';\n\nexport interface BoxKnownProps\n  extends StyledProps,\n    WithBorder,\n    WithChildrenOptional,\n    WithColor,\n    WithFlexBox,\n    WithFlexItem,\n    WithLayout,\n    WithMargin,\n    WithPadding,\n    WithPositioning,\n    WithRadius,\n    WithShadow,\n    WithTextColor {\n  /**\n   * Set the display to flex.\n   * @default false\n   */\n  flexBox?: boolean;\n}\n\nexport type BoxProps = ComponentProps<HTMLDivElement, BoxKnownProps>;\n\nexport const StyledBox = styled(\n  'div',\n  getStyledOptions('fill'),\n)<BoxProps>(props => {\n  const { flexBox } = props;\n\n  return css`\n    display: ${flexBox ? 'flex' : undefined};\n    ${baseStyles(props)};\n    ${backgroundStyles(props, false)};\n    ${borderStyles(props)};\n    ${flexBoxStyles(props)};\n    ${flexItemStyles(props)};\n    ${layoutStyles(props)};\n    ${marginStyles(props)};\n    ${paddingStyles(props)};\n    ${positioningStyles(props)};\n    ${radiusStyles(props)};\n    ${shadowStyles(props)};\n    ${textColorStyles(props)};\n  `;\n});\n\n/**\n * A container that lays out its contents using \"block\" (default) or \"flex\" (with the display prop).\n */\nexport const Box = forwardRef<HTMLDivElement, BoxProps>((props, ref) => {\n  const { children, ...rest } = props;\n\n  return (\n    <StyledBox ref={ref} data-component-name=\"Box\" {...rest}>\n      {children}\n    </StyledBox>\n  );\n});\n\nBox.defaultProps = {\n  flexBox: false,\n};\n\nexport const BoxCenter = forwardRef<HTMLDivElement, BoxProps>((props, ref) => (\n  <StyledBox ref={ref} data-component-name=\"BoxCenter\" {...props} />\n));\n\nBoxCenter.defaultProps = {\n  align: 'center',\n  direction: 'column',\n  display: 'flex',\n  justify: 'center',\n};\n\nexport const BoxInline = forwardRef<HTMLDivElement, BoxProps>((props, ref) => (\n  <StyledBox ref={ref} as=\"span\" data-component-name=\"BoxInline\" {...props} />\n));\n\nBoxInline.defaultProps = {\n  align: 'center',\n  direction: 'row',\n  display: 'inline-flex',\n};\n"]},"metadata":{},"sourceType":"module"}