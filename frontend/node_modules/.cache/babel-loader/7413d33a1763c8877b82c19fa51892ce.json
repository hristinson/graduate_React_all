{"ast":null,"code":"import { omit } from '@gilbarbara/helpers';\nimport is from 'is-lite';\nimport { clearNumber } from '../modules/helpers';\nimport { validateEmail, validateMatchField, validatePassword, validatePhoneBR } from '../modules/validations';\nexport function getError(name, errors) {\n  const {\n    message,\n    type\n  } = errors[name] || {};\n\n  if (message) {\n    return [message, type];\n  }\n\n  return [null];\n}\nexport function getInputParameters(props) {\n  for (var _len = arguments.length, extra = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    extra[_key - 1] = arguments[_key];\n  }\n\n  return omit(props, 'assistiveText', 'children', 'clearError', 'debug', 'dropdownProps', 'formatter', 'hideAssistiveText', 'label', 'maxLength', 'minLength', 'onBlur', 'onChange', 'onFocus', 'options', 'required', 'setValueAs', 'skipValidation', 'type', 'validations', 'value', ...extra);\n}\nexport function getRegisterOptions(props) {\n  const {\n    getValues,\n    maxLength,\n    minLength,\n    required,\n    formatter = '',\n    validations = [],\n    setValueAs,\n    type = 'text',\n    value\n  } = props;\n  const registerOptions = {};\n\n  if (!is.undefined(value) || ['checkbox', 'toggle'].includes(type)) {\n    registerOptions.value = getDefaultValue(value, type);\n  }\n\n  if (required) {\n    registerOptions.required = 'Required';\n  }\n\n  if (minLength) {\n    registerOptions.minLength = {\n      value: minLength,\n      message: `Min. Characters: ${minLength}`\n    };\n  }\n\n  if (maxLength) {\n    registerOptions.maxLength = {\n      value: maxLength,\n      message: `Max. Characters: ${maxLength}`\n    };\n  }\n\n  if (['money', 'number', 'phoneBR'].includes(formatter)) {\n    registerOptions.setValueAs = v => {\n      if (!v) {\n        return undefined;\n      }\n\n      return is.number(v) ? v : Number(clearNumber(v));\n    };\n  }\n\n  if (setValueAs) {\n    registerOptions.setValueAs = setValueAs;\n  }\n\n  const validated = validations.map(d => {\n    let result;\n\n    if (d === 'email') {\n      result = validateEmail;\n    }\n\n    if (d === 'password') {\n      result = validatePassword;\n    }\n\n    if (d === 'phoneBR') {\n      result = validatePhoneBR;\n    }\n\n    if (d.startsWith('equalsTo:')) {\n      const [, field] = d.split(':');\n      result = {\n        field,\n        fn: validateMatchField\n      };\n    }\n\n    return result;\n  }).filter(Boolean);\n\n  if (validated.length) {\n    registerOptions.validate = validated.reduce((acc, validation) => {\n      if (is.undefined(validation)) {\n        return acc;\n      }\n\n      const fnName = is.function(validation) ? validation.name : validation.fn.name;\n\n      acc[fnName] = value_ => {\n        const input = value_ ? `${value_}` : '';\n        let response;\n\n        if (is.function(validation)) {\n          response = validation(input);\n        } else if (validation.field && is.function(validation.fn)) {\n          const actualValues = getValues();\n          response = validation.fn(`${actualValues[validation.field]}`, input);\n        }\n\n        return response;\n      };\n\n      return acc;\n    }, {});\n  }\n\n  return registerOptions;\n}\nexport function getDefaultValue(value, type) {\n  if (type === 'checkbox') {\n    return value || [];\n  } else if (type === 'toggle') {\n    return value || false;\n  }\n\n  return value;\n}","map":{"version":3,"mappings":"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","names":["omit","is","clearNumber","validateEmail","validateMatchField","validatePassword","validatePhoneBR","getError","name","errors","message","type","getInputParameters","props","extra","getRegisterOptions","getValues","maxLength","minLength","required","formatter","validations","setValueAs","value","registerOptions","undefined","includes","getDefaultValue","v","number","Number","validated","map","d","result","startsWith","field","split","fn","filter","Boolean","length","validate","reduce","acc","validation","fnName","function","value_","input","response","actualValues"],"sources":["/My_WORK/graduate_React/frontend/node_modules/@gilbarbara/components/src/Field/utils.ts"],"sourcesContent":["import { FieldValues, UseFormRegister } from 'react-hook-form';\nimport { omit } from '@gilbarbara/helpers';\nimport { AnyObject, StringOrNumber } from '@gilbarbara/types';\nimport is from 'is-lite';\n\nimport { FieldProps, RegisterOptionsProps } from './types';\n\nimport { clearNumber } from '../modules/helpers';\nimport {\n  validateEmail,\n  validateMatchField,\n  validatePassword,\n  validatePhoneBR,\n} from '../modules/validations';\n\nexport function getError(name: string, errors: AnyObject) {\n  const { message, type } = errors[name] || {};\n\n  if (message) {\n    return [message, type];\n  }\n\n  return [null];\n}\n\nexport function getInputParameters(props: FieldProps, ...extra: any[]) {\n  return omit(\n    props,\n    'assistiveText',\n    'children',\n    'clearError',\n    'debug',\n    'dropdownProps',\n    'formatter',\n    'hideAssistiveText',\n    'label',\n    'maxLength',\n    'minLength',\n    'onBlur',\n    'onChange',\n    'onFocus',\n    'options',\n    'required',\n    'setValueAs',\n    'skipValidation',\n    'type',\n    'validations',\n    'value',\n    ...extra,\n  );\n}\n\nexport function getRegisterOptions(\n  props: RegisterOptionsProps,\n): Partial<UseFormRegister<FieldValues>> {\n  const {\n    getValues,\n    maxLength,\n    minLength,\n    required,\n    formatter = '',\n    validations = [],\n    setValueAs,\n    type = 'text',\n    value,\n  } = props;\n  const registerOptions = {} as AnyObject;\n\n  if (!is.undefined(value) || ['checkbox', 'toggle'].includes(type)) {\n    registerOptions.value = getDefaultValue(value, type);\n  }\n\n  if (required) {\n    registerOptions.required = 'Required';\n  }\n\n  if (minLength) {\n    registerOptions.minLength = {\n      value: minLength,\n      message: `Min. Characters: ${minLength}`,\n    };\n  }\n\n  if (maxLength) {\n    registerOptions.maxLength = {\n      value: maxLength,\n      message: `Max. Characters: ${maxLength}`,\n    };\n  }\n\n  if (['money', 'number', 'phoneBR'].includes(formatter)) {\n    registerOptions.setValueAs = (v: StringOrNumber) => {\n      if (!v) {\n        return undefined;\n      }\n\n      return is.number(v) ? v : Number(clearNumber(v));\n    };\n  }\n\n  if (setValueAs) {\n    registerOptions.setValueAs = setValueAs;\n  }\n\n  const validated = validations\n    .map(d => {\n      let result;\n\n      if (d === 'email') {\n        result = validateEmail;\n      }\n\n      if (d === 'password') {\n        result = validatePassword;\n      }\n\n      if (d === 'phoneBR') {\n        result = validatePhoneBR;\n      }\n\n      if (d.startsWith('equalsTo:')) {\n        const [, field] = d.split(':');\n\n        result = { field, fn: validateMatchField };\n      }\n\n      return result;\n    })\n    .filter(Boolean);\n\n  if (validated.length) {\n    registerOptions.validate = validated.reduce((acc, validation) => {\n      if (is.undefined(validation)) {\n        return acc;\n      }\n\n      const fnName = is.function(validation) ? validation.name : validation.fn.name;\n\n      acc[fnName] = (value_: string) => {\n        const input = value_ ? `${value_}` : '';\n        let response;\n\n        if (is.function(validation)) {\n          response = validation(input);\n        } else if (validation.field && is.function(validation.fn)) {\n          const actualValues = getValues();\n\n          response = validation.fn(`${actualValues[validation.field]}`, input);\n        }\n\n        return response;\n      };\n\n      return acc;\n    }, {} as AnyObject);\n  }\n\n  return registerOptions;\n}\n\nexport function getDefaultValue(value: any, type: FieldProps['type']) {\n  if (type === 'checkbox') {\n    return value || [];\n  } else if (type === 'toggle') {\n    return value || false;\n  }\n\n  return value;\n}\n"]},"metadata":{},"sourceType":"module"}