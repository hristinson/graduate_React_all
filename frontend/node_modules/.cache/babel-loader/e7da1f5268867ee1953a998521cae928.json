{"ast":null,"code":"import { invariant, isRGB, limit, messages } from './modules/utils';\nexport default function rgb2hsl(input) {\n  invariant(!!input, messages.input);\n  let rgb = input;\n\n  if (Array.isArray(input)) {\n    rgb = {\n      r: input[0],\n      g: input[1],\n      b: input[2]\n    };\n  }\n\n  invariant(isRGB(rgb), messages.invalid);\n  const rLimit = limit(rgb.r, 'r') / 255;\n  const gLimit = limit(rgb.g, 'g') / 255;\n  const bLimit = limit(rgb.b, 'b') / 255;\n  const min = Math.min(rLimit, gLimit, bLimit);\n  const max = Math.max(rLimit, gLimit, bLimit);\n  const delta = max - min;\n  let h = 0;\n  let s;\n  const l = (max + min) / 2;\n  let rate;\n\n  switch (max) {\n    case rLimit:\n      rate = !delta ? 0 : (gLimit - bLimit) / delta;\n      h = 60 * rate;\n      break;\n\n    case gLimit:\n      rate = (bLimit - rLimit) / delta;\n      h = 60 * rate + 120;\n      break;\n\n    case bLimit:\n      rate = (rLimit - gLimit) / delta;\n      h = 60 * rate + 240;\n      break;\n\n    /* istanbul ignore next */\n\n    default:\n      break;\n  }\n\n  if (h < 0) {\n    h = 360 + h;\n  }\n\n  if (min === max) {\n    s = 0;\n  } else {\n    s = l < 0.5 ? delta / (2 * l) : delta / (2 - 2 * l);\n  }\n\n  return {\n    h: Math.abs(+(h % 360).toFixed(2)),\n    s: +(s * 100).toFixed(2),\n    l: +(l * 100).toFixed(2)\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,EAAoBC,KAApB,EAA2BC,KAA3B,EAAkCC,QAAlC,QAAkD,iBAAlD;AAGA,eAAc,SAAUC,OAAV,CAAkBC,KAAlB,EAAuC;EACnDL,SAAS,CAAC,CAAC,CAACK,KAAH,EAAUF,QAAQ,CAACE,KAAnB,CAAT;EAEA,IAAIC,GAAG,GAAQD,KAAf;;EAEA,IAAIE,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAJ,EAA0B;IACxBC,GAAG,GAAG;MAAEG,CAAC,EAAEJ,KAAK,CAAC,CAAD,CAAV;MAAeK,CAAC,EAAEL,KAAK,CAAC,CAAD,CAAvB;MAA4BM,CAAC,EAAEN,KAAK,CAAC,CAAD;IAApC,CAAN;EACD;;EAEDL,SAAS,CAACC,KAAK,CAACK,GAAD,CAAN,EAAaH,QAAQ,CAACS,OAAtB,CAAT;EAEA,MAAMC,MAAM,GAAGX,KAAK,CAACI,GAAG,CAACG,CAAL,EAAQ,GAAR,CAAL,GAAoB,GAAnC;EACA,MAAMK,MAAM,GAAGZ,KAAK,CAACI,GAAG,CAACI,CAAL,EAAQ,GAAR,CAAL,GAAoB,GAAnC;EACA,MAAMK,MAAM,GAAGb,KAAK,CAACI,GAAG,CAACK,CAAL,EAAQ,GAAR,CAAL,GAAoB,GAAnC;EAEA,MAAMK,GAAG,GAAGC,IAAI,CAACD,GAAL,CAASH,MAAT,EAAiBC,MAAjB,EAAyBC,MAAzB,CAAZ;EACA,MAAMG,GAAG,GAAGD,IAAI,CAACC,GAAL,CAASL,MAAT,EAAiBC,MAAjB,EAAyBC,MAAzB,CAAZ;EACA,MAAMI,KAAK,GAAGD,GAAG,GAAGF,GAApB;EAEA,IAAII,CAAC,GAAG,CAAR;EACA,IAAIC,CAAJ;EACA,MAAMC,CAAC,GAAG,CAACJ,GAAG,GAAGF,GAAP,IAAc,CAAxB;EACA,IAAIO,IAAJ;;EAEA,QAAQL,GAAR;IACE,KAAKL,MAAL;MACEU,IAAI,GAAG,CAACJ,KAAD,GAAS,CAAT,GAAa,CAACL,MAAM,GAAGC,MAAV,IAAoBI,KAAxC;MACAC,CAAC,GAAG,KAAKG,IAAT;MACA;;IACF,KAAKT,MAAL;MACES,IAAI,GAAG,CAACR,MAAM,GAAGF,MAAV,IAAoBM,KAA3B;MACAC,CAAC,GAAG,KAAKG,IAAL,GAAY,GAAhB;MACA;;IACF,KAAKR,MAAL;MACEQ,IAAI,GAAG,CAACV,MAAM,GAAGC,MAAV,IAAoBK,KAA3B;MACAC,CAAC,GAAG,KAAKG,IAAL,GAAY,GAAhB;MACA;;IACF;;IACA;MACE;EAfJ;;EAkBA,IAAIH,CAAC,GAAG,CAAR,EAAW;IACTA,CAAC,GAAG,MAAMA,CAAV;EACD;;EAED,IAAIJ,GAAG,KAAKE,GAAZ,EAAiB;IACfG,CAAC,GAAG,CAAJ;EACD,CAFD,MAEO;IACLA,CAAC,GAAGC,CAAC,GAAG,GAAJ,GAAUH,KAAK,IAAI,IAAIG,CAAR,CAAf,GAA4BH,KAAK,IAAI,IAAI,IAAIG,CAAZ,CAArC;EACD;;EAED,OAAO;IACLF,CAAC,EAAEH,IAAI,CAACO,GAAL,CAAS,CAAC,CAACJ,CAAC,GAAG,GAAL,EAAUK,OAAV,CAAkB,CAAlB,CAAV,CADE;IAELJ,CAAC,EAAE,CAAC,CAACA,CAAC,GAAG,GAAL,EAAUI,OAAV,CAAkB,CAAlB,CAFC;IAGLH,CAAC,EAAE,CAAC,CAACA,CAAC,GAAG,GAAL,EAAUG,OAAV,CAAkB,CAAlB;EAHC,CAAP;AAKD","names":["invariant","isRGB","limit","messages","rgb2hsl","input","rgb","Array","isArray","r","g","b","invalid","rLimit","gLimit","bLimit","min","Math","max","delta","h","s","l","rate","abs","toFixed"],"sources":["/My_WORK/graduate_React/frontend/node_modules/colorizr/src/rgb2hsl.ts"],"sourcesContent":["import { invariant, isRGB, limit, messages } from './modules/utils';\nimport { HSL, RGB, RGBArray } from './types';\n\nexport default function rgb2hsl(input: RGB | RGBArray): HSL {\n  invariant(!!input, messages.input);\n\n  let rgb: RGB = input as RGB;\n\n  if (Array.isArray(input)) {\n    rgb = { r: input[0], g: input[1], b: input[2] };\n  }\n\n  invariant(isRGB(rgb), messages.invalid);\n\n  const rLimit = limit(rgb.r, 'r') / 255;\n  const gLimit = limit(rgb.g, 'g') / 255;\n  const bLimit = limit(rgb.b, 'b') / 255;\n\n  const min = Math.min(rLimit, gLimit, bLimit);\n  const max = Math.max(rLimit, gLimit, bLimit);\n  const delta = max - min;\n\n  let h = 0;\n  let s;\n  const l = (max + min) / 2;\n  let rate;\n\n  switch (max) {\n    case rLimit:\n      rate = !delta ? 0 : (gLimit - bLimit) / delta;\n      h = 60 * rate;\n      break;\n    case gLimit:\n      rate = (bLimit - rLimit) / delta;\n      h = 60 * rate + 120;\n      break;\n    case bLimit:\n      rate = (rLimit - gLimit) / delta;\n      h = 60 * rate + 240;\n      break;\n    /* istanbul ignore next */\n    default:\n      break;\n  }\n\n  if (h < 0) {\n    h = 360 + h;\n  }\n\n  if (min === max) {\n    s = 0;\n  } else {\n    s = l < 0.5 ? delta / (2 * l) : delta / (2 - 2 * l);\n  }\n\n  return {\n    h: Math.abs(+(h % 360).toFixed(2)),\n    s: +(s * 100).toFixed(2),\n    l: +(l * 100).toFixed(2),\n  };\n}\n"]},"metadata":{},"sourceType":"module"}