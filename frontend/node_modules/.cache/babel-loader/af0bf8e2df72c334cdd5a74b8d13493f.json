{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback } from 'react';\nimport { getInputParameters } from './utils';\nimport { Select } from '../Select';\n\nfunction FieldSelect(props) {\n  const {\n    children,\n    id,\n    isDirty,\n    name,\n    onBlur,\n    onChange,\n    onFocus,\n    registration,\n    setStatus\n  } = props;\n  const handleBlur = useCallback(event => {\n    setStatus({\n      isActive: false,\n      isDirty\n    });\n    registration.onBlur(event);\n\n    if (onBlur) {\n      onBlur(event);\n    }\n  }, [isDirty, onBlur, registration, setStatus]);\n  const handleFocus = useCallback(event => {\n    setStatus({\n      isActive: true\n    });\n\n    if (onFocus) {\n      onFocus(event);\n    }\n  }, [onFocus, setStatus]);\n  const handleChange = useCallback(event => {\n    registration.onChange(event);\n\n    if (onChange) {\n      onChange(event);\n    }\n  }, [onChange, registration]);\n  const input = { ...getInputParameters(props, 'isDirty', 'registration', 'setStatus'),\n    id: id || name,\n    onBlur: handleBlur,\n    onChange: handleChange,\n    onFocus: handleFocus\n  };\n  return _jsx(Select, { ...registration,\n    ...input,\n    children: children\n  });\n}\n\nexport default FieldSelect;","map":{"version":3,"mappings":";AAAA,SAAkCA,WAAlC,QAAqD,OAArD;AAIA,SAASC,kBAAT,QAAmC,SAAnC;AAEA,SAASC,MAAT,QAAuB,WAAvB;;AAQA,SAASC,WAAT,CAAqBC,KAArB,EAAiC;EAC/B,MAAM;IAAEC,QAAF;IAAYC,EAAZ;IAAgBC,OAAhB;IAAyBC,IAAzB;IAA+BC,MAA/B;IAAuCC,QAAvC;IAAiDC,OAAjD;IAA0DC,YAA1D;IAAwEC;EAAxE,IAAsFT,KAA5F;EACA,MAAMU,UAAU,GAAGd,WAAW,CAC3Be,KAAD,IAAyC;IACvCF,SAAS,CAAC;MAAEG,QAAQ,EAAE,KAAZ;MAAmBT;IAAnB,CAAD,CAAT;IAEAK,YAAY,CAACH,MAAb,CAAoBM,KAApB;;IAEA,IAAIN,MAAJ,EAAY;MACVA,MAAM,CAACM,KAAD,CAAN;IACD;EACF,CAT2B,EAU5B,CAACR,OAAD,EAAUE,MAAV,EAAkBG,YAAlB,EAAgCC,SAAhC,CAV4B,CAA9B;EAaA,MAAMI,WAAW,GAAGjB,WAAW,CAC5Be,KAAD,IAAyC;IACvCF,SAAS,CAAC;MAAEG,QAAQ,EAAE;IAAZ,CAAD,CAAT;;IAEA,IAAIL,OAAJ,EAAa;MACXA,OAAO,CAACI,KAAD,CAAP;IACD;EACF,CAP4B,EAQ7B,CAACJ,OAAD,EAAUE,SAAV,CAR6B,CAA/B;EAWA,MAAMK,YAAY,GAAGlB,WAAW,CAC7Be,KAAD,IAA0C;IACxCH,YAAY,CAACF,QAAb,CAAsBK,KAAtB;;IAEA,IAAIL,QAAJ,EAAc;MACZA,QAAQ,CAACK,KAAD,CAAR;IACD;EACF,CAP6B,EAQ9B,CAACL,QAAD,EAAWE,YAAX,CAR8B,CAAhC;EAWA,MAAMO,KAAK,GAAG,EACZ,GAAGlB,kBAAkB,CAACG,KAAD,EAAQ,SAAR,EAAmB,cAAnB,EAAmC,WAAnC,CADT;IAEZE,EAAE,EAAEA,EAAE,IAAIE,IAFE;IAGZC,MAAM,EAAEK,UAHI;IAIZJ,QAAQ,EAAEQ,YAJE;IAKZP,OAAO,EAAEM;EALG,CAAd;EAQA,OACEG,KAAClB,MAAD,EAAO,KAAKU,YAAL;IAAiB,GAAMO,KAAvB;IAA4Bd,UAChCA;EADI,CAAP,CADF;AAKD;;AAED,eAAeF,WAAf","names":["useCallback","getInputParameters","Select","FieldSelect","props","children","id","isDirty","name","onBlur","onChange","onFocus","registration","setStatus","handleBlur","event","isActive","handleFocus","handleChange","input","_jsx"],"sources":["/My_WORK/graduate_React/frontend/node_modules/@gilbarbara/components/src/Field/Select.tsx"],"sourcesContent":["import { ChangeEvent, FocusEvent, useCallback } from 'react';\nimport { UseFormRegisterReturn } from 'react-hook-form';\n\nimport { FieldSelectProps } from './types';\nimport { getInputParameters } from './utils';\n\nimport { Select } from '../Select';\n\ninterface Props extends FieldSelectProps {\n  isDirty: boolean;\n  registration: UseFormRegisterReturn;\n  setStatus: (status: { isActive?: boolean; isDirty?: boolean }) => void;\n}\n\nfunction FieldSelect(props: Props): JSX.Element {\n  const { children, id, isDirty, name, onBlur, onChange, onFocus, registration, setStatus } = props;\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      setStatus({ isActive: false, isDirty });\n\n      registration.onBlur(event);\n\n      if (onBlur) {\n        onBlur(event);\n      }\n    },\n    [isDirty, onBlur, registration, setStatus],\n  );\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      setStatus({ isActive: true });\n\n      if (onFocus) {\n        onFocus(event);\n      }\n    },\n    [onFocus, setStatus],\n  );\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLSelectElement>) => {\n      registration.onChange(event);\n\n      if (onChange) {\n        onChange(event);\n      }\n    },\n    [onChange, registration],\n  );\n\n  const input = {\n    ...getInputParameters(props, 'isDirty', 'registration', 'setStatus'),\n    id: id || name,\n    onBlur: handleBlur,\n    onChange: handleChange,\n    onFocus: handleFocus,\n  };\n\n  return (\n    <Select {...registration} {...input}>\n      {children}\n    </Select>\n  );\n}\n\nexport default FieldSelect;\n"]},"metadata":{},"sourceType":"module"}