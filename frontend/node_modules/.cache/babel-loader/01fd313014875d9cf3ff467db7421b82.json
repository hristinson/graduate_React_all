{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef, useRef, useState } from 'react';\nimport mergeRefs from 'react-merge-refs';\nimport { usePrevious, useUpdateEffect } from 'react-use';\nimport { css } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport is from 'is-lite';\nimport { Label } from './Label';\nimport { getColorVariant, getTheme } from './modules/helpers';\nimport { baseStyles, getStyledOptions, isDarkMode } from './modules/system';\nconst styles = {\n  borderRadius: '12px',\n  height: '24px',\n  space: '2px',\n  width: '48px'\n};\nconst StyledInput = styled('input')`\n  bottom: 0;\n  left: 0;\n  opacity: 0.0001;\n  position: absolute;\n  right: 0;\n  top: 0;\n`;\nconst StyledTrack = styled('span', getStyledOptions())(props => {\n  const {\n    isActive,\n    shade,\n    variant = 'primary'\n  } = props;\n  const {\n    grayDark,\n    grayLighter,\n    radius,\n    variants\n  } = getTheme(props);\n  const {\n    bg\n  } = getColorVariant(variant, shade, variants);\n  let backgroundColor = isDarkMode(props) ? grayDark : grayLighter;\n\n  if (isActive) {\n    backgroundColor = bg;\n  }\n\n  return css`\n    background-color: ${backgroundColor};\n    border-radius: ${radius.sm};\n    bottom: 0;\n    left: 0;\n    position: absolute;\n    transition: background-color 0.4s;\n    right: 0;\n    top: 0;\n  `;\n});\nconst StyledButton = styled('span', getStyledOptions())(props => {\n  const {\n    disabled,\n    isActive,\n    variant\n  } = props;\n  const {\n    grayMid,\n    variants,\n    white\n  } = getTheme(props);\n  let backgroundColor = isDarkMode(props) ? grayMid : white;\n\n  if (isActive) {\n    backgroundColor = variant === 'yellow' ? variants.yellow.darker.bg : white;\n  }\n\n  return css`\n    background-color: ${backgroundColor};\n    border-radius: 50%;\n    bottom: ${styles.space};\n    left: ${isActive ? '26px' : styles.space};\n    opacity: ${disabled ? 0.7 : 1};\n    position: absolute;\n    top: ${styles.space};\n    transition: background-color 0.4s, left 0.2s ease;\n    width: 20px;\n  `;\n});\nexport const StyledToggle = styled('div')(props => {\n  const {\n    disabled,\n    label\n  } = props;\n  const {\n    colors\n  } = getTheme(props);\n  return css`\n    ${baseStyles(props)};\n    cursor: ${disabled ? 'default' : 'pointer'};\n    height: ${styles.height};\n    margin-right: ${label ? '8px' : 0};\n    opacity: ${disabled ? 0.8 : 1};\n    position: relative;\n    user-select: none;\n    vertical-align: middle;\n    width: ${styles.width};\n\n    &:focus {\n      filter: drop-shadow(0 0 4px ${colors.primary});\n      outline: none;\n    }\n  `;\n});\nexport const Toggle = forwardRef((props, ref) => {\n  const {\n    checked,\n    defaultChecked = false,\n    disabled,\n    label,\n    name,\n    onChange,\n    onClick,\n    shade,\n    variant,\n    ...rest\n  } = props;\n  const inputRef = useRef(null);\n  const [isActive, setActive] = useState(is.boolean(checked) ? checked : defaultChecked);\n  const previousChecked = usePrevious(checked);\n  useUpdateEffect(() => {\n    if (is.boolean(checked) && previousChecked !== checked) {\n      setActive(checked);\n    }\n  }, [checked, previousChecked]);\n\n  const handleChange = event => {\n    const {\n      target\n    } = event;\n    setActive(target.checked);\n    /* istanbul ignore else */\n\n    if (onChange) {\n      onChange(target.checked);\n    }\n  };\n\n  const handleClick = () => {\n    if (onClick && !disabled) {\n      onClick(inputRef.current?.checked || false);\n    }\n  };\n\n  const handleKeyDown = event => {\n    if (disabled || !inputRef.current || ![' ', 'Enter'].includes(event.key)) {\n      return;\n    }\n\n    const status = !isActive;\n    inputRef.current.checked = status;\n    setActive(status);\n  };\n\n  const value = isActive ? 'on' : 'off';\n  const checkStatus = {};\n\n  if (is.boolean(checked)) {\n    checkStatus.checked = checked;\n  } else {\n    checkStatus.defaultChecked = defaultChecked;\n  }\n\n  return _jsxs(Label, {\n    \"data-component-name\": \"Toggle\",\n    inline: true,\n    style: {\n      cursor: disabled ? 'default' : 'pointer'\n    },\n    children: [_jsx(StyledInput, {\n      ref: mergeRefs([inputRef, ref]),\n      \"aria-checked\": isActive,\n      \"aria-label\": !label ? name : undefined,\n      disabled: disabled || is.boolean(checked),\n      name: name,\n      onChange: handleChange,\n      role: \"switch\",\n      type: \"checkbox\",\n      value: value,\n      ...checkStatus\n    }), _jsxs(StyledToggle, {\n      disabled: disabled,\n      label: label,\n      name: name,\n      onClick: handleClick,\n      onKeyDown: handleKeyDown,\n      tabIndex: 0,\n      ...rest,\n      children: [_jsx(StyledTrack, {\n        isActive: isActive,\n        shade: shade,\n        variant: variant\n      }), _jsx(StyledButton, {\n        disabled: disabled,\n        isActive: isActive,\n        shade: shade,\n        variant: variant\n      })]\n    }), label]\n  });\n});\nToggle.defaultProps = {\n  defaultChecked: false,\n  disabled: false,\n  shade: 'mid',\n  variant: 'primary'\n};","map":{"version":3,"mappings":"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","names":["forwardRef","useRef","useState","mergeRefs","usePrevious","useUpdateEffect","css","styled","is","Label","getColorVariant","getTheme","baseStyles","getStyledOptions","isDarkMode","styles","borderRadius","height","space","width","StyledInput","StyledTrack","props","isActive","shade","variant","grayDark","grayLighter","radius","variants","bg","backgroundColor","sm","StyledButton","disabled","grayMid","white","yellow","darker","StyledToggle","label","colors","primary","Toggle","ref","checked","defaultChecked","name","onChange","onClick","rest","inputRef","setActive","boolean","previousChecked","handleChange","event","target","handleClick","current","handleKeyDown","includes","key","status","value","checkStatus","_jsxs","inline","style","cursor","children","_jsx","undefined","role","type","onKeyDown","tabIndex","defaultProps"],"sources":["/My_WORK/graduate_React/frontend/node_modules/@gilbarbara/components/src/Toggle.tsx"],"sourcesContent":["import { ChangeEvent, forwardRef, KeyboardEvent, ReactNode, useRef, useState } from 'react';\nimport mergeRefs from 'react-merge-refs';\nimport { usePrevious, useUpdateEffect } from 'react-use';\nimport { css } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport { AnyObject } from '@gilbarbara/types';\nimport is from 'is-lite';\n\nimport { Label } from './Label';\nimport { getColorVariant, getTheme } from './modules/helpers';\nimport { baseStyles, getStyledOptions, isDarkMode } from './modules/system';\nimport { ComponentProps, StyledProps, WithColor } from './types';\n\nexport interface ToggleKnownProps extends StyledProps, WithColor {\n  /**\n   * Initial status (uncontrolled mode)\n   * @default false\n   */\n  /** Status (controlled mode) */\n  checked?: boolean;\n  defaultChecked?: boolean;\n  disabled?: boolean;\n  label?: ReactNode;\n  name: string;\n  onChange?: (value: boolean) => void;\n  onClick?: (value: boolean) => void;\n}\n\nexport type ToggleProps = ComponentProps<HTMLDivElement, ToggleKnownProps>;\n\ninterface InnerProps extends Omit<ToggleProps, 'name'> {\n  isActive: boolean;\n}\n\nconst styles = {\n  borderRadius: '12px',\n  height: '24px',\n  space: '2px',\n  width: '48px',\n};\n\nconst StyledInput = styled('input')`\n  bottom: 0;\n  left: 0;\n  opacity: 0.0001;\n  position: absolute;\n  right: 0;\n  top: 0;\n`;\n\nconst StyledTrack = styled(\n  'span',\n  getStyledOptions(),\n)<InnerProps>(props => {\n  const { isActive, shade, variant = 'primary' } = props;\n  const { grayDark, grayLighter, radius, variants } = getTheme(props);\n\n  const { bg } = getColorVariant(variant, shade, variants);\n  let backgroundColor = isDarkMode(props) ? grayDark : grayLighter;\n\n  if (isActive) {\n    backgroundColor = bg;\n  }\n\n  return css`\n    background-color: ${backgroundColor};\n    border-radius: ${radius.sm};\n    bottom: 0;\n    left: 0;\n    position: absolute;\n    transition: background-color 0.4s;\n    right: 0;\n    top: 0;\n  `;\n});\n\nconst StyledButton = styled(\n  'span',\n  getStyledOptions(),\n)<InnerProps>(props => {\n  const { disabled, isActive, variant } = props;\n  const { grayMid, variants, white } = getTheme(props);\n\n  let backgroundColor = isDarkMode(props) ? grayMid : white;\n\n  if (isActive) {\n    backgroundColor = variant === 'yellow' ? variants.yellow.darker.bg : white;\n  }\n\n  return css`\n    background-color: ${backgroundColor};\n    border-radius: 50%;\n    bottom: ${styles.space};\n    left: ${isActive ? '26px' : styles.space};\n    opacity: ${disabled ? 0.7 : 1};\n    position: absolute;\n    top: ${styles.space};\n    transition: background-color 0.4s, left 0.2s ease;\n    width: 20px;\n  `;\n});\n\nexport const StyledToggle = styled('div')<ToggleProps>(props => {\n  const { disabled, label } = props;\n  const { colors } = getTheme(props);\n\n  return css`\n    ${baseStyles(props)};\n    cursor: ${disabled ? 'default' : 'pointer'};\n    height: ${styles.height};\n    margin-right: ${label ? '8px' : 0};\n    opacity: ${disabled ? 0.8 : 1};\n    position: relative;\n    user-select: none;\n    vertical-align: middle;\n    width: ${styles.width};\n\n    &:focus {\n      filter: drop-shadow(0 0 4px ${colors.primary});\n      outline: none;\n    }\n  `;\n});\n\nexport const Toggle = forwardRef<HTMLInputElement, ToggleProps>((props, ref) => {\n  const {\n    checked,\n    defaultChecked = false,\n    disabled,\n    label,\n    name,\n    onChange,\n    onClick,\n    shade,\n    variant,\n    ...rest\n  } = props;\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [isActive, setActive] = useState(is.boolean(checked) ? checked : defaultChecked);\n  const previousChecked = usePrevious(checked);\n\n  useUpdateEffect(() => {\n    if (is.boolean(checked) && previousChecked !== checked) {\n      setActive(checked);\n    }\n  }, [checked, previousChecked]);\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { target } = event;\n\n    setActive(target.checked);\n\n    /* istanbul ignore else */\n    if (onChange) {\n      onChange(target.checked);\n    }\n  };\n\n  const handleClick = () => {\n    if (onClick && !disabled) {\n      onClick(inputRef.current?.checked || false);\n    }\n  };\n\n  const handleKeyDown = (event: KeyboardEvent<HTMLSpanElement>) => {\n    if (disabled || !inputRef.current || ![' ', 'Enter'].includes(event.key)) {\n      return;\n    }\n\n    const status = !isActive;\n\n    inputRef.current.checked = status;\n    setActive(status);\n  };\n\n  const value = isActive ? 'on' : 'off';\n  const checkStatus: AnyObject = {};\n\n  if (is.boolean(checked)) {\n    checkStatus.checked = checked;\n  } else {\n    checkStatus.defaultChecked = defaultChecked;\n  }\n\n  return (\n    <Label data-component-name=\"Toggle\" inline style={{ cursor: disabled ? 'default' : 'pointer' }}>\n      <StyledInput\n        ref={mergeRefs([inputRef, ref])}\n        aria-checked={isActive}\n        aria-label={!label ? name : undefined}\n        disabled={disabled || is.boolean(checked)}\n        name={name}\n        onChange={handleChange}\n        role=\"switch\"\n        type=\"checkbox\"\n        value={value}\n        {...checkStatus}\n      />\n      <StyledToggle\n        disabled={disabled}\n        label={label}\n        name={name}\n        onClick={handleClick}\n        onKeyDown={handleKeyDown}\n        tabIndex={0}\n        {...rest}\n      >\n        <StyledTrack isActive={isActive} shade={shade} variant={variant} />\n        <StyledButton disabled={disabled} isActive={isActive} shade={shade} variant={variant} />\n      </StyledToggle>\n      {label}\n    </Label>\n  );\n});\n\nToggle.defaultProps = {\n  defaultChecked: false,\n  disabled: false,\n  shade: 'mid',\n  variant: 'primary',\n};\n"]},"metadata":{},"sourceType":"module"}