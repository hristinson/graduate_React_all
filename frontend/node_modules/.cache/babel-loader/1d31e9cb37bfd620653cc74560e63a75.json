{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport { css, useTheme } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport { ButtonBase } from './ButtonBase';\nimport { Icon } from './Icon';\nimport { getColorVariant, getTheme } from './modules/helpers';\nimport { backgroundStyles, baseStyles, getStyledOptions, marginStyles, textStyles } from './modules/system';\nexport const StyledTag = styled('span', getStyledOptions())(props => {\n  const {\n    color,\n    colorShade,\n    variant\n  } = props;\n  const {\n    radius,\n    spacing,\n    variants\n  } = getTheme(props);\n  const selectedColor = color || (variant && !['black', 'white'].includes(variant) ? variant : undefined);\n  let colorProp;\n\n  if (selectedColor) {\n    colorProp = getColorVariant(selectedColor, colorShade, variants).bg;\n  }\n\n  return css`\n    ${baseStyles(props)};\n    align-items: center;\n    border-radius: ${radius.xs};\n    color: ${colorProp};\n    display: inline-flex;\n    padding: ${spacing.xxs} ${spacing.sm};\n    ${backgroundStyles(props)};\n    ${marginStyles(props)};\n    ${textStyles(props, 1)};\n  `;\n});\nexport const Tag = forwardRef((props, ref) => {\n  const {\n    children,\n    colorShade,\n    iconAfter,\n    iconBefore,\n    onClickAfter,\n    onClickBefore,\n    shade,\n    ...rest\n  } = props;\n  const {\n    typography\n  } = getTheme({\n    theme: useTheme()\n  });\n  const iconSize = rest.size ? parseInt(typography[rest.size].fontSize, 10) : undefined;\n  const icons = {};\n\n  if (iconBefore && onClickBefore) {\n    icons.before = _jsx(ButtonBase, {\n      mr: \"xxs\",\n      onClick: onClickBefore,\n      children: _jsx(Icon, {\n        name: iconBefore,\n        size: iconSize\n      })\n    });\n  } else if (iconBefore) {\n    icons.before = _jsx(Icon, {\n      mr: \"xxs\",\n      name: iconBefore,\n      size: iconSize\n    });\n  }\n\n  if (iconAfter && onClickAfter) {\n    icons.after = _jsx(ButtonBase, {\n      ml: \"xxs\",\n      onClick: onClickAfter,\n      children: _jsx(Icon, {\n        name: iconAfter,\n        size: iconSize\n      })\n    });\n  } else if (iconAfter) {\n    icons.after = _jsx(Icon, {\n      ml: \"xxs\",\n      name: iconAfter,\n      size: iconSize\n    });\n  }\n\n  return _jsxs(StyledTag, {\n    ref: ref,\n    \"data-component-name\": \"Tag\",\n    ...rest,\n    colorShade: rest.invert && !colorShade ? 'mid' : colorShade || 'dark',\n    shade: rest.invert && !shade ? 'mid' : shade || 'lightest',\n    children: [icons.before, _jsx(\"span\", {\n      children: children\n    }), icons.after]\n  });\n});\nTag.defaultProps = {\n  bold: false,\n  invert: false,\n  size: 'mid',\n  variant: 'primary'\n};","map":{"version":3,"mappings":"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","names":["forwardRef","css","useTheme","styled","ButtonBase","Icon","getColorVariant","getTheme","backgroundStyles","baseStyles","getStyledOptions","marginStyles","textStyles","StyledTag","props","color","colorShade","variant","radius","spacing","variants","selectedColor","includes","undefined","colorProp","bg","xs","xxs","sm","Tag","ref","children","iconAfter","iconBefore","onClickAfter","onClickBefore","shade","rest","typography","theme","iconSize","size","parseInt","fontSize","icons","before","_jsx","mr","onClick","name","after","ml","_jsxs","invert","defaultProps","bold"],"sources":["/My_WORK/graduate_React/frontend/node_modules/@gilbarbara/components/src/Tag.tsx"],"sourcesContent":["import { CSSProperties, forwardRef, MouseEvent } from 'react';\nimport { css, useTheme } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport { AnyObject } from '@gilbarbara/types';\n\nimport { ButtonBase } from './ButtonBase';\nimport { Icon } from './Icon';\nimport { getColorVariant, getTheme } from './modules/helpers';\nimport {\n  backgroundStyles,\n  baseStyles,\n  getStyledOptions,\n  marginStyles,\n  textStyles,\n} from './modules/system';\nimport {\n  Icons,\n  Shades,\n  StyledProps,\n  Variants,\n  WithChildren,\n  WithColor,\n  WithMargin,\n  WithTextOptions,\n} from './types';\n\nexport interface TagProps\n  extends StyledProps,\n    WithChildren,\n    WithColor,\n    WithMargin,\n    WithTextOptions {\n  color?: Variants;\n  colorShade?: Shades;\n  iconAfter?: Icons;\n  iconBefore?: Icons;\n  invert?: boolean;\n  onClickAfter?: (event: MouseEvent) => void;\n  onClickBefore?: (event: MouseEvent) => void;\n  style?: CSSProperties;\n}\n\nexport const StyledTag = styled(\n  'span',\n  getStyledOptions(),\n)<TagProps>(props => {\n  const { color, colorShade, variant } = props;\n  const { radius, spacing, variants } = getTheme(props);\n\n  const selectedColor =\n    color || (variant && !['black', 'white'].includes(variant) ? variant : undefined);\n  let colorProp: string | undefined;\n\n  if (selectedColor) {\n    colorProp = getColorVariant(selectedColor, colorShade, variants).bg;\n  }\n\n  return css`\n    ${baseStyles(props)};\n    align-items: center;\n    border-radius: ${radius.xs};\n    color: ${colorProp};\n    display: inline-flex;\n    padding: ${spacing.xxs} ${spacing.sm};\n    ${backgroundStyles(props)};\n    ${marginStyles(props)};\n    ${textStyles(props, 1)};\n  `;\n});\n\nexport const Tag = forwardRef<HTMLSpanElement, TagProps>((props, ref) => {\n  const {\n    children,\n    colorShade,\n    iconAfter,\n    iconBefore,\n    onClickAfter,\n    onClickBefore,\n    shade,\n    ...rest\n  } = props;\n  const { typography } = getTheme({ theme: useTheme() });\n\n  const iconSize = rest.size ? parseInt(typography[rest.size].fontSize, 10) : undefined;\n  const icons: AnyObject = {};\n\n  if (iconBefore && onClickBefore) {\n    icons.before = (\n      <ButtonBase mr=\"xxs\" onClick={onClickBefore}>\n        <Icon name={iconBefore} size={iconSize} />\n      </ButtonBase>\n    );\n  } else if (iconBefore) {\n    icons.before = <Icon mr=\"xxs\" name={iconBefore} size={iconSize} />;\n  }\n\n  if (iconAfter && onClickAfter) {\n    icons.after = (\n      <ButtonBase ml=\"xxs\" onClick={onClickAfter}>\n        <Icon name={iconAfter} size={iconSize} />\n      </ButtonBase>\n    );\n  } else if (iconAfter) {\n    icons.after = <Icon ml=\"xxs\" name={iconAfter} size={iconSize} />;\n  }\n\n  return (\n    <StyledTag\n      ref={ref}\n      data-component-name=\"Tag\"\n      {...rest}\n      colorShade={rest.invert && !colorShade ? 'mid' : colorShade || 'dark'}\n      shade={rest.invert && !shade ? 'mid' : shade || 'lightest'}\n    >\n      {icons.before}\n      <span>{children}</span>\n      {icons.after}\n    </StyledTag>\n  );\n});\n\nTag.defaultProps = {\n  bold: false,\n  invert: false,\n  size: 'mid',\n  variant: 'primary',\n};\n"]},"metadata":{},"sourceType":"module"}