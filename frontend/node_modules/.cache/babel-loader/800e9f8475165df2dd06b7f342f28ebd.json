{"ast":null,"code":"import hex2rgb from './hex2rgb';\nimport { invariant, isString, messages, round } from './modules/utils';\nimport parseCSS from './parse-css';\n/**\n * Get the luminance of a color.\n */\n\nexport default function luminance(input) {\n  invariant(isString(input), messages.inputString);\n  const {\n    r,\n    g,\n    b\n  } = hex2rgb(parseCSS(input));\n  const rgb = [r / 255, g / 255, b / 255];\n\n  for (let index = 0; index < rgb.length; index++) {\n    if (rgb[index] <= 0.03928) {\n      rgb[index] /= 12.92;\n    } else {\n      rgb[index] = ((rgb[index] + 0.055) / 1.055) ** 2.4;\n    }\n  }\n\n  return round(0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2], 4);\n}","map":{"version":3,"mappings":"AAAA,OAAOA,OAAP,MAAoB,WAApB;AACA,SAASC,SAAT,EAAoBC,QAApB,EAA8BC,QAA9B,EAAwCC,KAAxC,QAAqD,iBAArD;AACA,OAAOC,QAAP,MAAqB,aAArB;AAEA;;;;AAGA,eAAc,SAAUC,SAAV,CAAoBC,KAApB,EAAiC;EAC7CN,SAAS,CAACC,QAAQ,CAACK,KAAD,CAAT,EAAkBJ,QAAQ,CAACK,WAA3B,CAAT;EAEA,MAAM;IAAEC,CAAF;IAAKC,CAAL;IAAQC;EAAR,IAAcX,OAAO,CAACK,QAAQ,CAACE,KAAD,CAAT,CAA3B;EAEA,MAAMK,GAAG,GAAG,CAACH,CAAC,GAAG,GAAL,EAAUC,CAAC,GAAG,GAAd,EAAmBC,CAAC,GAAG,GAAvB,CAAZ;;EAEA,KAAK,IAAIE,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGD,GAAG,CAACE,MAAhC,EAAwCD,KAAK,EAA7C,EAAiD;IAC/C,IAAID,GAAG,CAACC,KAAD,CAAH,IAAc,OAAlB,EAA2B;MACzBD,GAAG,CAACC,KAAD,CAAH,IAAc,KAAd;IACD,CAFD,MAEO;MACLD,GAAG,CAACC,KAAD,CAAH,GAAa,CAAC,CAACD,GAAG,CAACC,KAAD,CAAH,GAAa,KAAd,IAAuB,KAAxB,KAAkC,GAA/C;IACD;EACF;;EAED,OAAOT,KAAK,CAAC,SAASQ,GAAG,CAAC,CAAD,CAAZ,GAAkB,SAASA,GAAG,CAAC,CAAD,CAA9B,GAAoC,SAASA,GAAG,CAAC,CAAD,CAAjD,EAAsD,CAAtD,CAAZ;AACD","names":["hex2rgb","invariant","isString","messages","round","parseCSS","luminance","input","inputString","r","g","b","rgb","index","length"],"sources":["/My_WORK/graduate_React/frontend/node_modules/colorizr/src/luminance.ts"],"sourcesContent":["import hex2rgb from './hex2rgb';\nimport { invariant, isString, messages, round } from './modules/utils';\nimport parseCSS from './parse-css';\n\n/**\n * Get the luminance of a color.\n */\nexport default function luminance(input: string): number {\n  invariant(isString(input), messages.inputString);\n\n  const { r, g, b } = hex2rgb(parseCSS(input));\n\n  const rgb = [r / 255, g / 255, b / 255];\n\n  for (let index = 0; index < rgb.length; index++) {\n    if (rgb[index] <= 0.03928) {\n      rgb[index] /= 12.92;\n    } else {\n      rgb[index] = ((rgb[index] + 0.055) / 1.055) ** 2.4;\n    }\n  }\n\n  return round(0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2], 4);\n}\n"]},"metadata":{},"sourceType":"module"}