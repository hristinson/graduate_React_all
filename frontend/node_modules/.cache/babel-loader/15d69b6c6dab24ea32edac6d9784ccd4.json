{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useMemo, useRef } from 'react';\nimport innerText from 'react-innertext';\nimport { useSetState, useUpdateEffect } from 'react-use';\nimport { useTheme } from '@emotion/react';\nimport Body from './Body';\nimport Head from './Head';\nimport { Box, BoxCenter } from '../Box';\nimport { scrollTo } from '../modules/animations';\nimport { getElementProperty } from '../modules/helpers';\nimport { Pagination } from '../Pagination';\nimport { Text } from '../Text';\n\nfunction sortData(data, sortBy, sortDirection) {\n  return [...data].sort((a, b) => {\n    let left = innerText(a[sortBy]);\n    let right = innerText(b[sortBy]);\n\n    if (sortBy === 'date') {\n      left = getElementProperty(a[sortBy], {\n        type: 'time',\n        property: 'dateTime'\n      }) || left;\n      right = getElementProperty(b[sortBy], {\n        type: 'time',\n        property: 'dateTime'\n      }) || right;\n    }\n\n    if (sortDirection === 'desc') {\n      return right.toLowerCase().localeCompare(left.toLowerCase());\n    }\n\n    return left.toLowerCase().localeCompare(right.toLowerCase());\n  });\n}\n\nexport function DataTable(props) {\n  const {\n    breakpoint = 768,\n    clean,\n    columns,\n    data,\n    defaultColumn,\n    disableScroll,\n    loading = false,\n    maxRows = 10,\n    noResults,\n    onClickPage,\n    onClickSort,\n    pagination = true,\n    paginationCurrentPage,\n    paginationServer,\n    paginationTotalPages,\n    responsive = false,\n    scrollDuration = 400,\n    scrollElement,\n    scrollMargin = 16,\n    width,\n    ...rest\n  } = props;\n  const {\n    darkMode = false\n  } = useTheme();\n  const element = useRef(null);\n  const sortByDefault = defaultColumn || columns?.[0].key;\n  const [{\n    currentPage,\n    sortBy,\n    sortDirection\n  }, setState] = useSetState({\n    currentPage: 1,\n    sortBy: sortByDefault,\n    sortDirection: 'asc'\n  });\n  useUpdateEffect(() => {\n    const minLength = currentPage * maxRows - maxRows;\n\n    if (data.length < minLength) {\n      setState({\n        currentPage: 1\n      });\n    }\n  }, [currentPage, data.length, maxRows, setState]);\n  const isResponsive = responsive && (width ?? window.innerWidth) < breakpoint;\n  const totalPages = Math.ceil(data.length / maxRows);\n\n  const handleClickPage = event => {\n    const {\n      page\n    } = event.currentTarget.dataset;\n    const pageNumber = Number(page);\n    const scrollTarget = scrollElement || element.current;\n\n    if (onClickPage) {\n      onClickPage(pageNumber, paginationTotalPages || totalPages);\n    }\n\n    if (scrollTarget && !disableScroll) {\n      scrollTo(scrollTarget.getBoundingClientRect().top - scrollMargin, {\n        scrollDuration\n      });\n    }\n\n    if (paginationServer) {\n      return;\n    }\n\n    setState({\n      currentPage: pageNumber\n    });\n  };\n\n  const handleClickSort = event => {\n    const {\n      direction,\n      name = ''\n    } = event.currentTarget.dataset;\n    const reverseDirection = direction === 'asc' ? 'desc' : 'asc';\n    const nextDirection = sortBy === name ? reverseDirection : 'asc';\n    const options = {\n      sortBy: name,\n      sortDirection: nextDirection\n    };\n\n    if (onClickSort) {\n      onClickSort(name, nextDirection);\n    }\n\n    if (paginationServer) {\n      setState(options);\n      return;\n    }\n\n    setState(options);\n  };\n\n  const isEmpty = !loading && !data.length;\n  const rows = useMemo(() => {\n    return paginationServer ? data : sortData(data, sortBy, sortDirection);\n  }, [data, paginationServer, sortBy, sortDirection]);\n  const body = useMemo(() => {\n    if (isEmpty) {\n      return _jsx(BoxCenter, {\n        padding: \"md\",\n        radius: \"sm\",\n        variant: \"white\",\n        width: \"100%\",\n        children: noResults || _jsx(Text, {\n          bold: true,\n          children: \"Nothing found\"\n        })\n      });\n    }\n\n    return _jsx(Body, {\n      clean: clean,\n      columns: columns,\n      data: rows.slice(maxRows * (currentPage - 1), maxRows * currentPage),\n      defaultColumn: defaultColumn,\n      isResponsive: isResponsive,\n      loading: loading\n    });\n  }, [clean, columns, currentPage, defaultColumn, isEmpty, isResponsive, loading, maxRows, noResults, rows]);\n  const styles = {};\n\n  if (!clean) {\n    styles.padding = 'md';\n    styles.shade = darkMode ? 'darker' : 'lightest';\n    styles.variant = 'gray';\n  }\n\n  return _jsxs(Box, {\n    ref: element,\n    \"data-component-name\": \"DataTable\",\n    maxWidth: \"100%\",\n    radius: \"xxs\",\n    width: width,\n    ...styles,\n    ...rest,\n    children: [_jsx(Head, {\n      clean: clean,\n      columns: columns,\n      isDisabled: loading || isEmpty,\n      isResponsive: isResponsive,\n      onClick: handleClickSort,\n      sortBy: sortBy,\n      sortDirection: sortDirection\n    }), body, pagination && _jsx(Box, {\n      border: clean ? [{\n        side: 'top'\n      }] : undefined,\n      pt: clean ? 'sm' : undefined,\n      children: _jsx(Pagination, {\n        currentPage: paginationCurrentPage || currentPage,\n        onClick: handleClickPage,\n        totalPages: paginationTotalPages || totalPages\n      })\n    })]\n  });\n}\nDataTable.defaultProps = {\n  breakpoint: 768,\n  clean: false,\n  loading: false,\n  maxRows: 10,\n  pagination: true,\n  responsive: false,\n  scrollDuration: 400,\n  scrollMargin: 16\n};","map":{"version":3,"mappings":"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","names":["useMemo","useRef","innerText","useSetState","useUpdateEffect","useTheme","Body","Head","Box","BoxCenter","scrollTo","getElementProperty","Pagination","Text","sortData","data","sortBy","sortDirection","sort","a","b","left","right","type","property","toLowerCase","localeCompare","DataTable","props","breakpoint","clean","columns","defaultColumn","disableScroll","loading","maxRows","noResults","onClickPage","onClickSort","pagination","paginationCurrentPage","paginationServer","paginationTotalPages","responsive","scrollDuration","scrollElement","scrollMargin","width","rest","darkMode","element","sortByDefault","key","currentPage","setState","minLength","length","isResponsive","window","innerWidth","totalPages","Math","ceil","handleClickPage","event","page","currentTarget","dataset","pageNumber","Number","scrollTarget","current","getBoundingClientRect","top","handleClickSort","direction","name","reverseDirection","nextDirection","options","isEmpty","rows","body","_jsx","padding","radius","variant","children","bold","slice","styles","shade","_jsxs","ref","maxWidth","isDisabled","onClick","border","side","undefined","pt","defaultProps"],"sources":["/My_WORK/graduate_React/frontend/node_modules/@gilbarbara/components/src/DataTable/index.tsx"],"sourcesContent":["import { CSSProperties, MouseEvent, ReactNode, useMemo, useRef } from 'react';\nimport innerText from 'react-innertext';\nimport { useSetState, useUpdateEffect } from 'react-use';\nimport { useTheme } from '@emotion/react';\nimport { AnyObject, StringOrNumber } from '@gilbarbara/types';\n\nimport Body from './Body';\nimport Head from './Head';\n\nimport { Box, BoxCenter } from '../Box';\nimport { scrollTo } from '../modules/animations';\nimport { getElementProperty } from '../modules/helpers';\nimport { Pagination } from '../Pagination';\nimport { Text } from '../Text';\nimport { ComponentProps, StyledProps, WithFlexItem, WithLayout, WithMargin } from '../types';\n\nexport interface DataTableColumn<T = string> {\n  disableSort?: boolean;\n  hideOnResponsive?: boolean;\n  isAction?: boolean;\n  key: T;\n  max?: StringOrNumber;\n  min?: StringOrNumber;\n  size?: StringOrNumber;\n  title: ReactNode;\n}\n\nexport interface DataTableKnownProps extends StyledProps, WithFlexItem, WithLayout, WithMargin {\n  /** @default 768 */\n  breakpoint?: number;\n  /**\n   * No background and padding\n   * @default false\n   */\n  clean?: boolean;\n  columns: DataTableColumn[];\n  data: AnyObject[];\n  defaultColumn?: string;\n  disableScroll?: boolean;\n  /** @default false */\n  loading?: boolean;\n  /** @default 10 */\n  maxRows?: number;\n  noResults?: ReactNode;\n  onClickPage?: (page: number, totalPages: number) => void;\n  onClickSort?: (sortBy: string, sortDirection: string) => void;\n  pagination?: boolean;\n  paginationCurrentPage?: number;\n  paginationServer?: boolean;\n  paginationTotalPages?: number;\n  /** @default false */\n  responsive?: boolean;\n  /** @default 400 */\n  scrollDuration?: number;\n  scrollElement?: HTMLElement | null;\n  scrollMargin?: number;\n  style?: CSSProperties;\n  /** @default window.innerWidth */\n  width?: StringOrNumber;\n}\n\nexport type DataTableProps = ComponentProps<HTMLDivElement, DataTableKnownProps, 'data' | 'wrap'>;\n\nfunction sortData(data: any[], sortBy: string, sortDirection: string) {\n  return [...data].sort((a, b) => {\n    let left = innerText(a[sortBy]);\n    let right = innerText(b[sortBy]);\n\n    if (sortBy === 'date') {\n      left = getElementProperty(a[sortBy], { type: 'time', property: 'dateTime' }) || left;\n      right = getElementProperty(b[sortBy], { type: 'time', property: 'dateTime' }) || right;\n    }\n\n    if (sortDirection === 'desc') {\n      return right.toLowerCase().localeCompare(left.toLowerCase());\n    }\n\n    return left.toLowerCase().localeCompare(right.toLowerCase());\n  });\n}\n\nexport function DataTable(props: DataTableProps): JSX.Element {\n  const {\n    breakpoint = 768,\n    clean,\n    columns,\n    data,\n    defaultColumn,\n    disableScroll,\n    loading = false,\n    maxRows = 10,\n    noResults,\n    onClickPage,\n    onClickSort,\n    pagination = true,\n    paginationCurrentPage,\n    paginationServer,\n    paginationTotalPages,\n    responsive = false,\n    scrollDuration = 400,\n    scrollElement,\n    scrollMargin = 16,\n    width,\n    ...rest\n  } = props;\n  const { darkMode = false } = useTheme();\n  const element = useRef<HTMLDivElement>(null);\n\n  const sortByDefault = defaultColumn || columns?.[0].key;\n\n  const [{ currentPage, sortBy, sortDirection }, setState] = useSetState({\n    currentPage: 1,\n    sortBy: sortByDefault,\n    sortDirection: 'asc',\n  });\n\n  useUpdateEffect(() => {\n    const minLength = currentPage * maxRows - maxRows;\n\n    if (data.length < minLength) {\n      setState({ currentPage: 1 });\n    }\n  }, [currentPage, data.length, maxRows, setState]);\n\n  const isResponsive = responsive && (width ?? window.innerWidth) < breakpoint;\n  const totalPages = Math.ceil(data.length / maxRows);\n\n  const handleClickPage = (event: MouseEvent<HTMLButtonElement>) => {\n    const { page } = event.currentTarget.dataset;\n    const pageNumber = Number(page);\n    const scrollTarget = scrollElement || element.current;\n\n    if (onClickPage) {\n      onClickPage(pageNumber, paginationTotalPages || totalPages);\n    }\n\n    if (scrollTarget && !disableScroll) {\n      scrollTo(scrollTarget.getBoundingClientRect().top - scrollMargin, { scrollDuration });\n    }\n\n    if (paginationServer) {\n      return;\n    }\n\n    setState({ currentPage: pageNumber });\n  };\n\n  const handleClickSort = (event: MouseEvent<HTMLButtonElement>) => {\n    const { direction, name = '' } = event.currentTarget.dataset;\n    const reverseDirection = direction === 'asc' ? 'desc' : 'asc';\n    const nextDirection = sortBy === name ? reverseDirection : 'asc';\n\n    const options = {\n      sortBy: name,\n      sortDirection: nextDirection,\n    };\n\n    if (onClickSort) {\n      onClickSort(name, nextDirection);\n    }\n\n    if (paginationServer) {\n      setState(options);\n\n      return;\n    }\n\n    setState(options);\n  };\n\n  const isEmpty = !loading && !data.length;\n  const rows = useMemo(() => {\n    return paginationServer ? data : sortData(data, sortBy, sortDirection);\n  }, [data, paginationServer, sortBy, sortDirection]);\n\n  const body = useMemo(() => {\n    if (isEmpty) {\n      return (\n        <BoxCenter padding=\"md\" radius=\"sm\" variant=\"white\" width=\"100%\">\n          {noResults || <Text bold>Nothing found</Text>}\n        </BoxCenter>\n      );\n    }\n\n    return (\n      <Body\n        clean={clean}\n        columns={columns}\n        data={rows.slice(maxRows * (currentPage - 1), maxRows * currentPage)}\n        defaultColumn={defaultColumn}\n        isResponsive={isResponsive}\n        loading={loading}\n      />\n    );\n  }, [\n    clean,\n    columns,\n    currentPage,\n    defaultColumn,\n    isEmpty,\n    isResponsive,\n    loading,\n    maxRows,\n    noResults,\n    rows,\n  ]);\n\n  const styles: AnyObject = {};\n\n  if (!clean) {\n    styles.padding = 'md';\n    styles.shade = darkMode ? 'darker' : 'lightest';\n    styles.variant = 'gray';\n  }\n\n  return (\n    <Box\n      ref={element}\n      data-component-name=\"DataTable\"\n      maxWidth=\"100%\"\n      radius=\"xxs\"\n      width={width}\n      {...styles}\n      {...rest}\n    >\n      <Head\n        clean={clean}\n        columns={columns}\n        isDisabled={loading || isEmpty}\n        isResponsive={isResponsive}\n        onClick={handleClickSort}\n        sortBy={sortBy}\n        sortDirection={sortDirection}\n      />\n      {body}\n      {pagination && (\n        <Box border={clean ? [{ side: 'top' }] : undefined} pt={clean ? 'sm' : undefined}>\n          <Pagination\n            currentPage={paginationCurrentPage || currentPage}\n            onClick={handleClickPage}\n            totalPages={paginationTotalPages || totalPages}\n          />\n        </Box>\n      )}\n    </Box>\n  );\n}\n\nDataTable.defaultProps = {\n  breakpoint: 768,\n  clean: false,\n  loading: false,\n  maxRows: 10,\n  pagination: true,\n  responsive: false,\n  scrollDuration: 400,\n  scrollMargin: 16,\n};\n"]},"metadata":{},"sourceType":"module"}