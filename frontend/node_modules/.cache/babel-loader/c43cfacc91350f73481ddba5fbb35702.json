{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { memo, useEffect, useRef } from 'react';\nconst DISPLAY = {\n  BLOCK: 'block',\n  FLEX: 'flex',\n  INLINE: 'inline',\n  INLINE_BLOCK: 'inline-block',\n  CONTENTS: 'contents'\n};\nexport function ClickOutside(props) {\n  const {\n    active,\n    children,\n    display = DISPLAY.BLOCK,\n    onClick,\n    ...rest\n  } = props;\n  const containerRef = useRef(null);\n  const isTouch = useRef(false);\n  const handleClick = useRef(event => {\n    const container = containerRef.current;\n\n    if (event.type === 'touchend') {\n      isTouch.current = true;\n    }\n\n    if (event.type === 'click' && isTouch.current) {\n      return;\n    }\n\n    if (container && !container.contains(event.target)) {\n      onClick();\n    }\n  });\n  useEffect(() => {\n    const {\n      current\n    } = handleClick;\n\n    if (active) {\n      document.addEventListener('touchend', current, true);\n      document.addEventListener('click', current, true);\n    }\n\n    return () => {\n      document.removeEventListener('touchend', current, true);\n      document.removeEventListener('click', current, true);\n    };\n  }, [active]);\n  return _jsx(\"div\", {\n    ref: containerRef,\n    \"data-component-name\": \"ClickOutside\",\n    style: display !== DISPLAY.BLOCK && Object.values(DISPLAY).includes(display) ? {\n      display\n    } : undefined,\n    ...rest,\n    children: children\n  });\n}\nexport const ClickOutsideMemo = memo(ClickOutside);","map":{"version":3,"mappings":";AAAA,SAASA,IAAT,EAAeC,SAAf,EAA0BC,MAA1B,QAAwC,OAAxC;AAWA,MAAMC,OAAO,GAAG;EACdC,KAAK,EAAE,OADO;EAEdC,IAAI,EAAE,MAFQ;EAGdC,MAAM,EAAE,QAHM;EAIdC,YAAY,EAAE,cAJA;EAKdC,QAAQ,EAAE;AALI,CAAhB;AAQA,OAAM,SAAUC,YAAV,CAAuBC,KAAvB,EAA+C;EACnD,MAAM;IAAEC,MAAF;IAAUC,QAAV;IAAoBC,OAAO,GAAGV,OAAO,CAACC,KAAtC;IAA6CU,OAA7C;IAAsD,GAAGC;EAAzD,IAAkEL,KAAxE;EACA,MAAMM,YAAY,GAAGd,MAAM,CAAiB,IAAjB,CAA3B;EACA,MAAMe,OAAO,GAAGf,MAAM,CAAC,KAAD,CAAtB;EAEA,MAAMgB,WAAW,GAAGhB,MAAM,CAAEiB,KAAD,IAAmC;IAC5D,MAAMC,SAAS,GAAGJ,YAAY,CAACK,OAA/B;;IAEA,IAAIF,KAAK,CAACG,IAAN,KAAe,UAAnB,EAA+B;MAC7BL,OAAO,CAACI,OAAR,GAAkB,IAAlB;IACD;;IAED,IAAIF,KAAK,CAACG,IAAN,KAAe,OAAf,IAA0BL,OAAO,CAACI,OAAtC,EAA+C;MAC7C;IACD;;IAED,IAAID,SAAS,IAAI,CAACA,SAAS,CAACG,QAAV,CAAmBJ,KAAK,CAACK,MAAzB,CAAlB,EAA4D;MAC1DV,OAAO;IACR;EACF,CAdyB,CAA1B;EAgBAb,SAAS,CAAC,MAAK;IACb,MAAM;MAAEoB;IAAF,IAAcH,WAApB;;IAEA,IAAIP,MAAJ,EAAY;MACVc,QAAQ,CAACC,gBAAT,CAA0B,UAA1B,EAAsCL,OAAtC,EAA+C,IAA/C;MACAI,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmCL,OAAnC,EAA4C,IAA5C;IACD;;IAED,OAAO,MAAK;MACVI,QAAQ,CAACE,mBAAT,CAA6B,UAA7B,EAAyCN,OAAzC,EAAkD,IAAlD;MACAI,QAAQ,CAACE,mBAAT,CAA6B,OAA7B,EAAsCN,OAAtC,EAA+C,IAA/C;IACD,CAHD;EAID,CAZQ,EAYN,CAACV,MAAD,CAZM,CAAT;EAcA,OACEiB;IACEC,GAAG,EAAEb,YADP;IACmB,uBACG,cAFtB;IAGEc,KAAK,EACHjB,OAAO,KAAKV,OAAO,CAACC,KAApB,IAA6B2B,MAAM,CAACC,MAAP,CAAc7B,OAAd,EAAuB8B,QAAvB,CAAgCpB,OAAhC,CAA7B,GACI;MAAEA;IAAF,CADJ,GAEIqB,SANR;IAMiB,GAEXnB,IARN;IAQUH,UAEPA;EAVH,EADF;AAcD;AAED,OAAO,MAAMuB,gBAAgB,GAAGnC,IAAI,CAACS,YAAD,CAA7B","names":["memo","useEffect","useRef","DISPLAY","BLOCK","FLEX","INLINE","INLINE_BLOCK","CONTENTS","ClickOutside","props","active","children","display","onClick","rest","containerRef","isTouch","handleClick","event","container","current","type","contains","target","document","addEventListener","removeEventListener","_jsx","ref","style","Object","values","includes","undefined","ClickOutsideMemo"],"sources":["/My_WORK/graduate_React/frontend/node_modules/@gilbarbara/components/src/ClickOutside.tsx"],"sourcesContent":["import { memo, useEffect, useRef } from 'react';\nimport { ValueOf } from 'type-fest';\n\nimport { WithChildren } from './types';\n\nexport interface ClickOutsideProps extends WithChildren {\n  active: boolean;\n  display?: ValueOf<typeof DISPLAY>;\n  onClick: () => void;\n}\n\nconst DISPLAY = {\n  BLOCK: 'block',\n  FLEX: 'flex',\n  INLINE: 'inline',\n  INLINE_BLOCK: 'inline-block',\n  CONTENTS: 'contents',\n} as const;\n\nexport function ClickOutside(props: ClickOutsideProps) {\n  const { active, children, display = DISPLAY.BLOCK, onClick, ...rest } = props;\n  const containerRef = useRef<HTMLDivElement>(null);\n  const isTouch = useRef(false);\n\n  const handleClick = useRef((event: MouseEvent | TouchEvent) => {\n    const container = containerRef.current;\n\n    if (event.type === 'touchend') {\n      isTouch.current = true;\n    }\n\n    if (event.type === 'click' && isTouch.current) {\n      return;\n    }\n\n    if (container && !container.contains(event.target as Node)) {\n      onClick();\n    }\n  });\n\n  useEffect(() => {\n    const { current } = handleClick;\n\n    if (active) {\n      document.addEventListener('touchend', current, true);\n      document.addEventListener('click', current, true);\n    }\n\n    return () => {\n      document.removeEventListener('touchend', current, true);\n      document.removeEventListener('click', current, true);\n    };\n  }, [active]);\n\n  return (\n    <div\n      ref={containerRef}\n      data-component-name=\"ClickOutside\"\n      style={\n        display !== DISPLAY.BLOCK && Object.values(DISPLAY).includes(display)\n          ? { display }\n          : undefined\n      }\n      {...rest}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport const ClickOutsideMemo = memo(ClickOutside);\n"]},"metadata":{},"sourceType":"module"}