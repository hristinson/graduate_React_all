{"ast":null,"code":"\"client\";\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = dynamic;\nexports.noSSR = noSSR;\n\nvar _extends = require(\"@swc/helpers/lib/_extends.js\").default;\n\nvar _interop_require_default = require(\"@swc/helpers/lib/_interop_require_default.js\").default;\n\nvar _react = _interop_require_default(require(\"react\"));\n\nvar _loadable = _interop_require_default(require(\"./loadable\"));\n\nfunction dynamic(dynamicOptions, options) {\n  let loadableFn = _loadable.default;\n  let loadableOptions = (options == null ? void 0 : options.suspense) ? {} : {\n    // A loading component is not required, so we default it\n    loading: _ref => {\n      let {\n        error,\n        isLoading,\n        pastDelay\n      } = _ref;\n      if (!pastDelay) return null;\n\n      if (process.env.NODE_ENV === 'development') {\n        if (isLoading) {\n          return null;\n        }\n\n        if (error) {\n          return /*#__PURE__*/_react.default.createElement(\"p\", null, error.message, /*#__PURE__*/_react.default.createElement(\"br\", null), error.stack);\n        }\n      }\n\n      return null;\n    }\n  }; // Support for direct import(), eg: dynamic(import('../hello-world'))\n  // Note that this is only kept for the edge case where someone is passing in a promise as first argument\n  // The react-loadable babel plugin will turn dynamic(import('../hello-world')) into dynamic(() => import('../hello-world'))\n  // To make sure we don't execute the import without rendering first\n\n  if (dynamicOptions instanceof Promise) {\n    loadableOptions.loader = () => dynamicOptions; // Support for having import as a function, eg: dynamic(() => import('../hello-world'))\n\n  } else if (typeof dynamicOptions === 'function') {\n    loadableOptions.loader = dynamicOptions; // Support for having first argument being options, eg: dynamic({loader: import('../hello-world')})\n  } else if (typeof dynamicOptions === 'object') {\n    loadableOptions = _extends({}, loadableOptions, dynamicOptions);\n  } // Support for passing options, eg: dynamic(import('../hello-world'), {loading: () => <p>Loading something</p>})\n\n\n  loadableOptions = _extends({}, loadableOptions, options); // Error if Fizz rendering is not enabled and `suspense` option is set to true\n\n  if (!process.env.__NEXT_REACT_ROOT && loadableOptions.suspense) {\n    throw new Error(`Invalid suspense option usage in next/dynamic. Read more: https://nextjs.org/docs/messages/invalid-dynamic-suspense`);\n  }\n\n  if (loadableOptions.suspense) {\n    if (process.env.NODE_ENV !== 'production') {\n      /**\n      * TODO: Currently, next/dynamic will opt-in to React.lazy if { suspense: true } is used\n      * React 18 will always resolve the Suspense boundary on the server-side, effectively ignoring the ssr option\n      *\n      * In the future, when React Suspense with third-party libraries is stable, we can implement a custom version of\n      * React.lazy that can suspense on the server-side while only loading the component on the client-side\n      */\n      if (loadableOptions.ssr === false) {\n        console.warn(`\"ssr: false\" is ignored by next/dynamic because you can not enable \"suspense\" while disabling \"ssr\" at the same time. Read more: https://nextjs.org/docs/messages/invalid-dynamic-suspense`);\n      }\n\n      if (loadableOptions.loading != null) {\n        console.warn(`\"loading\" is ignored by next/dynamic because you have enabled \"suspense\". Place your loading element in your suspense boundary's \"fallback\" prop instead. Read more: https://nextjs.org/docs/messages/invalid-dynamic-suspense`);\n      }\n    }\n\n    delete loadableOptions.ssr;\n    delete loadableOptions.loading;\n  } // coming from build/babel/plugins/react-loadable-plugin.js\n\n\n  if (loadableOptions.loadableGenerated) {\n    loadableOptions = _extends({}, loadableOptions, loadableOptions.loadableGenerated);\n    delete loadableOptions.loadableGenerated;\n  } // support for disabling server side rendering, eg: dynamic(import('../hello-world'), {ssr: false}).\n  // skip `ssr` for suspense mode and opt-in React.lazy directly\n\n\n  if (typeof loadableOptions.ssr === 'boolean' && !loadableOptions.suspense) {\n    if (!loadableOptions.ssr) {\n      delete loadableOptions.ssr;\n      return noSSR(loadableFn, loadableOptions);\n    }\n\n    delete loadableOptions.ssr;\n  }\n\n  return loadableFn(loadableOptions);\n}\n\n'client';\nconst isServerSide = typeof window === 'undefined';\n\nfunction noSSR(LoadableInitializer, loadableOptions) {\n  // Removing webpack and modules means react-loadable won't try preloading\n  delete loadableOptions.webpack;\n  delete loadableOptions.modules; // This check is necessary to prevent react-loadable from initializing on the server\n\n  if (!isServerSide) {\n    return LoadableInitializer(loadableOptions);\n  }\n\n  const Loading = loadableOptions.loading; // This will only be rendered on the server side\n\n  return () => /*#__PURE__*/_react.default.createElement(Loading, {\n    error: null,\n    isLoading: true,\n    pastDelay: false,\n    timedOut: false\n  });\n}\n\nif ((typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) && typeof exports.default.__esModule === 'undefined') {\n  Object.defineProperty(exports.default, '__esModule', {\n    value: true\n  });\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n}","map":{"version":3,"mappings":"AAAA;;;;;;QA4CgBA;;;;;AA1CE,4BAAO,kEAAP;;AACG,aAAYC,0CAAZ;;AA6DN,aAASC,GAAOD,wBAEF,QACH,cADG,CAFd;;SAITE,wBAAoCC;EAExC,IAAIC,sBAAsCD,QAA1C;MAIMC,kEAAwD,EAAxD,GAAwD;IACxDC;WACE,EAAKC,QAAsB;MAAA,IAAtBA;QAAAA;QAAWC,SAAXD;QAAsBA;MAAtBA,CAAsB;MAC3B,IAAIE,UAAJ,EAAgBC;;UACdD,OAAID,IAAJ,CAAIA,QAAJ,KAAe;YACbA,WAAW;UACZ;QACD;;YACEG;UAOD;QACF;MAED;;MACD;IACF;EApByD,EANtB,CA6BxC;EACA;EACA;EACA;;MACEN,0BAAyBO,SAAMC;IAC/BR,8CAD+BQ;;SAG/BR,8BAAyBQ,UAAzBR,EAAuC;IACvCA,wCADuC;GAAvCA,MAGAA,8BAAuBA,QAAvBA,EAAuBA;IACxBA;EAED,CA1CwC,CA2CxCA;;;EAEAA,yDA7CwC,CA8CxC;;MACE,QAAM,IAAN,CAAUS,iBAAV,IACGT;IAEJ;EAED;;MACEA,eAAe,CAACK,UAAQ;QACtBD;;;;;;;;yBASI,CAACM;QAEJC;MAED;;UACEA,eACG,QADHA,IACG;QAEJA;MACF;IAED;;IACA,OAAOX,eAAe,CAACC,GAAvB;IACD;EAED,CA9EwC,CA+ExC;;;MACED,eAAe,oBACVA;IAGLA,eAAOA,WAAgBY,sBAAiBZ,iCAAjBY,CAAvB;IACD;EAED,CAvFwC,CAwFxC;EACA;;;MACE,OAAKZ,eAAgBU,IAArB,KAA0B,SAA1B,IAA0B;QACxB,gBAAOV,MAAe;MACtB,OAAOL,eAAMG,CAAUY,GAAvB;MACD;IACD;;IACD;EAED;;EACD;AAtKD;;AAKA;AAuCO,kBACLG,qBACAb,WAFK;;SAILL;EACA;EACA,OAAOK,eAAe,CAACc,OAAvB;EAEA,+BAJA,CAKA;;MACE,eAAOD;IACR;EAED;;EACA,wCAVA,CAWA;;eACWP,aAAWS;IAAEZ,WAAF;IAAYD,SAAS,EAAE,IAAvB;IAA8Bc,SAAQ,EAAE,KAAxC;IACrBA;EADqB","names":["noSSR","_interop_require_default","dynamic","loadableFn","options","loadableOptions","loading","pastDelay","isLoading","process","NODE_ENV","error","Promise","dynamicOptions","Error","ssr","console","loadableGenerated","LoadableInitializer","modules","_react","timedOut"],"sources":["../../../shared/lib/dynamic.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}